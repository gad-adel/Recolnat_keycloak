{"version":3,"file":"DetailSettings-8xarL2BP.js","sources":["../../src/identity-providers/add/AdvancedSettings.tsx","../../src/identity-providers/add/ExtendedNonDiscoverySettings.tsx","../../src/identity-providers/add/ReqAuthnConstraintsSettings.tsx","../../src/identity-providers/add/DetailSettings.tsx"],"sourcesContent":["import type AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport type IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport useIsFeatureEnabled, { Feature } from \"../../utils/useIsFeatureEnabled\";\nimport type { FieldProps } from \"../component/FormGroupField\";\nimport { FormGroupField } from \"../component/FormGroupField\";\nimport { SwitchField } from \"../component/SwitchField\";\nimport { TextField } from \"../component/TextField\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\nconst LoginFlow = ({\n  field,\n  label,\n  defaultValue,\n}: FieldProps & { defaultValue: string }) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n\n  const [flows, setFlows] = useState<AuthenticationFlowRepresentation[]>();\n  const [open, setOpen] = useState(false);\n\n  useFetch(\n    () => adminClient.authenticationManagement.getFlows(),\n    (flows) =>\n      setFlows(flows.filter((flow) => flow.providerId === \"basic-flow\")),\n    [],\n  );\n\n  return (\n    <FormGroup\n      label={t(label)}\n      labelIcon={<HelpItem helpText={t(`${label}Help`)} fieldLabelId={label} />}\n      fieldId={label}\n    >\n      <Controller\n        name={field}\n        defaultValue={defaultValue}\n        control={control}\n        render={({ field }) => (\n          <Select\n            toggleId={label}\n            required\n            onToggle={() => setOpen(!open)}\n            onSelect={(_, value) => {\n              field.onChange(value as string);\n              setOpen(false);\n            }}\n            selections={field.value || t(\"none\")}\n            variant={SelectVariant.single}\n            aria-label={t(label)}\n            isOpen={open}\n          >\n            {[\n              ...(defaultValue === \"\"\n                ? [\n                    <SelectOption key=\"empty\" value=\"\">\n                      {t(\"none\")}\n                    </SelectOption>,\n                  ]\n                : []),\n              ...(flows?.map((option) => (\n                <SelectOption\n                  selected={option.alias === field.value}\n                  key={option.id}\n                  value={option.alias}\n                >\n                  {option.alias}\n                </SelectOption>\n              )) || []),\n            ]}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n\nconst syncModes = [\"import\", \"legacy\", \"force\"];\ntype AdvancedSettingsProps = { isOIDC: boolean; isSAML: boolean };\n\nexport const AdvancedSettings = ({ isOIDC, isSAML }: AdvancedSettingsProps) => {\n  const { t } = useTranslation();\n  const {\n    control,\n    register,\n    setValue,\n    formState: { errors },\n  } = useFormContext<IdentityProviderRepresentation>();\n  const [syncModeOpen, setSyncModeOpen] = useState(false);\n  const filteredByClaim = useWatch({\n    control,\n    name: \"config.filteredByClaim\",\n    defaultValue: \"false\",\n  });\n  const claimFilterRequired = filteredByClaim === \"true\";\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const isTransientUsersEnabled = isFeatureEnabled(Feature.TransientUsers);\n  const transientUsers = useWatch({\n    control,\n    name: \"config.doNotStoreUsers\",\n    defaultValue: \"false\",\n  });\n  const syncModeAvailable = transientUsers === \"false\";\n  return (\n    <>\n      {!isOIDC && !isSAML && (\n        <TextField field=\"config.defaultScope\" label=\"scopes\" />\n      )}\n      <SwitchField field=\"storeToken\" label=\"storeTokens\" fieldType=\"boolean\" />\n      {(isSAML || isOIDC) && (\n        <SwitchField\n          field=\"addReadTokenRoleOnCreate\"\n          label=\"storedTokensReadable\"\n          fieldType=\"boolean\"\n        />\n      )}\n      {!isOIDC && !isSAML && (\n        <>\n          <SwitchField\n            field=\"config.acceptsPromptNoneForwardFromClient\"\n            label=\"acceptsPromptNone\"\n          />\n          <SwitchField field=\"config.disableUserInfo\" label=\"disableUserInfo\" />\n        </>\n      )}\n      {isOIDC && (\n        <SwitchField field=\"config.isAccessTokenJWT\" label=\"isAccessTokenJWT\" />\n      )}\n      <SwitchField field=\"trustEmail\" label=\"trustEmail\" fieldType=\"boolean\" />\n      <SwitchField\n        field=\"linkOnly\"\n        label=\"accountLinkingOnly\"\n        fieldType=\"boolean\"\n      />\n      <SwitchField field=\"config.hideOnLoginPage\" label=\"hideOnLoginPage\" />\n\n      {(!isSAML || isOIDC) && (\n        <FormGroupField label=\"filteredByClaim\">\n          <Controller\n            name=\"config.filteredByClaim\"\n            defaultValue=\"false\"\n            control={control}\n            render={({ field }) => (\n              <Switch\n                id=\"filteredByClaim\"\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                isChecked={field.value === \"true\"}\n                onChange={(value) => {\n                  field.onChange(value.toString());\n                }}\n              />\n            )}\n          />\n        </FormGroupField>\n      )}\n      {(!isSAML || isOIDC) && claimFilterRequired && (\n        <>\n          <FormGroup\n            label={t(\"claimFilterName\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"claimFilterNameHelp\")}\n                fieldLabelId=\"claimFilterName\"\n              />\n            }\n            fieldId=\"kc-claim-filter-name\"\n            isRequired\n            validated={\n              errors.config?.claimFilterName\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n            helperTextInvalid={t(\"required\")}\n          >\n            <KeycloakTextInput\n              isRequired\n              id=\"kc-claim-filter-name\"\n              data-testid=\"claimFilterName\"\n              validated={\n                errors.config?.claimFilterName\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default\n              }\n              {...register(\"config.claimFilterName\", { required: true })}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"claimFilterValue\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"claimFilterValueHelp\")}\n                fieldLabelId=\"claimFilterName\"\n              />\n            }\n            fieldId=\"kc-claim-filter-value\"\n            isRequired\n            validated={\n              errors.config?.claimFilterValue\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n            helperTextInvalid={t(\"required\")}\n          >\n            <KeycloakTextInput\n              isRequired\n              id=\"kc-claim-filter-value\"\n              data-testid=\"claimFilterValue\"\n              validated={\n                errors.config?.claimFilterValue\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default\n              }\n              {...register(\"config.claimFilterValue\", { required: true })}\n            />\n          </FormGroup>\n        </>\n      )}\n      <LoginFlow\n        field=\"firstBrokerLoginFlowAlias\"\n        label=\"firstBrokerLoginFlowAlias\"\n        defaultValue=\"fist broker login\"\n      />\n      <LoginFlow\n        field=\"postBrokerLoginFlowAlias\"\n        label=\"postBrokerLoginFlowAlias\"\n        defaultValue=\"\"\n      />\n\n      {isTransientUsersEnabled && (\n        <FormGroupField label=\"doNotStoreUsers\">\n          <Controller\n            name=\"config.doNotStoreUsers\"\n            defaultValue=\"false\"\n            control={control}\n            render={({ field }) => (\n              <Switch\n                id=\"doNotStoreUsers\"\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                isChecked={field.value === \"true\"}\n                onChange={(value) => {\n                  field.onChange(value.toString());\n                  // if field is checked, set sync mode to import\n                  if (value) {\n                    setValue(\"config.syncMode\", \"IMPORT\");\n                  }\n                }}\n              />\n            )}\n          />\n        </FormGroupField>\n      )}\n      {syncModeAvailable && (\n        <FormGroup\n          className=\"pf-u-pb-3xl\"\n          label={t(\"syncMode\")}\n          labelIcon={\n            <HelpItem helpText={t(\"syncModeHelp\")} fieldLabelId=\"syncMode\" />\n          }\n          fieldId=\"syncMode\"\n        >\n          <Controller\n            name=\"config.syncMode\"\n            defaultValue={syncModes[0].toUpperCase()}\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"syncMode\"\n                required\n                direction=\"up\"\n                onToggle={() => setSyncModeOpen(!syncModeOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setSyncModeOpen(false);\n                }}\n                selections={t(`syncModes.${field.value.toLowerCase()}`)}\n                variant={SelectVariant.single}\n                aria-label={t(\"syncMode\")}\n                isOpen={syncModeOpen}\n              >\n                {syncModes.map((option) => (\n                  <SelectOption\n                    selected={option === field.value}\n                    key={option}\n                    value={option.toUpperCase()}\n                  >\n                    {t(`syncModes.${option}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n      )}\n    </>\n  );\n};\n","import {\n  ExpandableSection,\n  Form,\n  FormGroup,\n  NumberInput,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { FormGroupField } from \"../component/FormGroupField\";\nimport { SwitchField } from \"../component/SwitchField\";\nimport { TextField } from \"../component/TextField\";\n\nconst promptOptions = {\n  unspecified: \"\",\n  none: \"none\",\n  consent: \"consent\",\n  login: \"login\",\n  select_account: \"select_account\",\n};\n\nexport const ExtendedNonDiscoverySettings = () => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [promptOpen, setPromptOpen] = useState(false);\n\n  return (\n    <ExpandableSection\n      toggleText={t(\"advanced\")}\n      onToggle={() => setIsExpanded(!isExpanded)}\n      isExpanded={isExpanded}\n    >\n      <Form isHorizontal>\n        <SwitchField label=\"passLoginHint\" field=\"config.loginHint\" />\n        <SwitchField label=\"passMaxAge\" field=\"config.passMaxAge\" />\n        <SwitchField label=\"passCurrentLocale\" field=\"config.uiLocales\" />\n        <SwitchField\n          field=\"config.backchannelSupported\"\n          label=\"backchannelLogout\"\n        />\n        <SwitchField field=\"config.disableUserInfo\" label=\"disableUserInfo\" />\n        <SwitchField field=\"config.disableNonce\" label=\"disableNonce\" />\n        <TextField field=\"config.defaultScope\" label=\"scopes\" />\n        <FormGroupField label=\"prompt\">\n          <Controller\n            name=\"config.prompt\"\n            defaultValue=\"\"\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"prompt\"\n                required\n                onToggle={() => setPromptOpen(!promptOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setPromptOpen(false);\n                }}\n                selections={field.value || t(`prompts.unspecified`)}\n                variant={SelectVariant.single}\n                aria-label={t(\"prompt\")}\n                isOpen={promptOpen}\n              >\n                {Object.entries(promptOptions).map(([key, val]) => (\n                  <SelectOption\n                    selected={val === field.value}\n                    key={key}\n                    value={val}\n                  >\n                    {t(`prompts.${key}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroupField>\n        <SwitchField\n          field=\"config.acceptsPromptNoneForwardFromClient\"\n          label=\"acceptsPromptNone\"\n        />\n        <FormGroup\n          label={t(\"allowedClockSkew\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"allowedClockSkewHelp\")}\n              fieldLabelId=\"allowedClockSkew\"\n            />\n          }\n          fieldId=\"allowedClockSkew\"\n        >\n          <Controller\n            name=\"config.allowedClockSkew\"\n            defaultValue={0}\n            control={control}\n            render={({ field }) => {\n              const v = Number(field.value);\n              return (\n                <NumberInput\n                  data-testid=\"allowedClockSkew\"\n                  inputName=\"allowedClockSkew\"\n                  min={0}\n                  max={2147483}\n                  value={v}\n                  readOnly\n                  onPlus={() => field.onChange(v + 1)}\n                  onMinus={() => field.onChange(v - 1)}\n                  onChange={(event) => {\n                    const value = Number(\n                      (event.target as HTMLInputElement).value,\n                    );\n                    field.onChange(value < 0 ? 0 : value);\n                  }}\n                />\n              );\n            }}\n          />\n        </FormGroup>\n        <TextField field=\"config.forwardParameters\" label=\"forwardParameters\" />\n      </Form>\n    </ExpandableSection>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\n\nconst comparisonValues = [\"exact\", \"minimum\", \"maximum\", \"better\"];\n\nexport const ReqAuthnConstraints = () => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n  const [comparisonOpen, setComparisonOpen] = useState(false);\n  return (\n    <>\n      <FormGroup\n        label={t(\"comparison\")}\n        labelIcon={\n          <HelpItem helpText={t(\"comparisonHelp\")} fieldLabelId=\"comparison\" />\n        }\n        fieldId=\"comparison\"\n      >\n        <Controller\n          name=\"config.authnContextComparisonType\"\n          defaultValue={comparisonValues[0]}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"comparison\"\n              required\n              direction=\"up\"\n              onToggle={(isExpanded) => setComparisonOpen(isExpanded)}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setComparisonOpen(false);\n              }}\n              selections={field.value}\n              variant={SelectVariant.single}\n              aria-label={t(\"comparison\")}\n              isOpen={comparisonOpen}\n            >\n              {comparisonValues.map((option) => (\n                <SelectOption\n                  selected={option === field.value}\n                  key={option}\n                  value={option}\n                >\n                  {t(option)}\n                </SelectOption>\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"authnContextClassRefs\")}\n        fieldId=\"kc-authnContextClassRefs\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"authnContextClassRefsHelp\")}\n            fieldLabelId=\"authnContextClassRefs\"\n          />\n        }\n      >\n        <MultiLineInput\n          name=\"config.authnContextClassRefs\"\n          aria-label={t(\"identify-providers:authnContextClassRefs\")}\n          addButtonLabel=\"addAuthnContextClassRef\"\n          data-testid=\"classref-field\"\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"authnContextDeclRefs\")}\n        fieldId=\"kc-authnContextDeclRefs\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"authnContextDeclRefsHelp\")}\n            fieldLabelId=\"authnContextDeclRefs\"\n          />\n        }\n      >\n        <MultiLineInput\n          name=\"config.authnContextDeclRefs\"\n          aria-label={t(\"identify-providers:authnContextDeclRefs\")}\n          addButtonLabel=\"addAuthnContextDeclRef\"\n          data-testid=\"declref-field\"\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import type IdentityProviderMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderMapperRepresentation\";\nimport type IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Divider,\n  DropdownItem,\n  Form,\n  PageSection,\n  Tab,\n  TabTitleText,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useMemo, useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { ScrollForm } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { DynamicComponents } from \"../../components/dynamic/DynamicComponents\";\nimport { FixedButtonsGroup } from \"../../components/form/FixedButtonGroup\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { PermissionsTab } from \"../../components/permission-tab/PermissionTab\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../../components/routable-tabs/RoutableTabs\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { ViewHeader } from \"../../components/view-header/ViewHeader\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { toUpperCase } from \"../../util\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport useIsFeatureEnabled, { Feature } from \"../../utils/useIsFeatureEnabled\";\nimport { useParams } from \"../../utils/useParams\";\nimport { toIdentityProviderAddMapper } from \"../routes/AddMapper\";\nimport { toIdentityProviderEditMapper } from \"../routes/EditMapper\";\nimport {\n  IdentityProviderParams,\n  IdentityProviderTab,\n  toIdentityProvider,\n} from \"../routes/IdentityProvider\";\nimport { toIdentityProviders } from \"../routes/IdentityProviders\";\nimport { AdvancedSettings } from \"./AdvancedSettings\";\nimport { DescriptorSettings } from \"./DescriptorSettings\";\nimport { DiscoverySettings } from \"./DiscoverySettings\";\nimport { ExtendedNonDiscoverySettings } from \"./ExtendedNonDiscoverySettings\";\nimport { GeneralSettings } from \"./GeneralSettings\";\nimport { OIDCAuthentication } from \"./OIDCAuthentication\";\nimport { OIDCGeneralSettings } from \"./OIDCGeneralSettings\";\nimport { ReqAuthnConstraints } from \"./ReqAuthnConstraintsSettings\";\nimport { SamlGeneralSettings } from \"./SamlGeneralSettings\";\n\ntype HeaderProps = {\n  onChange: (value: boolean) => void;\n  value: boolean;\n  save: () => void;\n  toggleDeleteDialog: () => void;\n};\n\ntype IdPWithMapperAttributes = IdentityProviderMapperRepresentation & {\n  name: string;\n  category?: string;\n  helpText?: string;\n  type: string;\n  mapperId: string;\n};\n\nconst Header = ({ onChange, value, save, toggleDeleteDialog }: HeaderProps) => {\n  const { t } = useTranslation();\n  const { alias: displayName } = useParams<{ alias: string }>();\n  const [provider, setProvider] = useState<IdentityProviderRepresentation>();\n\n  useFetch(\n    () => adminClient.identityProviders.findOne({ alias: displayName }),\n    (fetchedProvider) => {\n      if (!fetchedProvider) {\n        throw new Error(t(\"notFound\"));\n      }\n      setProvider(fetchedProvider);\n    },\n    [],\n  );\n\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"disableProvider\",\n    messageKey: t(\"disableConfirmIdentityProvider\", { provider: displayName }),\n    continueButtonLabel: \"disable\",\n    onConfirm: () => {\n      onChange(!value);\n      save();\n    },\n  });\n\n  return (\n    <>\n      <DisableConfirm />\n      <ViewHeader\n        titleKey={toUpperCase(\n          provider\n            ? provider.displayName\n              ? provider.displayName\n              : provider.providerId!\n            : \"\",\n        )}\n        divider={false}\n        dropdownItems={[\n          <DropdownItem key=\"delete\" onClick={() => toggleDeleteDialog()}>\n            {t(\"delete\")}\n          </DropdownItem>,\n        ]}\n        isEnabled={value}\n        onToggle={(value) => {\n          if (!value) {\n            toggleDisableDialog();\n          } else {\n            onChange(value);\n            save();\n          }\n        }}\n      />\n    </>\n  );\n};\n\ntype MapperLinkProps = IdPWithMapperAttributes & {\n  provider?: IdentityProviderRepresentation;\n};\n\nconst MapperLink = ({ name, mapperId, provider }: MapperLinkProps) => {\n  const { realm } = useRealm();\n  const { alias } = useParams<IdentityProviderParams>();\n\n  return (\n    <Link\n      to={toIdentityProviderEditMapper({\n        realm,\n        alias,\n        providerId: provider?.providerId!,\n        id: mapperId,\n      })}\n    >\n      {name}\n    </Link>\n  );\n};\n\nexport default function DetailSettings() {\n  const { t } = useTranslation();\n  const { alias, providerId } = useParams<IdentityProviderParams>();\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const form = useForm<IdentityProviderRepresentation>();\n  const { handleSubmit, getValues, reset } = form;\n  const [provider, setProvider] = useState<IdentityProviderRepresentation>();\n  const [selectedMapper, setSelectedMapper] =\n    useState<IdPWithMapperAttributes>();\n  const serverInfo = useServerInfo();\n  const providerInfo = useMemo(() => {\n    const namespaces = [\n      \"org.keycloak.broker.social.SocialIdentityProvider\",\n      \"org.keycloak.broker.provider.IdentityProvider\",\n    ];\n\n    for (const namespace of namespaces) {\n      const social = serverInfo.componentTypes?.[namespace]?.find(\n        ({ id }) => id === providerId,\n      );\n\n      if (social) {\n        return social;\n      }\n    }\n  }, [serverInfo, providerId]);\n\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  useFetch(\n    () => adminClient.identityProviders.findOne({ alias }),\n    (fetchedProvider) => {\n      if (!fetchedProvider) {\n        throw new Error(t(\"notFound\"));\n      }\n\n      reset(fetchedProvider);\n      setProvider(fetchedProvider);\n\n      if (fetchedProvider.config!.authnContextClassRefs) {\n        form.setValue(\n          \"config.authnContextClassRefs\",\n          JSON.parse(fetchedProvider.config?.authnContextClassRefs),\n        );\n      }\n\n      if (fetchedProvider.config!.authnContextDeclRefs) {\n        form.setValue(\n          \"config.authnContextDeclRefs\",\n          JSON.parse(fetchedProvider.config?.authnContextDeclRefs),\n        );\n      }\n    },\n    [],\n  );\n\n  const toTab = (tab: IdentityProviderTab) =>\n    toIdentityProvider({\n      realm,\n      alias,\n      providerId,\n      tab,\n    });\n\n  const useTab = (tab: IdentityProviderTab) => useRoutableTab(toTab(tab));\n\n  const settingsTab = useTab(\"settings\");\n  const mappersTab = useTab(\"mappers\");\n  const permissionsTab = useTab(\"permissions\");\n\n  const save = async (savedProvider?: IdentityProviderRepresentation) => {\n    const p = savedProvider || getValues();\n    if (p.config?.authnContextClassRefs)\n      p.config.authnContextClassRefs = JSON.stringify(\n        p.config.authnContextClassRefs,\n      );\n    if (p.config?.authnContextDeclRefs)\n      p.config.authnContextDeclRefs = JSON.stringify(\n        p.config.authnContextDeclRefs,\n      );\n\n    try {\n      await adminClient.identityProviders.update(\n        { alias },\n        {\n          ...p,\n          config: { ...provider?.config, ...p.config },\n          alias,\n          providerId,\n        },\n      );\n      addAlert(t(\"updateSuccessIdentityProvider\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updateErrorIdentityProvider\", error);\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteProvider\",\n    messageKey: t(\"deleteConfirmIdentityProvider\", { provider: alias }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.identityProviders.del({ alias: alias });\n        addAlert(t(\"deletedSuccessIdentityProvider\"), AlertVariant.success);\n        navigate(toIdentityProviders({ realm }));\n      } catch (error) {\n        addError(\"deleteErrorIdentityProvider\", error);\n      }\n    },\n  });\n\n  const [toggleDeleteMapperDialog, DeleteMapperConfirm] = useConfirmDialog({\n    titleKey: \"deleteProviderMapper\",\n    messageKey: t(\"deleteMapperConfirm\", {\n      mapper: selectedMapper?.name,\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.identityProviders.delMapper({\n          alias: alias,\n          id: selectedMapper?.mapperId!,\n        });\n        addAlert(t(\"deleteMapperSuccess\"), AlertVariant.success);\n        refresh();\n        navigate(\n          toIdentityProvider({ providerId, alias, tab: \"mappers\", realm }),\n        );\n      } catch (error) {\n        addError(\"deleteErrorIdentityProvider\", error);\n      }\n    },\n  });\n\n  if (!provider) {\n    return <KeycloakSpinner />;\n  }\n\n  const isOIDC = provider.providerId!.includes(\"oidc\");\n  const isSAML = provider.providerId!.includes(\"saml\");\n\n  const loader = async () => {\n    const [loaderMappers, loaderMapperTypes] = await Promise.all([\n      adminClient.identityProviders.findMappers({ alias }),\n      adminClient.identityProviders.findMapperTypes({ alias }),\n    ]);\n\n    const components = loaderMappers.map((loaderMapper) => {\n      const mapperType = Object.values(loaderMapperTypes).find(\n        (loaderMapperType) =>\n          loaderMapper.identityProviderMapper! === loaderMapperType.id!,\n      );\n\n      const result: IdPWithMapperAttributes = {\n        ...mapperType,\n        name: loaderMapper.name!,\n        type: mapperType?.name!,\n        mapperId: loaderMapper.id!,\n      };\n\n      return result;\n    });\n\n    return components;\n  };\n\n  const sections = [\n    {\n      title: t(\"generalSettings\"),\n      panel: (\n        <FormAccess\n          role=\"manage-identity-providers\"\n          isHorizontal\n          onSubmit={handleSubmit(save)}\n        >\n          {!isOIDC && !isSAML && (\n            <>\n              <GeneralSettings create={false} id={alias} />\n              {providerInfo && (\n                <DynamicComponents\n                  stringify\n                  properties={providerInfo.properties}\n                />\n              )}\n            </>\n          )}\n          {isOIDC && <OIDCGeneralSettings />}\n          {isSAML && <SamlGeneralSettings isAliasReadonly />}\n        </FormAccess>\n      ),\n    },\n    {\n      title: t(\"oidcSettings\"),\n      isHidden: !isOIDC,\n      panel: (\n        <>\n          <DiscoverySettings readOnly={false} />\n          <Form isHorizontal className=\"pf-u-py-lg\">\n            <Divider />\n            <OIDCAuthentication create={false} />\n          </Form>\n          <ExtendedNonDiscoverySettings />\n        </>\n      ),\n    },\n    {\n      title: t(\"samlSettings\"),\n      isHidden: !isSAML,\n      panel: <DescriptorSettings readOnly={false} />,\n    },\n    {\n      title: t(\"reqAuthnConstraints\"),\n      isHidden: !isSAML,\n      panel: (\n        <FormAccess\n          role=\"manage-identity-providers\"\n          isHorizontal\n          onSubmit={handleSubmit(save)}\n        >\n          <ReqAuthnConstraints />\n        </FormAccess>\n      ),\n    },\n    {\n      title: t(\"advancedSettings\"),\n      panel: (\n        <FormAccess\n          role=\"manage-identity-providers\"\n          isHorizontal\n          onSubmit={handleSubmit(save)}\n        >\n          <AdvancedSettings isOIDC={isOIDC!} isSAML={isSAML!} />\n\n          <FixedButtonsGroup name=\"idp-details\" isSubmit reset={reset} />\n        </FormAccess>\n      ),\n    },\n  ];\n\n  return (\n    <FormProvider {...form}>\n      <DeleteConfirm />\n      <DeleteMapperConfirm />\n      <Controller\n        name=\"enabled\"\n        control={form.control}\n        defaultValue={true}\n        render={({ field }) => (\n          <Header\n            value={field.value || false}\n            onChange={field.onChange}\n            save={save}\n            toggleDeleteDialog={toggleDeleteDialog}\n          />\n        )}\n      />\n\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs isBox defaultLocation={toTab(\"settings\")}>\n          <Tab\n            id=\"settings\"\n            title={<TabTitleText>{t(\"settings\")}</TabTitleText>}\n            {...settingsTab}\n          >\n            <ScrollForm\n              label={t(\"jumpToSection\")}\n              className=\"pf-u-px-lg\"\n              sections={sections}\n            />\n          </Tab>\n          <Tab\n            id=\"mappers\"\n            data-testid=\"mappers-tab\"\n            title={<TabTitleText>{t(\"mappers\")}</TabTitleText>}\n            {...mappersTab}\n          >\n            <KeycloakDataTable\n              emptyState={\n                <ListEmptyState\n                  message={t(\"noMappers\")}\n                  instructions={t(\"noMappersInstructions\")}\n                  primaryActionText={t(\"addMapper\")}\n                  onPrimaryAction={() =>\n                    navigate(\n                      toIdentityProviderAddMapper({\n                        realm,\n                        alias: alias!,\n                        providerId: provider.providerId!,\n                        tab: \"mappers\",\n                      }),\n                    )\n                  }\n                />\n              }\n              loader={loader}\n              key={key}\n              ariaLabelKey=\"mappersList\"\n              searchPlaceholderKey=\"searchForMapper\"\n              toolbarItem={\n                <ToolbarItem>\n                  <Button\n                    id=\"add-mapper-button\"\n                    component={(props) => (\n                      <Link\n                        {...props}\n                        to={toIdentityProviderAddMapper({\n                          realm,\n                          alias: alias!,\n                          providerId: provider.providerId!,\n                          tab: \"mappers\",\n                        })}\n                      />\n                    )}\n                    data-testid=\"addMapper\"\n                  >\n                    {t(\"addMapper\")}\n                  </Button>\n                </ToolbarItem>\n              }\n              columns={[\n                {\n                  name: \"name\",\n                  displayKey: \"name\",\n                  cellRenderer: (row) => (\n                    <MapperLink {...row} provider={provider} />\n                  ),\n                },\n                {\n                  name: \"category\",\n                  displayKey: \"category\",\n                },\n                {\n                  name: \"type\",\n                  displayKey: \"type\",\n                },\n              ]}\n              actions={[\n                {\n                  title: t(\"delete\"),\n                  onRowClick: (mapper) => {\n                    setSelectedMapper(mapper);\n                    toggleDeleteMapperDialog();\n                  },\n                } as Action<IdPWithMapperAttributes>,\n              ]}\n            />\n          </Tab>\n          {isFeatureEnabled(Feature.AdminFineGrainedAuthz) && (\n            <Tab\n              id=\"permissions\"\n              data-testid=\"permissionsTab\"\n              title={<TabTitleText>{t(\"permissions\")}</TabTitleText>}\n              {...permissionsTab}\n            >\n              <PermissionsTab id={alias} type=\"identityProviders\" />\n            </Tab>\n          )}\n        </RoutableTabs>\n      </PageSection>\n    </FormProvider>\n  );\n}\n"],"names":["LoginFlow","field","label","defaultValue","t","useTranslation","control","useFormContext","flows","setFlows","useState","open","setOpen","useFetch","adminClient","flow","jsx","FormGroup","HelpItem","Controller","Select","_","value","SelectVariant","SelectOption","option","syncModes","AdvancedSettings","isOIDC","isSAML","register","setValue","errors","syncModeOpen","setSyncModeOpen","claimFilterRequired","useWatch","isTransientUsersEnabled","useIsFeatureEnabled","Feature","syncModeAvailable","jsxs","Fragment","TextField","SwitchField","FormGroupField","Switch","ValidatedOptions","KeycloakTextInput","promptOptions","ExtendedNonDiscoverySettings","isExpanded","setIsExpanded","promptOpen","setPromptOpen","ExpandableSection","Form","key","val","v","NumberInput","event","comparisonValues","ReqAuthnConstraints","comparisonOpen","setComparisonOpen","MultiLineInput","Header","onChange","save","toggleDeleteDialog","displayName","useParams","provider","setProvider","fetchedProvider","toggleDisableDialog","DisableConfirm","useConfirmDialog","ViewHeader","toUpperCase","DropdownItem","MapperLink","name","mapperId","realm","useRealm","alias","Link","toIdentityProviderEditMapper","DetailSettings","providerId","isFeatureEnabled","form","useForm","handleSubmit","getValues","reset","selectedMapper","setSelectedMapper","serverInfo","useServerInfo","providerInfo","useMemo","namespaces","namespace","social","id","addAlert","addError","useAlerts","navigate","useNavigate","setKey","refresh","toTab","tab","toIdentityProvider","useTab","useRoutableTab","settingsTab","mappersTab","permissionsTab","savedProvider","p","AlertVariant","error","DeleteConfirm","ButtonVariant","toIdentityProviders","toggleDeleteMapperDialog","DeleteMapperConfirm","KeycloakSpinner","loader","loaderMappers","loaderMapperTypes","loaderMapper","mapperType","loaderMapperType","sections","FormAccess","GeneralSettings","DynamicComponents","OIDCGeneralSettings","SamlGeneralSettings","DiscoverySettings","Divider","OIDCAuthentication","DescriptorSettings","FixedButtonsGroup","FormProvider","PageSection","RoutableTabs","Tab","TabTitleText","ScrollForm","KeycloakDataTable","ListEmptyState","toIdentityProviderAddMapper","ToolbarItem","Button","props","row","mapper","PermissionsTab"],"mappings":"kjFAwBA,MAAMA,GAAY,CAAC,CACjB,MAAAC,EACA,MAAAC,EACA,aAAAC,CACF,IAA6C,CACrC,KAAA,CAAE,EAAAC,GAAMC,IACR,CAAE,QAAAC,GAAYC,IAEd,CAACC,EAAOC,CAAQ,EAAIC,EAA6C,EACjE,CAACC,EAAMC,CAAO,EAAIF,EAAS,EAAK,EAEtC,OAAAG,EACE,IAAMC,EAAY,yBAAyB,SAAS,EACnDN,GACCC,EAASD,EAAM,OAAQO,GAASA,EAAK,aAAe,YAAY,CAAC,EACnE,CAAC,CAAA,EAIDC,EAACC,EAAA,CACC,MAAOb,EAAEF,CAAK,EACd,UAAYc,EAAAE,EAAA,CAAS,SAAUd,EAAE,GAAGF,CAAK,MAAM,EAAG,aAAcA,CAAO,CAAA,EACvE,QAASA,EAET,SAAAc,EAACG,EAAA,CACC,KAAMlB,EACN,aAAAE,EACA,QAAAG,EACA,OAAQ,CAAC,CAAE,MAAAL,CACT,IAAAe,EAACI,EAAA,CACC,SAAUlB,EACV,SAAQ,GACR,SAAU,IAAMU,EAAQ,CAACD,CAAI,EAC7B,SAAU,CAACU,EAAGC,IAAU,CACtBrB,EAAM,SAASqB,CAAe,EAC9BV,EAAQ,EAAK,CACf,EACA,WAAYX,EAAM,OAASG,EAAE,MAAM,EACnC,QAASmB,EAAc,OACvB,aAAYnB,EAAEF,CAAK,EACnB,OAAQS,EAEP,SAAA,CACC,GAAIR,IAAiB,GACjB,GACGqB,EAAyB,CAAA,MAAM,GAC7B,SAAEpB,EAAA,MAAM,GADO,OAElB,CAAA,EAEF,CAAC,EACL,GAAII,GAAO,IAAKiB,GACdT,EAACQ,EAAA,CACC,SAAUC,EAAO,QAAUxB,EAAM,MAEjC,MAAOwB,EAAO,MAEb,SAAOA,EAAA,KAAA,EAHHA,EAAO,EAKf,CAAA,GAAK,CAAC,CACT,CAAA,CACF,CAAA,CAEJ,CAAA,CAAA,CAGN,EAEMC,GAAY,CAAC,SAAU,SAAU,OAAO,EAGjCC,GAAmB,CAAC,CAAE,OAAAC,EAAQ,OAAAC,KAAoC,CACvE,KAAA,CAAE,EAAAzB,GAAMC,IACR,CACJ,QAAAC,EACA,SAAAwB,EACA,SAAAC,EACA,UAAW,CAAE,OAAAC,CAAO,GAClBzB,EAA+C,EAC7C,CAAC0B,EAAcC,CAAe,EAAIxB,EAAS,EAAK,EAMhDyB,EALkBC,EAAS,CAC/B,QAAA9B,EACA,KAAM,yBACN,aAAc,OAAA,CACf,IAC+C,OAE1C+B,EADmBC,KACwBC,GAAQ,cAAc,EAMjEC,EALiBJ,EAAS,CAC9B,QAAA9B,EACA,KAAM,yBACN,aAAc,OAAA,CACf,IAC4C,QAC7C,OAEKmC,EAAAC,EAAA,CAAA,SAAA,CAAC,CAAAd,GAAU,CAACC,GACXb,EAAC2B,GAAU,MAAM,sBAAsB,MAAM,SAAS,IAEvDC,EAAY,CAAA,MAAM,aAAa,MAAM,cAAc,UAAU,UAAU,GACtEf,GAAUD,IACVZ,EAAC4B,EAAA,CACC,MAAM,2BACN,MAAM,uBACN,UAAU,SAAA,CACZ,EAED,CAAChB,GAAU,CAACC,GAETY,EAAAC,EAAA,CAAA,SAAA,CAAA1B,EAAC4B,EAAA,CACC,MAAM,4CACN,MAAM,mBAAA,CACR,EACC5B,EAAA4B,EAAA,CAAY,MAAM,yBAAyB,MAAM,kBAAkB,CAAA,EACtE,EAEDhB,GACEZ,EAAA4B,EAAA,CAAY,MAAM,0BAA0B,MAAM,mBAAmB,IAEvEA,EAAY,CAAA,MAAM,aAAa,MAAM,aAAa,UAAU,UAAU,EACvE5B,EAAC4B,EAAA,CACC,MAAM,WACN,MAAM,qBACN,UAAU,SAAA,CACZ,EACC5B,EAAA4B,EAAA,CAAY,MAAM,yBAAyB,MAAM,kBAAkB,GAElE,CAACf,GAAUD,IACVZ,EAAA6B,EAAA,CAAe,MAAM,kBACpB,SAAA7B,EAACG,EAAA,CACC,KAAK,yBACL,aAAa,QACb,QAAAb,EACA,OAAQ,CAAC,CAAE,MAAAL,CAAA,IACTe,EAAC8B,GAAA,CACC,GAAG,kBACH,MAAO1C,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,UAAWH,EAAM,QAAU,OAC3B,SAAWqB,GAAU,CACbrB,EAAA,SAASqB,EAAM,SAAU,CAAA,CACjC,CAAA,CACF,CAAA,CAAA,EAGN,GAEA,CAACO,GAAUD,IAAWO,GAEpBM,EAAAC,EAAA,CAAA,SAAA,CAAA1B,EAACC,EAAA,CACC,MAAOb,EAAE,iBAAiB,EAC1B,UACEY,EAACE,EAAA,CACC,SAAUd,EAAE,qBAAqB,EACjC,aAAa,iBAAA,CACf,EAEF,QAAQ,uBACR,WAAU,GACV,UACE4B,EAAO,QAAQ,gBACXe,EAAiB,MACjBA,EAAiB,QAEvB,kBAAmB3C,EAAE,UAAU,EAE/B,SAAAY,EAACgC,GAAA,CACC,WAAU,GACV,GAAG,uBACH,cAAY,kBACZ,UACEhB,EAAO,QAAQ,gBACXe,EAAiB,MACjBA,EAAiB,QAEtB,GAAGjB,EAAS,yBAA0B,CAAE,SAAU,GAAM,CAAA,CAC3D,CAAA,CACF,EACAd,EAACC,EAAA,CACC,MAAOb,EAAE,kBAAkB,EAC3B,UACEY,EAACE,EAAA,CACC,SAAUd,EAAE,sBAAsB,EAClC,aAAa,iBAAA,CACf,EAEF,QAAQ,wBACR,WAAU,GACV,UACE4B,EAAO,QAAQ,iBACXe,EAAiB,MACjBA,EAAiB,QAEvB,kBAAmB3C,EAAE,UAAU,EAE/B,SAAAY,EAACgC,GAAA,CACC,WAAU,GACV,GAAG,wBACH,cAAY,mBACZ,UACEhB,EAAO,QAAQ,iBACXe,EAAiB,MACjBA,EAAiB,QAEtB,GAAGjB,EAAS,0BAA2B,CAAE,SAAU,GAAM,CAAA,CAC5D,CAAA,CACF,CAAA,EACF,EAEFd,EAAChB,GAAA,CACC,MAAM,4BACN,MAAM,4BACN,aAAa,mBAAA,CACf,EACAgB,EAAChB,GAAA,CACC,MAAM,2BACN,MAAM,2BACN,aAAa,EAAA,CACf,EAECqC,GACCrB,EAAC6B,EAAe,CAAA,MAAM,kBACpB,SAAA7B,EAACG,EAAA,CACC,KAAK,yBACL,aAAa,QACb,QAAAb,EACA,OAAQ,CAAC,CAAE,MAAAL,CAAA,IACTe,EAAC8B,GAAA,CACC,GAAG,kBACH,MAAO1C,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,UAAWH,EAAM,QAAU,OAC3B,SAAWqB,GAAU,CACbrB,EAAA,SAASqB,EAAM,SAAU,CAAA,EAE3BA,GACFS,EAAS,kBAAmB,QAAQ,CAExC,CAAA,CACF,CAAA,CAAA,EAGN,EAEDS,GACCxB,EAACC,EAAA,CACC,UAAU,cACV,MAAOb,EAAE,UAAU,EACnB,YACGc,EAAS,CAAA,SAAUd,EAAE,cAAc,EAAG,aAAa,WAAW,EAEjE,QAAQ,WAER,SAAAY,EAACG,EAAA,CACC,KAAK,kBACL,aAAcO,GAAU,CAAC,EAAE,YAAY,EACvC,QAAApB,EACA,OAAQ,CAAC,CAAE,MAAAL,CAAA,IACTe,EAACI,EAAA,CACC,SAAS,WACT,SAAQ,GACR,UAAU,KACV,SAAU,IAAMc,EAAgB,CAACD,CAAY,EAC7C,SAAU,CAACZ,EAAGC,IAAU,CACtBrB,EAAM,SAASqB,CAAe,EAC9BY,EAAgB,EAAK,CACvB,EACA,WAAY9B,EAAE,aAAaH,EAAM,MAAM,YAAa,CAAA,EAAE,EACtD,QAASsB,EAAc,OACvB,aAAYnB,EAAE,UAAU,EACxB,OAAQ6B,EAEP,SAAAP,GAAU,IAAKD,GACdT,EAACQ,EAAA,CACC,SAAUC,IAAWxB,EAAM,MAE3B,MAAOwB,EAAO,YAAY,EAEzB,SAAArB,EAAE,aAAaqB,CAAM,EAAE,CAAA,EAHnBA,CAAA,CAKR,CAAA,CACH,CAAA,CAEJ,CAAA,CACF,CAEJ,CAAA,CAAA,CAEJ,ECrSMwB,GAAgB,CACpB,YAAa,GACb,KAAM,OACN,QAAS,UACT,MAAO,QACP,eAAgB,gBAClB,EAEaC,GAA+B,IAAM,CAC1C,KAAA,CAAE,GAAM7C,IACR,CAAE,QAAAC,GAAYC,IAEd,CAAC4C,EAAYC,CAAa,EAAI1C,EAAS,EAAK,EAC5C,CAAC2C,EAAYC,CAAa,EAAI5C,EAAS,EAAK,EAGhD,OAAAM,EAACuC,GAAA,CACC,WAAY,EAAE,UAAU,EACxB,SAAU,IAAMH,EAAc,CAACD,CAAU,EACzC,WAAAA,EAEA,SAAAV,EAACe,GAAK,CAAA,aAAY,GAChB,SAAA,CAAAxC,EAAC4B,EAAY,CAAA,MAAM,gBAAgB,MAAM,mBAAmB,EAC3D5B,EAAA4B,EAAA,CAAY,MAAM,aAAa,MAAM,oBAAoB,EACzD5B,EAAA4B,EAAA,CAAY,MAAM,oBAAoB,MAAM,mBAAmB,EAChE5B,EAAC4B,EAAA,CACC,MAAM,8BACN,MAAM,mBAAA,CACR,EACC5B,EAAA4B,EAAA,CAAY,MAAM,yBAAyB,MAAM,kBAAkB,EACnE5B,EAAA4B,EAAA,CAAY,MAAM,sBAAsB,MAAM,eAAe,EAC7D5B,EAAA2B,EAAA,CAAU,MAAM,sBAAsB,MAAM,SAAS,EACtD3B,EAAC6B,EAAe,CAAA,MAAM,SACpB,SAAA7B,EAACG,EAAA,CACC,KAAK,gBACL,aAAa,GACb,QAAAb,EACA,OAAQ,CAAC,CAAE,MAAAL,CAAA,IACTe,EAACI,EAAA,CACC,SAAS,SACT,SAAQ,GACR,SAAU,IAAMkC,EAAc,CAACD,CAAU,EACzC,SAAU,CAAChC,EAAGC,IAAU,CACtBrB,EAAM,SAASqB,CAAe,EAC9BgC,EAAc,EAAK,CACrB,EACA,WAAYrD,EAAM,OAAS,EAAE,qBAAqB,EAClD,QAASsB,EAAc,OACvB,aAAY,EAAE,QAAQ,EACtB,OAAQ8B,EAEP,SAAA,OAAO,QAAQJ,EAAa,EAAE,IAAI,CAAC,CAACQ,EAAKC,CAAG,IAC3C1C,EAACQ,EAAA,CACC,SAAUkC,IAAQzD,EAAM,MAExB,MAAOyD,EAEN,SAAA,EAAE,WAAWD,CAAG,EAAE,CAAA,EAHdA,CAAA,CAKR,CAAA,CACH,CAAA,CAAA,EAGN,EACAzC,EAAC4B,EAAA,CACC,MAAM,4CACN,MAAM,mBAAA,CACR,EACA5B,EAACC,EAAA,CACC,MAAO,EAAE,kBAAkB,EAC3B,UACED,EAACE,EAAA,CACC,SAAU,EAAE,sBAAsB,EAClC,aAAa,kBAAA,CACf,EAEF,QAAQ,mBAER,SAAAF,EAACG,EAAA,CACC,KAAK,0BACL,aAAc,EACd,QAAAb,EACA,OAAQ,CAAC,CAAE,MAAAL,KAAY,CACf,MAAA0D,EAAI,OAAO1D,EAAM,KAAK,EAE1B,OAAAe,EAAC4C,GAAA,CACC,cAAY,mBACZ,UAAU,mBACV,IAAK,EACL,IAAK,QACL,MAAOD,EACP,SAAQ,GACR,OAAQ,IAAM1D,EAAM,SAAS0D,EAAI,CAAC,EAClC,QAAS,IAAM1D,EAAM,SAAS0D,EAAI,CAAC,EACnC,SAAWE,GAAU,CACnB,MAAMvC,EAAQ,OACXuC,EAAM,OAA4B,KAAA,EAErC5D,EAAM,SAASqB,EAAQ,EAAI,EAAIA,CAAK,CACtC,CAAA,CAAA,CAGN,CAAA,CACF,CAAA,CACF,EACCN,EAAA2B,EAAA,CAAU,MAAM,2BAA2B,MAAM,oBAAoB,CAAA,EACxE,CAAA,CAAA,CAGN,EClHMmB,GAAmB,CAAC,QAAS,UAAW,UAAW,QAAQ,EAEpDC,GAAsB,IAAM,CACjC,KAAA,CAAE,GAAM1D,IACR,CAAE,QAAAC,GAAYC,IACd,CAACyD,EAAgBC,CAAiB,EAAIvD,EAAS,EAAK,EAC1D,OAEI+B,EAAAC,EAAA,CAAA,SAAA,CAAA1B,EAACC,EAAA,CACC,MAAO,EAAE,YAAY,EACrB,YACGC,EAAS,CAAA,SAAU,EAAE,gBAAgB,EAAG,aAAa,aAAa,EAErE,QAAQ,aAER,SAAAF,EAACG,EAAA,CACC,KAAK,oCACL,aAAc2C,GAAiB,CAAC,EAChC,QAAAxD,EACA,OAAQ,CAAC,CAAE,MAAAL,CAAA,IACTe,EAACI,EAAA,CACC,SAAS,aACT,SAAQ,GACR,UAAU,KACV,SAAW+B,GAAec,EAAkBd,CAAU,EACtD,SAAU,CAAC9B,EAAGC,IAAU,CAChBrB,EAAA,SAASqB,EAAM,SAAU,CAAA,EAC/B2C,EAAkB,EAAK,CACzB,EACA,WAAYhE,EAAM,MAClB,QAASsB,EAAc,OACvB,aAAY,EAAE,YAAY,EAC1B,OAAQyC,EAEP,SAAAF,GAAiB,IAAKrC,GACrBT,EAACQ,EAAA,CACC,SAAUC,IAAWxB,EAAM,MAE3B,MAAOwB,EAEN,WAAEA,CAAM,CAAA,EAHJA,CAAA,CAKR,CAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACAT,EAACC,EAAA,CACC,MAAO,EAAE,uBAAuB,EAChC,QAAQ,2BACR,UACED,EAACE,EAAA,CACC,SAAU,EAAE,2BAA2B,EACvC,aAAa,uBAAA,CACf,EAGF,SAAAF,EAACkD,GAAA,CACC,KAAK,+BACL,aAAY,EAAE,0CAA0C,EACxD,eAAe,0BACf,cAAY,gBAAA,CACd,CAAA,CACF,EACAlD,EAACC,EAAA,CACC,MAAO,EAAE,sBAAsB,EAC/B,QAAQ,0BACR,UACED,EAACE,EAAA,CACC,SAAU,EAAE,0BAA0B,EACtC,aAAa,sBAAA,CACf,EAGF,SAAAF,EAACkD,GAAA,CACC,KAAK,8BACL,aAAY,EAAE,yCAAyC,EACvD,eAAe,yBACf,cAAY,eAAA,CACd,CAAA,CACF,CACF,CAAA,CAAA,CAEJ,ECnBMC,GAAS,CAAC,CAAE,SAAAC,EAAU,MAAA9C,EAAO,KAAA+C,EAAM,mBAAAC,KAAsC,CACvE,KAAA,CAAE,EAAAlE,GAAMC,IACR,CAAE,MAAOkE,CAAY,EAAIC,EAA6B,EACtD,CAACC,EAAUC,CAAW,EAAIhE,EAAyC,EAEzEG,EACE,IAAMC,EAAY,kBAAkB,QAAQ,CAAE,MAAOyD,EAAa,EACjEI,GAAoB,CACnB,GAAI,CAACA,EACH,MAAM,IAAI,MAAMvE,EAAE,UAAU,CAAC,EAE/BsE,EAAYC,CAAe,CAC7B,EACA,CAAC,CAAA,EAGH,KAAM,CAACC,EAAqBC,CAAc,EAAIC,EAAiB,CAC7D,SAAU,kBACV,WAAY1E,EAAE,iCAAkC,CAAE,SAAUmE,EAAa,EACzE,oBAAqB,UACrB,UAAW,IAAM,CACfH,EAAS,CAAC9C,CAAK,EACV+C,GACP,CAAA,CACD,EAED,OAEI5B,EAAAC,EAAA,CAAA,SAAA,CAAA1B,EAAC6D,EAAe,EAAA,EAChB7D,EAAC+D,GAAA,CACC,SAAUC,GACRP,EACIA,EAAS,YACPA,EAAS,YACTA,EAAS,WACX,EACN,EACA,QAAS,GACT,cAAe,CACbzD,EAACiE,IAA0B,QAAS,IAAMX,IACvC,SAAAlE,EAAE,QAAQ,CAAA,EADK,QAElB,CACF,EACA,UAAWkB,EACX,SAAWA,GAAU,CACdA,GAGH8C,EAAS9C,CAAK,EACT+C,KAHeO,GAKxB,CAAA,CACF,CACF,CAAA,CAAA,CAEJ,EAMMM,GAAa,CAAC,CAAE,KAAAC,EAAM,SAAAC,EAAU,SAAAX,KAAgC,CAC9D,KAAA,CAAE,MAAAY,GAAUC,KACZ,CAAE,MAAAC,GAAUf,IAGhB,OAAAxD,EAACwE,GAAA,CACC,GAAIC,GAA6B,CAC/B,MAAAJ,EACA,MAAAE,EACA,WAAYd,GAAU,WACtB,GAAIW,CAAA,CACL,EAEA,SAAAD,CAAA,CAAA,CAGP,EAEA,SAAwBO,IAAiB,CACjC,KAAA,CAAE,GAAMrF,IACR,CAAE,MAAAkF,EAAO,WAAAI,CAAW,EAAInB,EAAkC,EAC1DoB,EAAmBtD,KACnBuD,EAAOC,KACP,CAAE,aAAAC,EAAc,UAAAC,EAAW,MAAAC,CAAA,EAAUJ,EACrC,CAACpB,EAAUC,CAAW,EAAIhE,EAAyC,EACnE,CAACwF,EAAgBC,CAAiB,EACtCzF,EAAkC,EAC9B0F,EAAaC,KACbC,EAAeC,GAAQ,IAAM,CACjC,MAAMC,EAAa,CACjB,oDACA,+CAAA,EAGF,UAAWC,KAAaD,EAAY,CAClC,MAAME,EAASN,EAAW,iBAAiBK,CAAS,GAAG,KACrD,CAAC,CAAE,GAAAE,KAASA,IAAOhB,CAAA,EAGrB,GAAIe,EACK,OAAAA,CAEX,CAAA,EACC,CAACN,EAAYT,CAAU,CAAC,EAErB,CAAE,SAAAiB,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnCC,EAAWC,KACX,CAAE,MAAA3B,GAAUC,KACZ,CAAC7B,EAAKwD,EAAM,EAAIvG,EAAS,CAAC,EAC1BwG,GAAU,IAAMD,GAAOxD,EAAM,CAAC,EAEpC5C,EACE,IAAMC,EAAY,kBAAkB,QAAQ,CAAE,MAAAyE,EAAO,EACpDZ,GAAoB,CACnB,GAAI,CAACA,EACH,MAAM,IAAI,MAAM,EAAE,UAAU,CAAC,EAG/BsB,EAAMtB,CAAe,EACrBD,EAAYC,CAAe,EAEvBA,EAAgB,OAAQ,uBACrBkB,EAAA,SACH,+BACA,KAAK,MAAMlB,EAAgB,QAAQ,qBAAqB,CAAA,EAIxDA,EAAgB,OAAQ,sBACrBkB,EAAA,SACH,8BACA,KAAK,MAAMlB,EAAgB,QAAQ,oBAAoB,CAAA,CAG7D,EACA,CAAC,CAAA,EAGG,MAAAwC,EAASC,GACbC,GAAmB,CACjB,MAAAhC,EACA,MAAAE,EACA,WAAAI,EACA,IAAAyB,CAAA,CACD,EAEGE,EAAUF,GAA6BG,GAAeJ,EAAMC,CAAG,CAAC,EAEhEI,GAAcF,EAAO,UAAU,EAC/BG,GAAaH,EAAO,SAAS,EAC7BI,GAAiBJ,EAAO,aAAa,EAErCjD,EAAO,MAAOsD,GAAmD,CAC/D,MAAAC,EAAID,GAAiB3B,IACvB4B,EAAE,QAAQ,wBACVA,EAAA,OAAO,sBAAwB,KAAK,UACpCA,EAAE,OAAO,qBAAA,GAETA,EAAE,QAAQ,uBACVA,EAAA,OAAO,qBAAuB,KAAK,UACnCA,EAAE,OAAO,oBAAA,GAGT,GAAA,CACF,MAAM9G,EAAY,kBAAkB,OAClC,CAAE,MAAAyE,CAAM,EACR,CACE,GAAGqC,EACH,OAAQ,CAAE,GAAGnD,GAAU,OAAQ,GAAGmD,EAAE,MAAO,EAC3C,MAAArC,EACA,WAAAI,CACF,CAAA,EAEFiB,EAAS,EAAE,+BAA+B,EAAGiB,EAAa,OAAO,QAC1DC,EAAO,CACdjB,EAAS,8BAA+BiB,CAAK,CAC/C,CAAA,EAGI,CAACxD,GAAoByD,EAAa,EAAIjD,EAAiB,CAC3D,SAAU,iBACV,WAAY,EAAE,gCAAiC,CAAE,SAAUS,EAAO,EAClE,oBAAqB,SACrB,sBAAuByC,GAAc,OACrC,UAAW,SAAY,CACjB,GAAA,CACF,MAAMlH,EAAY,kBAAkB,IAAI,CAAE,MAAAyE,CAAc,CAAA,EACxDqB,EAAS,EAAE,gCAAgC,EAAGiB,EAAa,OAAO,EAClEd,EAASkB,GAAoB,CAAE,MAAA5C,CAAM,CAAC,CAAC,QAChCyC,EAAO,CACdjB,EAAS,8BAA+BiB,CAAK,CAC/C,CACF,CAAA,CACD,EAEK,CAACI,GAA0BC,EAAmB,EAAIrD,EAAiB,CACvE,SAAU,uBACV,WAAY,EAAE,sBAAuB,CACnC,OAAQoB,GAAgB,IAAA,CACzB,EACD,oBAAqB,SACrB,sBAAuB8B,GAAc,OACrC,UAAW,SAAY,CACjB,GAAA,CACI,MAAAlH,EAAY,kBAAkB,UAAU,CAC5C,MAAAyE,EACA,GAAIW,GAAgB,QAAA,CACrB,EACDU,EAAS,EAAE,qBAAqB,EAAGiB,EAAa,OAAO,EAC/CX,KACRH,EACEM,GAAmB,CAAE,WAAA1B,EAAY,MAAAJ,EAAO,IAAK,UAAW,MAAAF,EAAO,CAAA,QAE1DyC,EAAO,CACdjB,EAAS,8BAA+BiB,CAAK,CAC/C,CACF,CAAA,CACD,EAED,GAAI,CAACrD,EACH,SAAQ2D,GAAgB,CAAA,CAAA,EAG1B,MAAMxG,EAAS6C,EAAS,WAAY,SAAS,MAAM,EAC7C5C,EAAS4C,EAAS,WAAY,SAAS,MAAM,EAE7C4D,GAAS,SAAY,CACzB,KAAM,CAACC,EAAeC,CAAiB,EAAI,MAAM,QAAQ,IAAI,CAC3DzH,EAAY,kBAAkB,YAAY,CAAE,MAAAyE,EAAO,EACnDzE,EAAY,kBAAkB,gBAAgB,CAAE,MAAAyE,EAAO,CAAA,CACxD,EAkBM,OAhBY+C,EAAc,IAAKE,GAAiB,CACrD,MAAMC,EAAa,OAAO,OAAOF,CAAiB,EAAE,KACjDG,IACCF,EAAa,yBAA4BE,GAAiB,EAAA,EAUvD,MAPiC,CACtC,GAAGD,EACH,KAAMD,EAAa,KACnB,KAAMC,GAAY,KAClB,SAAUD,EAAa,EAAA,CAGlB,CACR,CAEM,EAGHG,GAAW,CACf,CACE,MAAO,EAAE,iBAAiB,EAC1B,MACElG,EAACmG,EAAA,CACC,KAAK,4BACL,aAAY,GACZ,SAAU7C,EAAa1B,CAAI,EAE1B,SAAA,CAAC,CAAAzC,GAAU,CAACC,GAETY,EAAAC,EAAA,CAAA,SAAA,CAAA1B,EAAC6H,GAAgB,CAAA,OAAQ,GAAO,GAAItD,EAAO,EAC1Ce,GACCtF,EAAC8H,GAAA,CACC,UAAS,GACT,WAAYxC,EAAa,UAAA,CAC3B,CAAA,EAEJ,EAED1E,KAAWmH,GAAoB,EAAA,EAC/BlH,GAAUb,EAACgI,GAAoB,CAAA,gBAAe,EAAC,CAAA,CAAA,CAAA,CAClD,CAEJ,EACA,CACE,MAAO,EAAE,cAAc,EACvB,SAAU,CAACpH,EACX,MAEIa,EAAAC,EAAA,CAAA,SAAA,CAAC1B,EAAAiI,GAAA,CAAkB,SAAU,EAAO,CAAA,EACnCxG,EAAAe,GAAA,CAAK,aAAY,GAAC,UAAU,aAC3B,SAAA,CAAAxC,EAACkI,GAAQ,EAAA,EACTlI,EAACmI,GAAmB,CAAA,OAAQ,EAAO,CAAA,CAAA,EACrC,IACCjG,GAA6B,EAAA,CAAA,EAChC,CAEJ,EACA,CACE,MAAO,EAAE,cAAc,EACvB,SAAU,CAACrB,EACX,MAAOb,EAACoI,GAAmB,CAAA,SAAU,EAAO,CAAA,CAC9C,EACA,CACE,MAAO,EAAE,qBAAqB,EAC9B,SAAU,CAACvH,EACX,MACEb,EAAC4H,EAAA,CACC,KAAK,4BACL,aAAY,GACZ,SAAU7C,EAAa1B,CAAI,EAE3B,WAACN,GAAoB,EAAA,CAAA,CACvB,CAEJ,EACA,CACE,MAAO,EAAE,kBAAkB,EAC3B,MACEtB,EAACmG,EAAA,CACC,KAAK,4BACL,aAAY,GACZ,SAAU7C,EAAa1B,CAAI,EAE3B,SAAA,CAACrD,EAAAW,GAAA,CAAiB,OAAAC,EAAiB,OAAAC,CAAiB,CAAA,IAEnDwH,GAAkB,CAAA,KAAK,cAAc,SAAQ,GAAC,MAAApD,EAAc,CAAA,CAAA,CAC/D,CAEJ,CAAA,EAIA,OAAAxD,EAAC6G,GAAc,CAAA,GAAGzD,EAChB,SAAA,CAAA7E,EAAC+G,GAAc,EAAA,IACdI,GAAoB,EAAA,EACrBnH,EAACG,EAAA,CACC,KAAK,UACL,QAAS0E,EAAK,QACd,aAAc,GACd,OAAQ,CAAC,CAAE,MAAA5F,CAAA,IACTe,EAACmD,GAAA,CACC,MAAOlE,EAAM,OAAS,GACtB,SAAUA,EAAM,SAChB,KAAAoE,EACA,mBAAAC,EAAA,CACF,CAAA,CAEJ,EAECtD,EAAAuI,GAAA,CAAY,QAAQ,QAAQ,UAAU,WACrC,SAAC9G,EAAA+G,GAAA,CAAa,MAAK,GAAC,gBAAiBrC,EAAM,UAAU,EACnD,SAAA,CAAAnG,EAACyI,EAAA,CACC,GAAG,WACH,MAAOzI,EAAC0I,EAAc,CAAA,SAAA,EAAE,UAAU,EAAE,EACnC,GAAGlC,GAEJ,SAAAxG,EAAC2I,GAAA,CACC,MAAO,EAAE,eAAe,EACxB,UAAU,aACV,SAAAhB,EAAA,CACF,CAAA,CACF,EACA3H,EAACyI,EAAA,CACC,GAAG,UACH,cAAY,cACZ,MAAOzI,EAAC0I,EAAc,CAAA,SAAA,EAAE,SAAS,EAAE,EAClC,GAAGjC,GAEJ,SAAAzG,EAAC4I,GAAA,CACC,WACE5I,EAAC6I,GAAA,CACC,QAAS,EAAE,WAAW,EACtB,aAAc,EAAE,uBAAuB,EACvC,kBAAmB,EAAE,WAAW,EAChC,gBAAiB,IACf9C,EACE+C,GAA4B,CAC1B,MAAAzE,EACA,MAAAE,EACA,WAAYd,EAAS,WACrB,IAAK,SAAA,CACN,CACH,CAAA,CAEJ,EAEF,OAAA4D,GAEA,aAAa,cACb,qBAAqB,kBACrB,cACG0B,GACC,CAAA,SAAA/I,EAACgJ,GAAA,CACC,GAAG,oBACH,UAAYC,GACVjJ,EAACwE,GAAA,CACE,GAAGyE,EACJ,GAAIH,GAA4B,CAC9B,MAAAzE,EACA,MAAAE,EACA,WAAYd,EAAS,WACrB,IAAK,SAAA,CACN,CAAA,CACH,EAEF,cAAY,YAEX,WAAE,WAAW,CAAA,CAAA,EAElB,EAEF,QAAS,CACP,CACE,KAAM,OACN,WAAY,OACZ,aAAeyF,KACZhF,GAAY,CAAA,GAAGgF,EAAK,SAAAzF,EAAoB,CAE7C,EACA,CACE,KAAM,WACN,WAAY,UACd,EACA,CACE,KAAM,OACN,WAAY,MACd,CACF,EACA,QAAS,CACP,CACE,MAAO,EAAE,QAAQ,EACjB,WAAa0F,GAAW,CACtBhE,EAAkBgE,CAAM,EACCjC,IAC3B,CACF,CACF,CAAA,EAjDKzE,CAkDP,CAAA,CACF,EACCmC,EAAiBrD,GAAQ,qBAAqB,GAC7CvB,EAACyI,EAAA,CACC,GAAG,cACH,cAAY,iBACZ,MAAOzI,EAAC0I,EAAc,CAAA,SAAA,EAAE,aAAa,EAAE,EACtC,GAAGhC,GAEJ,SAAC1G,EAAAoJ,GAAA,CAAe,GAAI7E,EAAO,KAAK,oBAAoB,CAAA,CACtD,CAAA,CAAA,CAEJ,CACF,CAAA,CACF,CAAA,CAAA,CAEJ"}