{"version":3,"file":"AuthenticationSection-58qp3x_M.js","sources":["../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/InputGroup/InputGroupText.js","../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/EmptyState/EmptyStatePrimary.js","../../src/authentication/BindFlowDialog.tsx","../../src/authentication/DuplicateFlowModal.tsx","../../src/authentication/RequiredActions.tsx","../../src/authentication/components/UsedBy.tsx","../../src/authentication/policies/CibaPolicy.tsx","../../src/authentication/policies/OtpPolicy.tsx","../../src/authentication/policies/PolicyRow.tsx","../../src/authentication/policies/util.ts","../../src/authentication/policies/PasswordPolicy.tsx","../../src/authentication/policies/WebauthnPolicy.tsx","../../src/authentication/policies/Policies.tsx","../../src/authentication/AuthenticationSection.tsx"],"sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/InputGroup/input-group';\nimport { css } from '@patternfly/react-styles';\nexport var InputGroupTextVariant;\n(function (InputGroupTextVariant) {\n    InputGroupTextVariant[\"default\"] = \"default\";\n    InputGroupTextVariant[\"plain\"] = \"plain\";\n})(InputGroupTextVariant || (InputGroupTextVariant = {}));\nexport const InputGroupText = (_a) => {\n    var { className = '', component = 'span', children, variant = InputGroupTextVariant.default } = _a, props = __rest(_a, [\"className\", \"component\", \"children\", \"variant\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({ className: css(styles.inputGroupText, variant === InputGroupTextVariant.plain && styles.modifiers.plain, className) }, props), children));\n};\nInputGroupText.displayName = 'InputGroupText';\n//# sourceMappingURL=InputGroupText.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nimport styles from '@patternfly/react-styles/css/components/EmptyState/empty-state';\nexport const EmptyStatePrimary = (_a) => {\n    var { children, className = '' } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.emptyStatePrimary, className) }, props), children));\n};\nEmptyStatePrimary.displayName = 'EmptyStatePrimary';\n//# sourceMappingURL=EmptyStatePrimary.js.map","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport useToggle from \"../utils/useToggle\";\nimport { REALM_FLOWS } from \"./AuthenticationSection\";\n\ntype BindingForm = {\n  bindingType: keyof RealmRepresentation;\n};\n\ntype BindFlowDialogProps = {\n  flowAlias: string;\n  onClose: () => void;\n};\n\nexport const BindFlowDialog = ({ flowAlias, onClose }: BindFlowDialogProps) => {\n  const { t } = useTranslation();\n  const { control, handleSubmit } = useForm<BindingForm>();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const [open, toggleOpen] = useToggle();\n\n  const onSubmit = async ({ bindingType }: BindingForm) => {\n    const realmRep = await adminClient.realms.findOne({ realm });\n\n    try {\n      await adminClient.realms.update(\n        { realm },\n        { ...realmRep, [bindingType]: flowAlias },\n      );\n      addAlert(t(\"updateFlowSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updateFlowError\", error);\n    }\n\n    onClose();\n  };\n\n  return (\n    <Modal\n      title={t(\"bindFlow\")}\n      variant=\"small\"\n      onClose={onClose}\n      actions={[\n        <Button key=\"confirm\" data-testid=\"save\" type=\"submit\" form=\"bind-form\">\n          {t(\"save\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n      isOpen\n    >\n      <Form id=\"bind-form\" isHorizontal onSubmit={handleSubmit(onSubmit)}>\n        <FormGroup label={t(\"chooseBindingType\")} fieldId=\"chooseBindingType\">\n          <Controller\n            name=\"bindingType\"\n            defaultValue=\"browserFlow\"\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"chooseBindingType\"\n                onToggle={toggleOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value.toString());\n                  toggleOpen();\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={open}\n                menuAppendTo=\"parent\"\n              >\n                {[...REALM_FLOWS.keys()]\n                  .filter((f) => f !== \"dockerAuthenticationFlow\")\n                  .map((key) => {\n                    const value = REALM_FLOWS.get(key);\n                    return (\n                      <SelectOption\n                        selected={key === REALM_FLOWS.get(key)}\n                        key={key}\n                        value={key}\n                      >\n                        {t(`flow.${value}`)}\n                      </SelectOption>\n                    );\n                  })}\n              </Select>\n            )}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  Modal,\n  ModalVariant,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { NameDescription } from \"./form/NameDescription\";\nimport { toFlow } from \"./routes/Flow\";\n\ntype DuplicateFlowModalProps = {\n  name: string;\n  description: string;\n  toggleDialog: () => void;\n  onComplete: () => void;\n};\n\nexport const DuplicateFlowModal = ({\n  name,\n  description,\n  toggleDialog,\n  onComplete,\n}: DuplicateFlowModalProps) => {\n  const { t } = useTranslation();\n  const form = useForm<AuthenticationFlowRepresentation>({ mode: \"onChange\" });\n  const { setValue, getValues, handleSubmit } = form;\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  useEffect(() => {\n    setValue(\"alias\", t(\"copyOf\", { name }));\n    setValue(\"description\", description);\n  }, [name, description]);\n\n  const onSubmit = async () => {\n    const form = getValues();\n    try {\n      await adminClient.authenticationManagement.copyFlow({\n        flow: name,\n        newName: form.alias!,\n      });\n      const newFlow = (\n        await adminClient.authenticationManagement.getFlows()\n      ).find((flow) => flow.alias === form.alias)!;\n\n      if (form.description !== description) {\n        newFlow.description = form.description;\n        await adminClient.authenticationManagement.updateFlow(\n          { flowId: newFlow.id! },\n          newFlow,\n        );\n      }\n      addAlert(t(\"copyFlowSuccess\"), AlertVariant.success);\n      navigate(\n        toFlow({\n          realm,\n          id: newFlow.id!,\n          usedBy: \"notInUse\",\n          builtIn: newFlow.builtIn ? \"builtIn\" : undefined,\n        }),\n      );\n    } catch (error) {\n      addError(\"copyFlowError\", error);\n    }\n    onComplete();\n  };\n\n  return (\n    <Modal\n      title={t(\"duplicateFlow\")}\n      onClose={toggleDialog}\n      variant={ModalVariant.small}\n      actions={[\n        <Button\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          type=\"submit\"\n          form=\"duplicate-flow-form\"\n        >\n          {t(\"duplicate\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={toggleDialog}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n      isOpen\n    >\n      <FormProvider {...form}>\n        <Form\n          id=\"duplicate-flow-form\"\n          onSubmit={handleSubmit(onSubmit)}\n          isHorizontal\n        >\n          <NameDescription />\n        </Form>\n      </FormProvider>\n    </Modal>\n  );\n};\n","import type RequiredActionProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderRepresentation\";\nimport type RequiredActionProviderSimpleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/requiredActionProviderSimpleRepresentation\";\nimport { AlertVariant, Switch } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { toKey } from \"../util\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { DraggableTable } from \"./components/DraggableTable\";\n\ntype DataType = RequiredActionProviderRepresentation &\n  RequiredActionProviderSimpleRepresentation;\n\ntype Row = {\n  name: string;\n  enabled: boolean;\n  defaultAction: boolean;\n  data: DataType;\n};\n\nexport const RequiredActions = () => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const [actions, setActions] = useState<Row[]>();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  useFetch(\n    async () => {\n      const [requiredActions, unregisteredRequiredActions] = await Promise.all([\n        adminClient.authenticationManagement.getRequiredActions(),\n        adminClient.authenticationManagement.getUnregisteredRequiredActions(),\n      ]);\n      return [\n        ...requiredActions.map((a) => ({\n          name: a.name!,\n          enabled: a.enabled!,\n          defaultAction: a.defaultAction!,\n          data: a,\n        })),\n        ...unregisteredRequiredActions.map((a) => ({\n          name: a.name!,\n          enabled: false,\n          defaultAction: false,\n          data: a,\n        })),\n      ];\n    },\n    (actions) => setActions(actions),\n    [key],\n  );\n\n  const isUnregisteredAction = (data: DataType): boolean => {\n    return !(\"alias\" in data);\n  };\n\n  const updateAction = async (\n    action: DataType,\n    field: \"enabled\" | \"defaultAction\",\n  ) => {\n    try {\n      if (field in action) {\n        action[field] = !action[field];\n        await adminClient.authenticationManagement.updateRequiredAction(\n          { alias: action.alias! },\n          action,\n        );\n      } else if (isUnregisteredAction(action)) {\n        await adminClient.authenticationManagement.registerRequiredAction({\n          name: action.name,\n          providerId: action.providerId,\n        });\n      }\n      refresh();\n      addAlert(t(\"updatedRequiredActionSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updatedRequiredActionError\", error);\n    }\n  };\n\n  const executeMove = async (\n    action: RequiredActionProviderRepresentation,\n    times: number,\n  ) => {\n    try {\n      const alias = action.alias!;\n      for (let index = 0; index < Math.abs(times); index++) {\n        if (times > 0) {\n          await adminClient.authenticationManagement.lowerRequiredActionPriority(\n            {\n              alias,\n            },\n          );\n        } else {\n          await adminClient.authenticationManagement.raiseRequiredActionPriority(\n            {\n              alias,\n            },\n          );\n        }\n      }\n      refresh();\n\n      addAlert(t(\"updatedRequiredActionSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updatedRequiredActionError\", error);\n    }\n  };\n\n  if (!actions) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <DraggableTable\n      keyField=\"name\"\n      onDragFinish={async (nameDragged, items) => {\n        const keys = actions.map((e) => e.name);\n        const newIndex = items.indexOf(nameDragged);\n        const oldIndex = keys.indexOf(nameDragged);\n        const dragged = actions[oldIndex].data;\n        if (!dragged.alias) return;\n\n        const times = newIndex - oldIndex;\n        executeMove(dragged, times);\n      }}\n      columns={[\n        {\n          name: \"name\",\n          displayKey: \"requiredActions\",\n        },\n        {\n          name: \"enabled\",\n          displayKey: \"enabled\",\n          cellRenderer: (row) => (\n            <Switch\n              id={`enable-${toKey(row.name)}`}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={row.enabled}\n              onChange={() => {\n                updateAction(row.data, \"enabled\");\n              }}\n              aria-label={toKey(row.name)}\n            />\n          ),\n        },\n        {\n          name: \"default\",\n          displayKey: \"setAsDefaultAction\",\n          thTooltipText: \"authDefaultActionTooltip\",\n          cellRenderer: (row) => (\n            <Switch\n              id={`default-${toKey(row.name)}`}\n              label={t(\"on\")}\n              isDisabled={!row.enabled}\n              labelOff={!row.enabled ? t(\"disabledOff\") : t(\"off\")}\n              isChecked={row.defaultAction}\n              onChange={() => {\n                updateAction(row.data, \"defaultAction\");\n              }}\n              aria-label={toKey(row.name)}\n            />\n          ),\n        },\n      ]}\n      data={actions}\n    />\n  );\n};\n","import RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  Popover,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { CheckCircleIcon } from \"@patternfly/react-icons\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { fetchUsedBy } from \"../../components/role-mapping/resource\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport useToggle from \"../../utils/useToggle\";\nimport { AuthenticationType, REALM_FLOWS } from \"../AuthenticationSection\";\n\nimport style from \"./used-by.module.css\";\n\ntype UsedByProps = {\n  authType: AuthenticationType;\n  realm: RealmRepresentation;\n};\n\nconst Label = ({ label }: { label: string }) => (\n  <>\n    <CheckCircleIcon className={style.label} /> {label}\n  </>\n);\n\ntype UsedByModalProps = {\n  id: string;\n  onClose: () => void;\n  isSpecificClient: boolean;\n};\n\nconst UsedByModal = ({ id, isSpecificClient, onClose }: UsedByModalProps) => {\n  const { t } = useTranslation();\n\n  const loader = async (\n    first?: number,\n    max?: number,\n    search?: string,\n  ): Promise<{ name: string }[]> => {\n    const result = await fetchUsedBy({\n      id,\n      type: isSpecificClient ? \"clients\" : \"idp\",\n      first: first || 0,\n      max: max || 10,\n      search,\n    });\n    return result.map((p) => ({ name: p }));\n  };\n\n  return (\n    <Modal\n      header={\n        <TextContent>\n          <Text component={TextVariants.h1}>{t(\"flowUsedBy\")}</Text>\n          <Text>\n            {t(\"flowUsedByDescription\", {\n              value: isSpecificClient ? t(\"clients\") : t(\"identiyProviders\"),\n            })}\n          </Text>\n        </TextContent>\n      }\n      variant={ModalVariant.medium}\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid=\"cancel\"\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          onClick={onClose}\n        >\n          {t(\"close\")}\n        </Button>,\n      ]}\n    >\n      <KeycloakDataTable\n        loader={loader}\n        isPaginated\n        ariaLabelKey=\"usedBy\"\n        searchPlaceholderKey=\"search\"\n        columns={[\n          {\n            name: \"name\",\n          },\n        ]}\n      />\n    </Modal>\n  );\n};\n\nexport const UsedBy = ({ authType: { id, usedBy }, realm }: UsedByProps) => {\n  const { t } = useTranslation();\n  const [open, toggle] = useToggle();\n\n  const key = Object.entries(realm).find(\n    (e) => e[1] === usedBy?.values[0],\n  )?.[0];\n\n  return (\n    <>\n      {open && (\n        <UsedByModal\n          id={id!}\n          onClose={toggle}\n          isSpecificClient={usedBy?.type === \"SPECIFIC_CLIENTS\"}\n        />\n      )}\n      {(usedBy?.type === \"SPECIFIC_PROVIDERS\" ||\n        usedBy?.type === \"SPECIFIC_CLIENTS\") &&\n        (usedBy.values.length <= 8 ? (\n          <Popover\n            key={id}\n            aria-label={t(\"usedBy\")}\n            bodyContent={\n              <div key={`usedBy-${id}-${usedBy.values}`}>\n                {t(\n                  \"appliedBy\" +\n                    (usedBy.type === \"SPECIFIC_CLIENTS\"\n                      ? \"Clients\"\n                      : \"Providers\"),\n                )}{\" \"}\n                {usedBy.values.map((used, index) => (\n                  <>\n                    <strong>{used}</strong>\n                    {index < usedBy.values.length - 1 ? \", \" : \"\"}\n                  </>\n                ))}\n              </div>\n            }\n          >\n            <Button variant=\"link\" className={style.label}>\n              <Label label={t(`used.${usedBy.type}`)} />\n            </Button>\n          </Popover>\n        ) : (\n          <Button variant=\"link\" className={style.label} onClick={toggle}>\n            <Label label={t(`used.${usedBy.type}`)} />\n          </Button>\n        ))}\n      {usedBy?.type === \"DEFAULT\" && (\n        <Label label={t(`flow.${REALM_FLOWS.get(key!)}`)} />\n      )}\n      {!usedBy?.type && t(\"used.notInUse\")}\n    </>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  FormGroup,\n  InputGroup,\n  InputGroupText,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../../util\";\n\nconst CIBA_BACKHANNEL_TOKEN_DELIVERY_MODES = [\"poll\", \"ping\"] as const;\nconst CIBA_EXPIRES_IN_MIN = 10;\nconst CIBA_EXPIRES_IN_MAX = 600;\nconst CIBA_INTERVAL_MIN = 0;\nconst CIBA_INTERVAL_MAX = 600;\n\ntype CibaPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n};\n\ntype FormFields = Omit<\n  RealmRepresentation,\n  \"clients\" | \"components\" | \"groups\"\n>;\n\nexport const CibaPolicy = ({ realm, realmUpdated }: CibaPolicyProps) => {\n  const { t } = useTranslation();\n  const {\n    control,\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors, isValid, isDirty },\n  } = useForm<FormFields>({ mode: \"onChange\" });\n  const { realm: realmName } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const [\n    backchannelTokenDeliveryModeOpen,\n    setBackchannelTokenDeliveryModeOpen,\n  ] = useState(false);\n  const [authRequestedUserHintOpen, setAuthRequestedUserHintOpen] =\n    useState(false);\n\n  const setupForm = (realm: RealmRepresentation) =>\n    convertToFormValues(realm, setValue);\n\n  useEffect(() => setupForm(realm), []);\n\n  const onSubmit = async (formValues: FormFields) => {\n    try {\n      await adminClient.realms.update(\n        { realm: realmName },\n        convertFormValuesToObject(formValues),\n      );\n\n      const updatedRealm = await adminClient.realms.findOne({\n        realm: realmName,\n      });\n\n      realmUpdated(updatedRealm!);\n      setupForm(updatedRealm!);\n      addAlert(t(\"updateCibaSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updateCibaError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <FormGroup\n          fieldId=\"cibaBackchannelTokenDeliveryMode\"\n          label={t(\"cibaBackchannelTokenDeliveryMode\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"cibaBackchannelTokenDeliveryModeHelp\")}\n              fieldLabelId=\"cibaBackchannelTokenDeliveryMode\"\n            />\n          }\n        >\n          <Controller\n            name=\"attributes.cibaBackchannelTokenDeliveryMode\"\n            defaultValue={CIBA_BACKHANNEL_TOKEN_DELIVERY_MODES[0]}\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"cibaBackchannelTokenDeliveryMode\"\n                onSelect={(_, value) => {\n                  setBackchannelTokenDeliveryModeOpen(false);\n                  field.onChange(value.toString());\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={backchannelTokenDeliveryModeOpen}\n                onToggle={(isExpanded) =>\n                  setBackchannelTokenDeliveryModeOpen(isExpanded)\n                }\n              >\n                {CIBA_BACKHANNEL_TOKEN_DELIVERY_MODES.map((value) => (\n                  <SelectOption\n                    key={value}\n                    value={value}\n                    selected={value === field.value}\n                  >\n                    {t(`cibaBackhannelTokenDeliveryModes.${value}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          fieldId=\"cibaExpiresIn\"\n          label={t(\"cibaExpiresIn\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"cibaExpiresInHelp\")}\n              fieldLabelId=\"cibaExpiresIn\"\n            />\n          }\n          validated={errors.attributes?.cibaExpiresIn ? \"error\" : \"default\"}\n          helperTextInvalid={\n            errors.attributes?.cibaExpiresIn?.message as string\n          }\n          isRequired\n        >\n          <InputGroup>\n            <KeycloakTextInput\n              id=\"cibaExpiresIn\"\n              type=\"number\"\n              min={CIBA_EXPIRES_IN_MIN}\n              max={CIBA_EXPIRES_IN_MAX}\n              {...register(\"attributes.cibaExpiresIn\", {\n                min: {\n                  value: CIBA_EXPIRES_IN_MIN,\n                  message: t(\"greaterThan\", {\n                    value: CIBA_EXPIRES_IN_MIN,\n                  }),\n                },\n                max: {\n                  value: CIBA_EXPIRES_IN_MAX,\n                  message: t(\"lessThan\", { value: CIBA_EXPIRES_IN_MAX }),\n                },\n                required: {\n                  value: true,\n                  message: t(\"required\"),\n                },\n              })}\n              validated={errors.attributes?.cibaExpiresIn ? \"error\" : \"default\"}\n            />\n            <InputGroupText variant=\"plain\">\n              {t(\"times:seconds\")}\n            </InputGroupText>\n          </InputGroup>\n        </FormGroup>\n        <FormGroup\n          fieldId=\"cibaInterval\"\n          label={t(\"cibaInterval\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"cibaIntervalHelp\")}\n              fieldLabelId=\"cibaInterval\"\n            />\n          }\n          validated={errors.attributes?.cibaInterval ? \"error\" : \"default\"}\n          helperTextInvalid={errors.attributes?.cibaInterval?.message as string}\n          isRequired\n        >\n          <InputGroup>\n            <KeycloakTextInput\n              id=\"cibaInterval\"\n              type=\"number\"\n              min={CIBA_INTERVAL_MIN}\n              max={CIBA_INTERVAL_MAX}\n              {...register(\"attributes.cibaInterval\", {\n                min: {\n                  value: CIBA_INTERVAL_MIN,\n                  message: t(\"greaterThan\", {\n                    value: CIBA_INTERVAL_MIN,\n                  }),\n                },\n                max: {\n                  value: CIBA_INTERVAL_MAX,\n                  message: t(\"lessThan\", { value: CIBA_INTERVAL_MAX }),\n                },\n                required: {\n                  value: true,\n                  message: t(\"required\"),\n                },\n              })}\n              validated={errors.attributes?.cibaInterval ? \"error\" : \"default\"}\n            />\n            <InputGroupText variant=\"plain\">\n              {t(\"times:seconds\")}\n            </InputGroupText>\n          </InputGroup>\n        </FormGroup>\n        <FormGroup\n          fieldId=\"cibaAuthRequestedUserHint\"\n          label={t(\"cibaAuthRequestedUserHint\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"cibaAuthRequestedUserHintHelp\")}\n              fieldLabelId=\"cibaAuthRequestedUserHint\"\n            />\n          }\n        >\n          <Select\n            toggleId=\"cibaAuthRequestedUserHint\"\n            selections=\"login_hint\"\n            isOpen={authRequestedUserHintOpen}\n            onToggle={(isExpanded) => setAuthRequestedUserHintOpen(isExpanded)}\n            isDisabled\n          >\n            <SelectOption value=\"login_hint\">login_hint</SelectOption>\n            <SelectOption value=\"id_token_hint\">id_token_hint</SelectOption>\n            <SelectOption value=\"login_hint_token\">\n              login_hint_token\n            </SelectOption>\n          </Select>\n        </FormGroup>\n        <ActionGroup>\n          <Button\n            data-testid=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isDisabled={!isValid || !isDirty}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button\n            data-testid=\"reload\"\n            variant={ButtonVariant.link}\n            onClick={() => setupForm({ ...realm })}\n          >\n            {t(\"reload\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Chip,\n  ChipGroup,\n  FormGroup,\n  NumberInput,\n  PageSection,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useEffect, useMemo } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useLocaleSort from \"../../utils/useLocaleSort\";\nimport useToggle from \"../../utils/useToggle\";\n\nimport \"./otp-policy.css\";\n\nconst POLICY_TYPES = [\"totp\", \"hotp\"] as const;\nconst OTP_HASH_ALGORITHMS = [\"SHA1\", \"SHA256\", \"SHA512\"] as const;\nconst NUMBER_OF_DIGITS = [6, 8] as const;\n\ntype OtpPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n};\n\ntype FormFields = Omit<\n  RealmRepresentation,\n  \"clients\" | \"components\" | \"groups\" | \"users\" | \"federatedUsers\"\n>;\n\nexport const OtpPolicy = ({ realm, realmUpdated }: OtpPolicyProps) => {\n  const { t } = useTranslation();\n  const {\n    control,\n    reset,\n    handleSubmit,\n    formState: { isValid, isDirty, errors },\n  } = useForm<FormFields>({ mode: \"onChange\", defaultValues: realm });\n  const { realm: realmName } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const localeSort = useLocaleSort();\n  const [open, toggle] = useToggle();\n\n  const otpType = useWatch({\n    name: \"otpPolicyType\",\n    control,\n    defaultValue: POLICY_TYPES[0],\n  });\n\n  const setupForm = (formValues: FormFields) => reset(formValues);\n\n  useEffect(() => setupForm(realm), []);\n\n  const supportedApplications = useMemo(() => {\n    const labels = (realm.otpSupportedApplications ?? []).map((key) =>\n      t(`otpSupportedApplications.${key}`),\n    );\n\n    return localeSort(labels, (label) => label);\n  }, [realm.otpSupportedApplications]);\n\n  const onSubmit = async (formValues: FormFields) => {\n    try {\n      await adminClient.realms.update({ realm: realmName }, formValues);\n      const updatedRealm = await adminClient.realms.findOne({\n        realm: realmName,\n      });\n      realmUpdated(updatedRealm!);\n      setupForm(updatedRealm!);\n      addAlert(t(\"updateOtpSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updateOtpError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n        className=\"keycloak__otp_policies_authentication__form\"\n      >\n        <FormGroup\n          label={t(\"otpType\")}\n          labelIcon={\n            <HelpItem helpText={t(\"otpTypeHelp\")} fieldLabelId=\"otpType\" />\n          }\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"otpPolicyType\"\n            data-testid=\"otpPolicyType\"\n            defaultValue={POLICY_TYPES[0]}\n            control={control}\n            render={({ field }) => (\n              <>\n                {POLICY_TYPES.map((type) => (\n                  <Radio\n                    key={type}\n                    id={type}\n                    data-testid={type}\n                    isChecked={field.value === type}\n                    name=\"otpPolicyType\"\n                    onChange={() => field.onChange(type)}\n                    label={t(`policyType.${type}`)}\n                    className=\"keycloak__otp_policies_authentication__policy-type\"\n                  />\n                ))}\n              </>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"otpHashAlgorithm\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"otpHashAlgorithmHelp\")}\n              fieldLabelId=\"otpHashAlgorithm\"\n            />\n          }\n          fieldId=\"otpHashAlgorithm\"\n        >\n          <Controller\n            name=\"otpPolicyAlgorithm\"\n            defaultValue={`Hmac${OTP_HASH_ALGORITHMS[0]}`}\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"otpHashAlgorithm\"\n                onToggle={toggle}\n                onSelect={(_, value) => {\n                  field.onChange(value.toString());\n                  toggle();\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={open}\n              >\n                {OTP_HASH_ALGORITHMS.map((type) => (\n                  <SelectOption\n                    key={type}\n                    selected={`Hmac${type}` === field.value}\n                    value={`Hmac${type}`}\n                  >\n                    {type}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"otpPolicyDigits\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"otpPolicyDigitsHelp\")}\n              fieldLabelId=\"otpPolicyDigits\"\n            />\n          }\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"otpPolicyDigits\"\n            data-testid=\"otpPolicyDigits\"\n            defaultValue={NUMBER_OF_DIGITS[0]}\n            control={control}\n            render={({ field }) => (\n              <>\n                {NUMBER_OF_DIGITS.map((type) => (\n                  <Radio\n                    key={type}\n                    id={`digit-${type}`}\n                    data-testid={`digit-${type}`}\n                    isChecked={field.value === type}\n                    name=\"otpPolicyDigits\"\n                    onChange={() => field.onChange(type)}\n                    label={type}\n                    className=\"keycloak__otp_policies_authentication__number-of-digits\"\n                  />\n                ))}\n              </>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"lookAround\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"lookAroundHelp\")}\n              fieldLabelId=\"lookAround\"\n            />\n          }\n          fieldId=\"lookAround\"\n        >\n          <Controller\n            name=\"otpPolicyLookAheadWindow\"\n            defaultValue={1}\n            control={control}\n            render={({ field }) => {\n              const MIN_VALUE = 0;\n              const value = field.value ?? 1;\n              const setValue = (newValue: number) =>\n                field.onChange(Math.max(newValue, MIN_VALUE));\n\n              return (\n                <NumberInput\n                  id=\"lookAround\"\n                  value={value}\n                  min={MIN_VALUE}\n                  onPlus={() => setValue(value + 1)}\n                  onMinus={() => setValue(value - 1)}\n                  onChange={(event) => {\n                    const newValue = Number(event.currentTarget.value);\n                    setValue(!isNaN(newValue) ? newValue : 0);\n                  }}\n                />\n              );\n            }}\n          />\n        </FormGroup>\n        {otpType === POLICY_TYPES[0] && (\n          <FormGroup\n            label={t(\"otpPolicyPeriod\")}\n            fieldId=\"otpPolicyPeriod\"\n            helperTextInvalid={t(\"otpPolicyPeriodErrorHint\")}\n            validated={\n              errors.otpPolicyPeriod\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n            labelIcon={\n              <HelpItem\n                helpText={t(\"otpPolicyPeriodHelp\")}\n                fieldLabelId=\"otpPolicyPeriod\"\n              />\n            }\n          >\n            <Controller\n              name=\"otpPolicyPeriod\"\n              defaultValue={30}\n              control={control}\n              rules={{ min: 1, max: 120 }}\n              render={({ field }) => {\n                const value = field.value ?? 30;\n\n                return (\n                  <TimeSelector\n                    id=\"otpPolicyPeriod\"\n                    data-testid=\"otpPolicyPeriod\"\n                    value={value}\n                    onChange={field.onChange}\n                    units={[\"second\", \"minute\"]}\n                    validated={\n                      errors.otpPolicyPeriod\n                        ? ValidatedOptions.error\n                        : ValidatedOptions.default\n                    }\n                  />\n                );\n              }}\n            />\n          </FormGroup>\n        )}\n        {otpType === POLICY_TYPES[1] && (\n          <FormGroup\n            label={t(\"initialCounter\")}\n            fieldId=\"initialCounter\"\n            helperTextInvalid={t(\"initialCounterErrorHint\")}\n            validated={\n              errors.otpPolicyInitialCounter\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n            labelIcon={\n              <HelpItem\n                helpText={t(\"initialCounterHelp\")}\n                fieldLabelId=\"initialCounter\"\n              />\n            }\n          >\n            <Controller\n              name=\"otpPolicyInitialCounter\"\n              defaultValue={30}\n              control={control}\n              rules={{ min: 1, max: 120 }}\n              render={({ field }) => {\n                const MIN_VALUE = 1;\n                const value = field.value ?? 30;\n                const setValue = (newValue: number) =>\n                  field.onChange(Math.max(newValue, MIN_VALUE));\n\n                return (\n                  <NumberInput\n                    id=\"initialCounter\"\n                    value={value}\n                    min={MIN_VALUE}\n                    onPlus={() => setValue(value + 1)}\n                    onMinus={() => setValue(value - 1)}\n                    onChange={(event) => {\n                      const newValue = Number(event.currentTarget.value);\n                      setValue(!isNaN(newValue) ? newValue : 30);\n                    }}\n                  />\n                );\n              }}\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={t(\"supportedApplications\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"supportedApplicationsHelp\")}\n              fieldLabelId=\"supportedApplications\"\n            />\n          }\n        >\n          <ChipGroup data-testid=\"supportedApplications\">\n            {supportedApplications.map((label) => (\n              <Chip key={label} isReadOnly>\n                {label}\n              </Chip>\n            ))}\n          </ChipGroup>\n        </FormGroup>\n\n        {otpType === POLICY_TYPES[0] && (\n          <FormGroup\n            label={t(\"otpPolicyCodeReusable\")}\n            fieldId=\"otpPolicyCodeReusable\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"otpPolicyCodeReusableHelp\")}\n                fieldLabelId=\"otpPolicyCodeReusable\"\n              />\n            }\n          >\n            <Controller\n              name=\"otpPolicyCodeReusable\"\n              defaultValue={true}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"otpPolicyCodeReusable\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                />\n              )}\n            />\n          </FormGroup>\n        )}\n\n        <ActionGroup>\n          <Button\n            data-testid=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isDisabled={!isValid || !isDirty}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button\n            data-testid=\"reload\"\n            variant={ButtonVariant.link}\n            onClick={() => reset({ ...realm })}\n          >\n            {t(\"reload\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type PasswordPolicyTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/passwordPolicyTypeRepresentation\";\nimport {\n  Button,\n  FormGroup,\n  NumberInput,\n  Split,\n  SplitItem,\n  Switch,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { MinusCircleIcon } from \"@patternfly/react-icons\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\nimport \"./policy-row.css\";\n\ntype PolicyRowProps = {\n  policy: PasswordPolicyTypeRepresentation;\n  onRemove: (id?: string) => void;\n};\n\nexport const PolicyRow = ({\n  policy: { id, configType, defaultValue, displayName },\n  onRemove,\n}: PolicyRowProps) => {\n  const { t } = useTranslation();\n  const {\n    control,\n    register,\n    formState: { errors },\n  } = useFormContext();\n\n  return (\n    <FormGroup\n      label={displayName}\n      fieldId={id!}\n      isRequired\n      helperTextInvalid={t(\"required\")}\n      validated={\n        errors[id!] ? ValidatedOptions.error : ValidatedOptions.default\n      }\n      labelIcon={\n        <HelpItem\n          helpText={t(`passwordPoliciesHelp.${id}`)}\n          fieldLabelId={id!}\n        />\n      }\n    >\n      <Split>\n        <SplitItem isFilled>\n          {configType && configType !== \"int\" && (\n            <KeycloakTextInput\n              id={id}\n              data-testid={id}\n              {...register(id!, { required: true })}\n              defaultValue={defaultValue}\n              validated={\n                errors[id!] ? ValidatedOptions.error : ValidatedOptions.default\n              }\n            />\n          )}\n          {configType === \"int\" && (\n            <Controller\n              name={id!}\n              defaultValue={Number.parseInt(defaultValue || \"0\")}\n              control={control}\n              render={({ field }) => {\n                const MIN_VALUE = 0;\n                const setValue = (newValue: number) =>\n                  field.onChange(Math.max(newValue, MIN_VALUE));\n                const value = Number(field.value);\n\n                return (\n                  <NumberInput\n                    id={id}\n                    value={value}\n                    min={MIN_VALUE}\n                    onPlus={() => setValue(value + 1)}\n                    onMinus={() => setValue(value - 1)}\n                    onChange={(event) => {\n                      const newValue = Number(event.currentTarget.value);\n                      setValue(!isNaN(newValue) ? newValue : 0);\n                    }}\n                    className=\"keycloak__policies_authentication__number-field\"\n                  />\n                );\n              }}\n            />\n          )}\n          {!configType && (\n            <Switch\n              id={id!}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked\n              isDisabled\n              aria-label={displayName}\n            />\n          )}\n        </SplitItem>\n        <SplitItem>\n          <Button\n            data-testid={`remove-${id}`}\n            variant=\"link\"\n            className=\"keycloak__policies_authentication__minus-icon\"\n            onClick={() => onRemove(id)}\n            aria-label={t(\"remove\")}\n          >\n            <MinusCircleIcon />\n          </Button>\n        </SplitItem>\n      </Split>\n    </FormGroup>\n  );\n};\n","import type PasswordPolicyTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/passwordPolicyTypeRepresentation\";\n\nexport type SubmittedValues = {\n  [index: string]: string;\n};\n\nconst POLICY_SEPARATOR = \" and \";\n\nexport const serializePolicy = (\n  policies: PasswordPolicyTypeRepresentation[],\n  submitted: SubmittedValues,\n) =>\n  policies\n    .map((policy) => `${policy.id}(${submitted[policy.id!]})`)\n    .join(POLICY_SEPARATOR);\n\ntype PolicyValue = PasswordPolicyTypeRepresentation & {\n  value?: string;\n};\n\nexport const parsePolicy = (\n  value: string,\n  policies: PasswordPolicyTypeRepresentation[],\n) =>\n  value\n    .split(POLICY_SEPARATOR)\n    .map(parsePolicyToken)\n    .reduce<PolicyValue[]>((result, { id, value }) => {\n      const matchingPolicy = policies.find((policy) => policy.id === id);\n\n      if (!matchingPolicy) {\n        return result;\n      }\n\n      return result.concat({ ...matchingPolicy, value });\n    }, []);\n\ntype PolicyTokenParsed = {\n  id: string;\n  value?: string;\n};\n\nfunction parsePolicyToken(token: string): PolicyTokenParsed {\n  const valueStart = token.indexOf(\"(\");\n\n  if (valueStart === -1) {\n    return { id: token.trim() };\n  }\n\n  const id = token.substring(0, valueStart).trim();\n  const valueEnd = token.lastIndexOf(\")\");\n\n  if (valueEnd === -1) {\n    return { id };\n  }\n\n  const value = token.substring(valueStart + 1, valueEnd).trim();\n\n  return { id, value };\n}\n","import type PasswordPolicyTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/passwordPolicyTypeRepresentation\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Divider,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStatePrimary,\n  PageSection,\n  Select,\n  SelectOption,\n  Title,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { PolicyRow } from \"./PolicyRow\";\nimport { SubmittedValues, parsePolicy, serializePolicy } from \"./util\";\n\ntype PolicySelectProps = {\n  onSelect: (row: PasswordPolicyTypeRepresentation) => void;\n  selectedPolicies: PasswordPolicyTypeRepresentation[];\n};\n\nconst PolicySelect = ({ onSelect, selectedPolicies }: PolicySelectProps) => {\n  const { t } = useTranslation();\n  const { passwordPolicies } = useServerInfo();\n  const [open, setOpen] = useState(false);\n\n  const policies = useMemo(\n    () =>\n      passwordPolicies?.filter(\n        (p) => selectedPolicies.find((o) => o.id === p.id) === undefined,\n      ),\n    [selectedPolicies],\n  );\n\n  return (\n    <Select\n      width={300}\n      onSelect={(_, selection) => {\n        onSelect(selection as PasswordPolicyTypeRepresentation);\n        setOpen(false);\n      }}\n      onToggle={(value) => setOpen(value)}\n      isOpen={open}\n      selections={t(\"addPolicy\")}\n      isDisabled={policies?.length === 0}\n    >\n      {policies?.map((policy) => (\n        <SelectOption key={policy.id} value={policy}>\n          {policy.displayName}\n        </SelectOption>\n      ))}\n    </Select>\n  );\n};\n\ntype PasswordPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n};\n\nexport const PasswordPolicy = ({\n  realm,\n  realmUpdated,\n}: PasswordPolicyProps) => {\n  const { t } = useTranslation();\n  const { passwordPolicies } = useServerInfo();\n\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n\n  const [rows, setRows] = useState<PasswordPolicyTypeRepresentation[]>([]);\n  const onSelect = (row: PasswordPolicyTypeRepresentation) => {\n    setRows([...rows, row]);\n    setValue(row.id!, row.defaultValue!, { shouldDirty: true });\n  };\n\n  const form = useForm<SubmittedValues>({\n    defaultValues: {},\n  });\n  const {\n    handleSubmit,\n    setValue,\n    reset,\n    formState: { isDirty },\n  } = form;\n\n  const setupForm = (realm: RealmRepresentation) => {\n    reset();\n    const values = parsePolicy(realm.passwordPolicy || \"\", passwordPolicies!);\n    values.forEach((v) => {\n      setValue(v.id!, v.value!);\n    });\n    setRows(values);\n  };\n\n  useEffect(() => setupForm(realm), []);\n\n  const save = async (values: SubmittedValues) => {\n    const updatedRealm = {\n      ...realm,\n      passwordPolicy: serializePolicy(rows, values),\n    };\n    try {\n      await adminClient.realms.update({ realm: realmName }, updatedRealm);\n      realmUpdated(updatedRealm);\n      setupForm(updatedRealm);\n      addAlert(t(\"updatePasswordPolicySuccess\"), AlertVariant.success);\n    } catch (error: any) {\n      addError(\"updatePasswordPolicyError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      {(rows.length !== 0 || realm.passwordPolicy) && (\n        <>\n          <Toolbar>\n            <ToolbarContent>\n              <ToolbarItem>\n                <PolicySelect onSelect={onSelect} selectedPolicies={rows} />\n              </ToolbarItem>\n            </ToolbarContent>\n          </Toolbar>\n          <Divider />\n          <PageSection variant=\"light\">\n            <FormProvider {...form}>\n              <FormAccess\n                className=\"keycloak__policies_authentication__form\"\n                role=\"manage-realm\"\n                isHorizontal\n                onSubmit={handleSubmit(save)}\n              >\n                {rows.map((r, index) => (\n                  <PolicyRow\n                    key={`${r.id}-${index}`}\n                    policy={r}\n                    onRemove={(id) => {\n                      setRows(rows.filter((r) => r.id !== id));\n                      setValue(r.id!, \"\", { shouldDirty: true });\n                    }}\n                  />\n                ))}\n                <ActionGroup>\n                  <Button\n                    data-testid=\"save\"\n                    variant=\"primary\"\n                    type=\"submit\"\n                    isDisabled={!isDirty}\n                  >\n                    {t(\"save\")}\n                  </Button>\n                  <Button\n                    data-testid=\"reload\"\n                    variant={ButtonVariant.link}\n                    onClick={() => setupForm(realm)}\n                  >\n                    {t(\"reload\")}\n                  </Button>\n                </ActionGroup>\n              </FormAccess>\n            </FormProvider>\n          </PageSection>\n        </>\n      )}\n      {!rows.length && !realm.passwordPolicy && (\n        <EmptyState data-testid=\"empty-state\" variant=\"large\">\n          <EmptyStateIcon icon={PlusCircleIcon} />\n          <Title headingLevel=\"h1\" size=\"lg\">\n            {t(\"noPasswordPolicies\")}\n          </Title>\n          <EmptyStateBody>{t(\"noPasswordPoliciesInstructions\")}</EmptyStateBody>\n          <EmptyStatePrimary>\n            <PolicySelect onSelect={onSelect} selectedPolicies={[]} />\n          </EmptyStatePrimary>\n        </EmptyState>\n      )}\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  FormGroup,\n  PageSection,\n  Popover,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useState } from \"react\";\nimport {\n  Controller,\n  FormProvider,\n  useForm,\n  useFormContext,\n} from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem, useHelp } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../../util\";\n\nimport \"./webauthn-policy.css\";\n\nconst SIGNATURE_ALGORITHMS = [\n  \"ES256\",\n  \"ES384\",\n  \"ES512\",\n  \"RS256\",\n  \"RS384\",\n  \"RS512\",\n  \"RS1\",\n] as const;\nconst ATTESTATION_PREFERENCE = [\n  \"not specified\",\n  \"none\",\n  \"indirect\",\n  \"direct\",\n] as const;\n\nconst AUTHENTICATOR_ATTACHMENT = [\n  \"not specified\",\n  \"platform\",\n  \"cross-platform\",\n] as const;\n\nconst RESIDENT_KEY_OPTIONS = [\"not specified\", \"Yes\", \"No\"] as const;\n\nconst USER_VERIFY = [\n  \"not specified\",\n  \"required\",\n  \"preferred\",\n  \"discouraged\",\n] as const;\n\ntype WeauthnSelectProps = {\n  name: string;\n  label: string;\n  options: readonly string[];\n  labelPrefix?: string;\n  isMultiSelect?: boolean;\n};\n\nconst WebauthnSelect = ({\n  name,\n  label,\n  options,\n  labelPrefix,\n  isMultiSelect = false,\n}: WeauthnSelectProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n\n  const [open, toggle] = useState(false);\n  return (\n    <FormGroup\n      label={t(label)}\n      labelIcon={\n        <HelpItem helpText={t(`${label}Help`)} fieldLabelId={label!} />\n      }\n      fieldId={name}\n    >\n      <Controller\n        name={name}\n        defaultValue={options[0]}\n        control={control}\n        render={({ field }) => (\n          <Select\n            toggleId={name}\n            onToggle={toggle}\n            onSelect={(_, selectedValue) => {\n              if (isMultiSelect) {\n                const changedValue = field.value.find(\n                  (item: string) => item === selectedValue,\n                )\n                  ? field.value.filter((item: string) => item !== selectedValue)\n                  : [...field.value, selectedValue];\n                field.onChange(changedValue);\n              } else {\n                field.onChange(selectedValue.toString());\n                toggle(false);\n              }\n            }}\n            selections={\n              labelPrefix ? t(`${labelPrefix}.${field.value}`) : field.value\n            }\n            variant={\n              isMultiSelect\n                ? SelectVariant.typeaheadMulti\n                : SelectVariant.single\n            }\n            aria-label={t(name)}\n            typeAheadAriaLabel={t(name)}\n            isOpen={open}\n          >\n            {options.map((option) => (\n              <SelectOption\n                selected={option === field.value}\n                key={option}\n                value={option}\n              >\n                {labelPrefix ? t(`${labelPrefix}.${option}`) : option}\n              </SelectOption>\n            ))}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n\ntype WebauthnPolicyProps = {\n  realm: RealmRepresentation;\n  realmUpdated: (realm: RealmRepresentation) => void;\n  isPasswordLess?: boolean;\n};\n\nexport const WebauthnPolicy = ({\n  realm,\n  realmUpdated,\n  isPasswordLess = false,\n}: WebauthnPolicyProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n  const { enabled } = useHelp();\n  const form = useForm({ mode: \"onChange\" });\n  const {\n    control,\n    register,\n    setValue,\n    handleSubmit,\n    formState: { isDirty, errors },\n  } = form;\n\n  const namePrefix = isPasswordLess\n    ? \"webAuthnPolicyPasswordless\"\n    : \"webAuthnPolicy\";\n\n  const setupForm = (realm: RealmRepresentation) =>\n    convertToFormValues(realm, setValue);\n\n  useEffect(() => setupForm(realm), []);\n\n  const onSubmit = async (realm: RealmRepresentation) => {\n    const submittedRealm = convertFormValuesToObject(realm);\n    try {\n      await adminClient.realms.update({ realm: realmName }, submittedRealm);\n      realmUpdated(submittedRealm);\n      setupForm(submittedRealm);\n      addAlert(t(\"webAuthnUpdateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"webAuthnUpdateError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      {enabled && (\n        <Popover bodyContent={t(`${namePrefix}FormHelp`)}>\n          <TextContent className=\"keycloak__section_intro__help\">\n            <Text>\n              <QuestionCircleIcon /> {t(\"webauthnIntro\")}\n            </Text>\n          </TextContent>\n        </Popover>\n      )}\n\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n        className=\"keycloak__webauthn_policies_authentication__form\"\n      >\n        <FormGroup\n          label={t(\"webAuthnPolicyRpEntityName\")}\n          fieldId=\"webAuthnPolicyRpEntityName\"\n          helperTextInvalid={t(\"required\")}\n          validated={errors.webAuthnPolicyRpEntityName ? \"error\" : \"default\"}\n          isRequired\n          labelIcon={\n            <HelpItem\n              helpText={t(\"webAuthnPolicyRpEntityNameHelp\")}\n              fieldLabelId=\"webAuthnPolicyRpEntityName\"\n            />\n          }\n        >\n          <KeycloakTextInput\n            id=\"webAuthnPolicyRpEntityName\"\n            data-testid=\"webAuthnPolicyRpEntityName\"\n            validated={errors.webAuthnPolicyRpEntityName ? \"error\" : \"default\"}\n            {...register(`${namePrefix}RpEntityName`, { required: true })}\n          />\n        </FormGroup>\n        <FormProvider {...form}>\n          <WebauthnSelect\n            name={`${namePrefix}SignatureAlgorithms`}\n            label=\"webAuthnPolicySignatureAlgorithms\"\n            options={SIGNATURE_ALGORITHMS}\n            isMultiSelect\n          />\n          <FormGroup\n            label={t(\"webAuthnPolicyRpId\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"webAuthnPolicyRpIdHelp\")}\n                fieldLabelId=\"webAuthnPolicyRpId\"\n              />\n            }\n            fieldId=\"webAuthnPolicyRpId\"\n          >\n            <KeycloakTextInput\n              id=\"webAuthnPolicyRpId\"\n              data-testid=\"webAuthnPolicyRpId\"\n              {...register(`${namePrefix}RpId`)}\n            />\n          </FormGroup>\n          <WebauthnSelect\n            name={`${namePrefix}AttestationConveyancePreference`}\n            label=\"webAuthnPolicyAttestationConveyancePreference\"\n            options={ATTESTATION_PREFERENCE}\n            labelPrefix=\"attestationPreference\"\n          />\n          <WebauthnSelect\n            name={`${namePrefix}AuthenticatorAttachment`}\n            label=\"webAuthnPolicyAuthenticatorAttachment\"\n            options={AUTHENTICATOR_ATTACHMENT}\n            labelPrefix=\"authenticatorAttachment\"\n          />\n          <WebauthnSelect\n            name={`${namePrefix}RequireResidentKey`}\n            label=\"webAuthnPolicyRequireResidentKey\"\n            options={RESIDENT_KEY_OPTIONS}\n            labelPrefix=\"residentKey\"\n          />\n          <WebauthnSelect\n            name={`${namePrefix}UserVerificationRequirement`}\n            label=\"webAuthnPolicyUserVerificationRequirement\"\n            options={USER_VERIFY}\n            labelPrefix=\"userVerify\"\n          />\n          <FormGroup\n            label={t(\"webAuthnPolicyCreateTimeout\")}\n            fieldId=\"webAuthnPolicyCreateTimeout\"\n            helperTextInvalid={t(\"webAuthnPolicyCreateTimeoutHint\")}\n            validated={errors.webAuthnPolicyCreateTimeout ? \"error\" : \"default\"}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"webAuthnPolicyCreateTimeoutHelp\")}\n                fieldLabelId=\"webAuthnPolicyCreateTimeout\"\n              />\n            }\n          >\n            <Controller\n              name={`${namePrefix}CreateTimeout`}\n              defaultValue={0}\n              control={control}\n              rules={{ min: 0, max: 31536 }}\n              render={({ field }) => (\n                <TimeSelector\n                  data-testid=\"webAuthnPolicyCreateTimeout\"\n                  aria-label={t(\"webAuthnPolicyCreateTimeout\")}\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"second\", \"minute\", \"hour\"]}\n                  validated={\n                    errors.webAuthnPolicyCreateTimeout ? \"error\" : \"default\"\n                  }\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"webAuthnPolicyAvoidSameAuthenticatorRegister\")}\n            fieldId=\"webAuthnPolicyAvoidSameAuthenticatorRegister\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"webAuthnPolicyAvoidSameAuthenticatorRegisterHelp\")}\n                fieldLabelId=\"webAuthnPolicyAvoidSameAuthenticatorRegister\"\n              />\n            }\n          >\n            <Controller\n              name={`${namePrefix}AvoidSameAuthenticatorRegister`}\n              defaultValue={false}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"webAuthnPolicyAvoidSameAuthenticatorRegister\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                  aria-label={t(\"webAuthnPolicyAvoidSameAuthenticatorRegister\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"webAuthnPolicyAcceptableAaguids\")}\n            fieldId=\"webAuthnPolicyAcceptableAaguids\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"webAuthnPolicyAcceptableAaguidsHelp\")}\n                fieldLabelId=\"webAuthnPolicyAcceptableAaguids\"\n              />\n            }\n          >\n            <MultiLineInput\n              name={`${namePrefix}AcceptableAaguids`}\n              aria-label={t(\"webAuthnPolicyAcceptableAaguids\")}\n              addButtonLabel=\"addAaguids\"\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"webAuthnPolicyExtraOrigins\")}\n            fieldId=\"webAuthnPolicyExtraOrigins\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"webAuthnPolicyExtraOriginsHelp\")}\n                fieldLabelId=\"webAuthnPolicyExtraOrigins\"\n              />\n            }\n          >\n            <MultiLineInput\n              name={`${namePrefix}ExtraOrigins`}\n              aria-label={t(\"webAuthnPolicyExtraOrigins\")}\n              addButtonLabel=\"addOrigins\"\n            />\n          </FormGroup>\n        </FormProvider>\n\n        <ActionGroup>\n          <Button\n            data-testid=\"save\"\n            variant=\"primary\"\n            type=\"submit\"\n            isDisabled={!isDirty}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button\n            data-testid=\"reload\"\n            variant={ButtonVariant.link}\n            onClick={() => setupForm(realm)}\n          >\n            {t(\"reload\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { CibaPolicy } from \"./CibaPolicy\";\nimport { OtpPolicy } from \"./OtpPolicy\";\nimport { PasswordPolicy } from \"./PasswordPolicy\";\nimport { WebauthnPolicy } from \"./WebauthnPolicy\";\n\nexport const Policies = () => {\n  const { t } = useTranslation();\n  const [subTab, setSubTab] = useState(1);\n  const { realm: realmName } = useRealm();\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  useFetch(\n    async () => {\n      const realm = await adminClient.realms.findOne({ realm: realmName });\n      if (!realm) {\n        throw new Error(t(\"notFound\"));\n      }\n      return realm;\n    },\n    (realm) => {\n      setRealm(realm);\n    },\n    [],\n  );\n\n  if (!realm) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <Tabs\n      activeKey={subTab}\n      onSelect={(_, key) => setSubTab(key as number)}\n      mountOnEnter\n      unmountOnExit\n    >\n      <Tab\n        id=\"passwordPolicy\"\n        eventKey={1}\n        title={<TabTitleText>{t(\"passwordPolicy\")}</TabTitleText>}\n      >\n        <PasswordPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n      <Tab\n        id=\"otpPolicy\"\n        eventKey={2}\n        title={<TabTitleText>{t(\"otpPolicy\")}</TabTitleText>}\n      >\n        <OtpPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n      <Tab\n        id=\"webauthnPolicy\"\n        eventKey={3}\n        title={<TabTitleText>{t(\"webauthnPolicy\")}</TabTitleText>}\n      >\n        <WebauthnPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n      <Tab\n        id=\"webauthnPasswordlessPolicy\"\n        eventKey={4}\n        title={<TabTitleText>{t(\"webauthnPasswordlessPolicy\")}</TabTitleText>}\n      >\n        <WebauthnPolicy realm={realm} realmUpdated={setRealm} isPasswordLess />\n      </Tab>\n      <Tab\n        data-testid=\"tab-ciba-policy\"\n        eventKey={5}\n        title={<TabTitleText>{t(\"cibaPolicy\")}</TabTitleText>}\n      >\n        <CibaPolicy realm={realm} realmUpdated={setRealm} />\n      </Tab>\n    </Tabs>\n  );\n};\n","import { fetchWithError } from \"@keycloak/keycloak-admin-client\";\nimport type AuthenticationFlowRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/authenticationFlowRepresentation\";\nimport RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Label,\n  PageSection,\n  Tab,\n  TabTitleText,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { sortBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport helpUrls from \"../help-urls\";\nimport { addTrailingSlash } from \"../util\";\nimport { getAuthorizationHeaders } from \"../utils/getAuthorizationHeaders\";\nimport { useFetch } from \"../utils/useFetch\";\nimport useLocaleSort, { mapByKey } from \"../utils/useLocaleSort\";\nimport useToggle from \"../utils/useToggle\";\nimport { BindFlowDialog } from \"./BindFlowDialog\";\nimport { DuplicateFlowModal } from \"./DuplicateFlowModal\";\nimport { RequiredActions } from \"./RequiredActions\";\nimport { UsedBy } from \"./components/UsedBy\";\nimport { Policies } from \"./policies/Policies\";\nimport { AuthenticationTab, toAuthentication } from \"./routes/Authentication\";\nimport { toCreateFlow } from \"./routes/CreateFlow\";\nimport { toFlow } from \"./routes/Flow\";\n\ntype UsedBy = \"SPECIFIC_CLIENTS\" | \"SPECIFIC_PROVIDERS\" | \"DEFAULT\";\n\nexport type AuthenticationType = AuthenticationFlowRepresentation & {\n  usedBy?: { type?: UsedBy; values: string[] };\n  realm: RealmRepresentation;\n};\n\nexport const REALM_FLOWS = new Map<string, string>([\n  [\"browserFlow\", \"browser\"],\n  [\"registrationFlow\", \"registration\"],\n  [\"directGrantFlow\", \"direct grant\"],\n  [\"resetCredentialsFlow\", \"reset credentials\"],\n  [\"clientAuthenticationFlow\", \"clients\"],\n  [\"dockerAuthenticationFlow\", \"docker auth\"],\n]);\n\nconst AliasRenderer = ({ id, alias, usedBy, builtIn }: AuthenticationType) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n\n  return (\n    <>\n      <Link\n        to={toFlow({\n          realm,\n          id: id!,\n          usedBy: usedBy?.type || \"notInUse\",\n          builtIn: builtIn ? \"builtIn\" : undefined,\n        })}\n        key={`link-${id}`}\n      >\n        {alias}\n      </Link>{\" \"}\n      {builtIn && <Label key={`label-${id}`}>{t(\"buildIn\")}</Label>}\n    </>\n  );\n};\n\nexport default function AuthenticationSection() {\n  const { t } = useTranslation();\n  const { realm: realmName } = useRealm();\n  const [key, setKey] = useState(0);\n  const refresh = () => {\n    setRealm(undefined);\n    setKey(key + 1);\n  };\n  const { addAlert, addError } = useAlerts();\n  const localeSort = useLocaleSort();\n  const [selectedFlow, setSelectedFlow] = useState<AuthenticationType>();\n  const [open, toggleOpen] = useToggle();\n  const [bindFlowOpen, toggleBindFlow] = useToggle();\n\n  const [realm, setRealm] = useState<RealmRepresentation>();\n\n  useFetch(() => adminClient.realms.findOne({ realm: realmName }), setRealm, [\n    key,\n  ]);\n\n  const loader = async () => {\n    const flowsRequest = await fetchWithError(\n      `${addTrailingSlash(\n        adminClient.baseUrl,\n      )}admin/realms/${realmName}/ui-ext/authentication-management/flows`,\n      {\n        method: \"GET\",\n        headers: getAuthorizationHeaders(await adminClient.getAccessToken()),\n      },\n    );\n    const flows = await flowsRequest.json();\n\n    if (!flows) {\n      return [];\n    }\n\n    return sortBy(\n      localeSort<AuthenticationType>(flows, mapByKey(\"alias\")),\n      (flow) => flow.usedBy?.type,\n    );\n  };\n\n  const useTab = (tab: AuthenticationTab) =>\n    useRoutableTab(toAuthentication({ realm: realmName, tab }));\n\n  const flowsTab = useTab(\"flows\");\n  const requiredActionsTab = useTab(\"required-actions\");\n  const policiesTab = useTab(\"policies\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteConfirmFlow\",\n    children: (\n      <Trans i18nKey=\"deleteConfirmFlowMessage\">\n        {\" \"}\n        <strong>{{ flow: selectedFlow ? selectedFlow.alias : \"\" }}</strong>.\n      </Trans>\n    ),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.authenticationManagement.deleteFlow({\n          flowId: selectedFlow!.id!,\n        });\n        refresh();\n        addAlert(t(\"deleteFlowSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"deleteFlowError\", error);\n      }\n    },\n  });\n\n  if (!realm) return <KeycloakSpinner />;\n\n  return (\n    <>\n      <DeleteConfirm />\n      {open && (\n        <DuplicateFlowModal\n          name={selectedFlow ? selectedFlow.alias! : \"\"}\n          description={selectedFlow?.description!}\n          toggleDialog={toggleOpen}\n          onComplete={() => {\n            refresh();\n            toggleOpen();\n          }}\n        />\n      )}\n      {bindFlowOpen && (\n        <BindFlowDialog\n          onClose={() => {\n            toggleBindFlow();\n            refresh();\n          }}\n          flowAlias={selectedFlow?.alias!}\n        />\n      )}\n      <ViewHeader\n        titleKey=\"titleAuthentication\"\n        subKey=\"authenticationExplain\"\n        helpUrl={helpUrls.authenticationUrl}\n        divider={false}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs\n          isBox\n          defaultLocation={toAuthentication({ realm: realmName, tab: \"flows\" })}\n        >\n          <Tab\n            data-testid=\"flows\"\n            title={<TabTitleText>{t(\"flows\")}</TabTitleText>}\n            {...flowsTab}\n          >\n            <KeycloakDataTable\n              key={key}\n              loader={loader}\n              ariaLabelKey=\"titleAuthentication\"\n              searchPlaceholderKey=\"searchForFlow\"\n              toolbarItem={\n                <ToolbarItem>\n                  <Button\n                    component={(props) => (\n                      <Link\n                        {...props}\n                        to={toCreateFlow({ realm: realmName })}\n                      />\n                    )}\n                  >\n                    {t(\"createFlow\")}\n                  </Button>\n                </ToolbarItem>\n              }\n              actionResolver={({ data }) => [\n                {\n                  title: t(\"duplicate\"),\n                  onClick: () => {\n                    toggleOpen();\n                    setSelectedFlow(data);\n                  },\n                },\n                ...(data.usedBy?.type !== \"DEFAULT\"\n                  ? [\n                      {\n                        title: t(\"bindFlow\"),\n                        onClick: () => {\n                          toggleBindFlow();\n                          setSelectedFlow(data);\n                        },\n                      },\n                    ]\n                  : []),\n                ...(!data.builtIn && !data.usedBy\n                  ? [\n                      {\n                        title: t(\"delete\"),\n                        onClick: () => {\n                          setSelectedFlow(data);\n                          toggleDeleteDialog();\n                        },\n                      },\n                    ]\n                  : []),\n              ]}\n              columns={[\n                {\n                  name: \"alias\",\n                  displayKey: \"flowName\",\n                  cellRenderer: (row) => <AliasRenderer {...row} />,\n                },\n                {\n                  name: \"usedBy\",\n                  displayKey: \"usedBy\",\n                  cellRenderer: (row) => (\n                    <UsedBy authType={row} realm={realm} />\n                  ),\n                },\n                {\n                  name: \"description\",\n                  displayKey: \"description\",\n                },\n              ]}\n              emptyState={\n                <ListEmptyState\n                  message={t(\"emptyEvents\")}\n                  instructions={t(\"emptyEventsInstructions\")}\n                />\n              }\n            />\n          </Tab>\n          <Tab\n            data-testid=\"requiredActions\"\n            title={<TabTitleText>{t(\"requiredActions\")}</TabTitleText>}\n            {...requiredActionsTab}\n          >\n            <RequiredActions />\n          </Tab>\n          <Tab\n            data-testid=\"policies\"\n            title={<TabTitleText>{t(\"policies\")}</TabTitleText>}\n            {...policiesTab}\n          >\n            <Policies />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["InputGroupTextVariant","InputGroupText","_a","className","component","children","variant","props","__rest","Component","React","css","styles","EmptyStatePrimary","BindFlowDialog","flowAlias","onClose","t","useTranslation","control","handleSubmit","useForm","addAlert","addError","useAlerts","realm","useRealm","open","toggleOpen","useToggle","onSubmit","bindingType","realmRep","adminClient","AlertVariant","error","jsx","Modal","Button","ButtonVariant","Form","FormGroup","Controller","field","Select","_","value","SelectVariant","REALM_FLOWS","f","key","SelectOption","DuplicateFlowModal","name","description","toggleDialog","onComplete","form","setValue","getValues","navigate","useNavigate","useEffect","newFlow","flow","toFlow","ModalVariant","FormProvider","NameDescription","RequiredActions","actions","setActions","useState","setKey","refresh","useFetch","requiredActions","unregisteredRequiredActions","a","isUnregisteredAction","data","updateAction","action","executeMove","times","alias","index","DraggableTable","nameDragged","items","keys","e","newIndex","oldIndex","dragged","row","Switch","toKey","KeycloakSpinner","Label","label","jsxs","Fragment","CheckCircleIcon","style","UsedByModal","id","isSpecificClient","loader","first","max","search","fetchUsedBy","p","TextContent","Text","TextVariants","KeycloakDataTable","UsedBy","usedBy","toggle","Popover","used","CIBA_BACKHANNEL_TOKEN_DELIVERY_MODES","CIBA_EXPIRES_IN_MIN","CIBA_EXPIRES_IN_MAX","CIBA_INTERVAL_MIN","CIBA_INTERVAL_MAX","CibaPolicy","realmUpdated","register","errors","isValid","isDirty","realmName","backchannelTokenDeliveryModeOpen","setBackchannelTokenDeliveryModeOpen","authRequestedUserHintOpen","setAuthRequestedUserHintOpen","setupForm","convertToFormValues","PageSection","FormAccess","formValues","convertFormValuesToObject","updatedRealm","HelpItem","isExpanded","InputGroup","KeycloakTextInput","ActionGroup","POLICY_TYPES","OTP_HASH_ALGORITHMS","NUMBER_OF_DIGITS","OtpPolicy","reset","localeSort","useLocaleSort","otpType","useWatch","supportedApplications","useMemo","labels","type","Radio","newValue","NumberInput","event","ValidatedOptions","TimeSelector","ChipGroup","Chip","PolicyRow","configType","defaultValue","displayName","onRemove","useFormContext","Split","SplitItem","MinusCircleIcon","POLICY_SEPARATOR","serializePolicy","policies","submitted","policy","parsePolicy","parsePolicyToken","result","matchingPolicy","token","valueStart","valueEnd","PolicySelect","onSelect","selectedPolicies","passwordPolicies","useServerInfo","setOpen","o","selection","PasswordPolicy","rows","setRows","values","v","save","Toolbar","ToolbarContent","ToolbarItem","Divider","r","EmptyState","EmptyStateIcon","PlusCircleIcon","Title","EmptyStateBody","SIGNATURE_ALGORITHMS","ATTESTATION_PREFERENCE","AUTHENTICATOR_ATTACHMENT","RESIDENT_KEY_OPTIONS","USER_VERIFY","WebauthnSelect","options","labelPrefix","isMultiSelect","selectedValue","changedValue","item","option","WebauthnPolicy","isPasswordLess","enabled","useHelp","namePrefix","submittedRealm","QuestionCircleIcon","MultiLineInput","Policies","subTab","setSubTab","setRealm","Tabs","Tab","TabTitleText","AliasRenderer","builtIn","Link","AuthenticationSection","selectedFlow","setSelectedFlow","bindFlowOpen","toggleBindFlow","flows","fetchWithError","addTrailingSlash","getAuthorizationHeaders","sortBy","mapByKey","useTab","tab","useRoutableTab","toAuthentication","flowsTab","requiredActionsTab","policiesTab","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","Trans","ViewHeader","helpUrls","RoutableTabs","toCreateFlow","ListEmptyState"],"mappings":"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","x_google_ignoreList":[0,1]}