{"version":3,"file":"SamlGeneralSettings-0TsojIjh.js","sources":["../../src/identity-providers/add/DescriptorSettings.tsx","../../src/identity-providers/add/SamlGeneralSettings.tsx"],"sourcesContent":["import IdentityProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/identityProviderRepresentation\";\nimport {\n  ExpandableSection,\n  FormGroup,\n  NumberInput,\n  Select,\n  SelectOption,\n  SelectVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { FormGroupField } from \"../component/FormGroupField\";\nimport { SwitchField } from \"../component/SwitchField\";\n\nimport \"./discovery-settings.css\";\n\ntype DescriptorSettingsProps = {\n  readOnly: boolean;\n};\n\nconst Fields = ({ readOnly }: DescriptorSettingsProps) => {\n  const { t } = useTranslation();\n\n  const {\n    register,\n    control,\n    formState: { errors },\n  } = useFormContext<IdentityProviderRepresentation>();\n  const [namedPolicyDropdownOpen, setNamedPolicyDropdownOpen] = useState(false);\n  const [principalTypeDropdownOpen, setPrincipalTypeDropdownOpen] =\n    useState(false);\n  const [signatureAlgorithmDropdownOpen, setSignatureAlgorithmDropdownOpen] =\n    useState(false);\n  const [encryptionAlgorithmDropdownOpen, setEncryptionAlgorithmDropdownOpen] =\n    useState(false);\n  const [\n    samlSignatureKeyNameDropdownOpen,\n    setSamlSignatureKeyNameDropdownOpen,\n  ] = useState(false);\n\n  const wantAuthnSigned = useWatch({\n    control,\n    name: \"config.wantAuthnRequestsSigned\",\n  });\n\n  const wantAssertionsEncrypted = useWatch({\n    control,\n    name: \"config.wantAssertionsEncrypted\",\n  });\n\n  const validateSignature = useWatch({\n    control,\n    name: \"config.validateSignature\",\n  });\n\n  const principalType = useWatch({\n    control,\n    name: \"config.principalType\",\n  });\n\n  return (\n    <div className=\"pf-c-form pf-m-horizontal\">\n      <FormGroup\n        label={t(\"serviceProviderEntityId\")}\n        fieldId=\"kc-saml-service-provider-entity-id\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"serviceProviderEntityIdHelp\")}\n            fieldLabelId=\"serviceProviderEntityId\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          data-testid=\"serviceProviderEntityId\"\n          id=\"kc-saml-service-provider-entity-id\"\n          {...register(\"config.entityId\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"identityProviderEntityId\")}\n        fieldId=\"kc-identity-provider-entity-id\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"identityProviderEntityIdHelp\")}\n            fieldLabelId=\"identityProviderEntityId\"\n          />\n        }\n      >\n        <KeycloakTextInput\n          data-testid=\"identityProviderEntityId\"\n          id=\"kc-identity-provider-entity-id\"\n          {...register(\"config.idpEntityId\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"ssoServiceUrl\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"ssoServiceUrlHelp\")}\n            fieldLabelId=\"ssoServiceUrl\"\n          />\n        }\n        fieldId=\"kc-sso-service-url\"\n        isRequired\n        validated={\n          errors.config?.singleSignOnServiceUrl\n            ? ValidatedOptions.error\n            : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"required\")}\n      >\n        <KeycloakTextInput\n          type=\"url\"\n          data-testid=\"sso-service-url\"\n          id=\"kc-sso-service-url\"\n          validated={\n            errors.config?.singleSignOnServiceUrl\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n          isReadOnly={readOnly}\n          {...register(\"config.singleSignOnServiceUrl\", { required: true })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"singleLogoutServiceUrl\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"singleLogoutServiceUrlHelp\")}\n            fieldLabelId=\"singleLogoutServiceUrl\"\n          />\n        }\n        fieldId=\"single-logout-service-url\"\n        data-testid=\"single-logout-service-url\"\n        validated={\n          errors.config?.singleLogoutServiceUrl\n            ? ValidatedOptions.error\n            : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"required\")}\n      >\n        <KeycloakTextInput\n          type=\"url\"\n          id=\"single-logout-service-url\"\n          isReadOnly={readOnly}\n          {...register(\"config.singleLogoutServiceUrl\")}\n        />\n      </FormGroup>\n      <SwitchField\n        field=\"config.backchannelSupported\"\n        label=\"backchannelLogout\"\n        data-testid=\"backchannelLogout\"\n        isReadOnly={readOnly}\n      />\n      <FormGroup\n        label={t(\"nameIdPolicyFormat\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"nameIdPolicyFormatHelp\")}\n            fieldLabelId=\"nameIdPolicyFormat\"\n          />\n        }\n        fieldId=\"kc-nameIdPolicyFormat\"\n        helperTextInvalid={t(\"required\")}\n      >\n        <Controller\n          name=\"config.nameIDPolicyFormat\"\n          defaultValue={\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\"}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"kc-nameIdPolicyFormat\"\n              onToggle={(isExpanded) => setNamedPolicyDropdownOpen(isExpanded)}\n              isOpen={namedPolicyDropdownOpen}\n              onSelect={(_, value) => {\n                field.onChange(value as string);\n                setNamedPolicyDropdownOpen(false);\n              }}\n              selections={field.value}\n              variant={SelectVariant.single}\n              isDisabled={readOnly}\n            >\n              <SelectOption\n                data-testid=\"persistent-option\"\n                value={\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\"}\n                isPlaceholder\n              >\n                {t(\"persistent\")}\n              </SelectOption>\n              <SelectOption\n                data-testid=\"transient-option\"\n                value=\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"\n              >\n                {t(\"transient\")}\n              </SelectOption>\n              <SelectOption\n                data-testid=\"email-option\"\n                value=\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"\n              >\n                {t(\"email\")}\n              </SelectOption>\n              <SelectOption\n                data-testid=\"kerberos-option\"\n                value=\"urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos\"\n              >\n                {t(\"kerberos\")}\n              </SelectOption>\n\n              <SelectOption\n                data-testid=\"x509-option\"\n                value=\"urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName\"\n              >\n                {t(\"x509\")}\n              </SelectOption>\n\n              <SelectOption\n                data-testid=\"windowsDomainQN-option\"\n                value=\"urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName\"\n              >\n                {t(\"windowsDomainQN\")}\n              </SelectOption>\n\n              <SelectOption\n                data-testid=\"unspecified-option\"\n                value={\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"}\n              >\n                {t(\"unspecified\")}\n              </SelectOption>\n            </Select>\n          )}\n        ></Controller>\n      </FormGroup>\n\n      <FormGroup\n        label={t(\"principalType\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"principalTypeHelp\")}\n            fieldLabelId=\"principalType\"\n          />\n        }\n        fieldId=\"kc-principalType\"\n        helperTextInvalid={t(\"required\")}\n      >\n        <Controller\n          name=\"config.principalType\"\n          defaultValue={t(\"subjectNameId\")}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"kc-principalType\"\n              onToggle={(isExpanded) =>\n                setPrincipalTypeDropdownOpen(isExpanded)\n              }\n              isOpen={principalTypeDropdownOpen}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setPrincipalTypeDropdownOpen(false);\n              }}\n              selections={field.value}\n              variant={SelectVariant.single}\n              isDisabled={readOnly}\n            >\n              <SelectOption\n                data-testid=\"subjectNameId-option\"\n                value=\"SUBJECT\"\n                isPlaceholder\n              >\n                {t(\"subjectNameId\")}\n              </SelectOption>\n              <SelectOption\n                data-testid=\"attributeName-option\"\n                value=\"ATTRIBUTE\"\n              >\n                {t(\"attributeName\")}\n              </SelectOption>\n              <SelectOption\n                data-testid=\"attributeFriendlyName-option\"\n                value=\"FRIENDLY_ATTRIBUTE\"\n              >\n                {t(\"attributeFriendlyName\")}\n              </SelectOption>\n            </Select>\n          )}\n        ></Controller>\n      </FormGroup>\n\n      {principalType?.includes(\"ATTRIBUTE\") && (\n        <FormGroup\n          label={t(\"principalAttribute\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"principalAttributeHelp\")}\n              fieldLabelId=\"principalAttribute\"\n            />\n          }\n          fieldId=\"principalAttribute\"\n        >\n          <KeycloakTextInput\n            id=\"principalAttribute\"\n            data-testid=\"principalAttribute\"\n            isReadOnly={readOnly}\n            {...register(\"config.principalAttribute\")}\n          />\n        </FormGroup>\n      )}\n      <SwitchField\n        field=\"config.allowCreate\"\n        label=\"allowCreate\"\n        isReadOnly={readOnly}\n      />\n\n      <SwitchField\n        field=\"config.postBindingResponse\"\n        label=\"httpPostBindingResponse\"\n        isReadOnly={readOnly}\n      />\n\n      <SwitchField\n        field=\"config.postBindingAuthnRequest\"\n        label=\"httpPostBindingAuthnRequest\"\n        isReadOnly={readOnly}\n      />\n\n      <SwitchField\n        field=\"config.postBindingLogout\"\n        label=\"httpPostBindingLogout\"\n        isReadOnly={readOnly}\n      />\n\n      <SwitchField\n        field=\"config.wantAuthnRequestsSigned\"\n        label=\"wantAuthnRequestsSigned\"\n        isReadOnly={readOnly}\n      />\n\n      {wantAuthnSigned === \"true\" && (\n        <>\n          <FormGroup\n            label={t(\"signatureAlgorithm\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"signatureAlgorithmHelp\")}\n                fieldLabelId=\"signatureAlgorithm\"\n              />\n            }\n            fieldId=\"kc-signatureAlgorithm\"\n          >\n            <Controller\n              name=\"config.signatureAlgorithm\"\n              defaultValue=\"RSA_SHA256\"\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"kc-signatureAlgorithm\"\n                  onToggle={(isExpanded) =>\n                    setSignatureAlgorithmDropdownOpen(isExpanded)\n                  }\n                  isOpen={signatureAlgorithmDropdownOpen}\n                  onSelect={(_, value) => {\n                    field.onChange(value.toString());\n                    setSignatureAlgorithmDropdownOpen(false);\n                  }}\n                  selections={field.value}\n                  variant={SelectVariant.single}\n                  isDisabled={readOnly}\n                >\n                  <SelectOption value=\"RSA_SHA1\" />\n                  <SelectOption value=\"RSA_SHA256\" isPlaceholder />\n                  <SelectOption value=\"RSA_SHA256_MGF1\" />\n                  <SelectOption value=\"RSA_SHA512\" />\n                  <SelectOption value=\"RSA_SHA512_MGF1\" />\n                  <SelectOption value=\"DSA_SHA1\" />\n                </Select>\n              )}\n            ></Controller>\n          </FormGroup>\n          <FormGroup\n            label={t(\"samlSignatureKeyName\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"samlSignatureKeyNameHelp\")}\n                fieldLabelId=\"samlSignatureKeyName\"\n              />\n            }\n            fieldId=\"kc-samlSignatureKeyName\"\n          >\n            <Controller\n              name=\"config.xmlSigKeyInfoKeyNameTransformer\"\n              defaultValue={t(\"keyID\")}\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"kc-samlSignatureKeyName\"\n                  onToggle={(isExpanded) =>\n                    setSamlSignatureKeyNameDropdownOpen(isExpanded)\n                  }\n                  isOpen={samlSignatureKeyNameDropdownOpen}\n                  onSelect={(_, value) => {\n                    field.onChange(value.toString());\n                    setSamlSignatureKeyNameDropdownOpen(false);\n                  }}\n                  selections={field.value}\n                  variant={SelectVariant.single}\n                  isDisabled={readOnly}\n                >\n                  <SelectOption value=\"NONE\" />\n                  <SelectOption value={t(\"keyID\")} isPlaceholder />\n                  <SelectOption value={t(\"certSubject\")} />\n                </Select>\n              )}\n            ></Controller>\n          </FormGroup>\n        </>\n      )}\n\n      <SwitchField\n        field=\"config.wantAssertionsSigned\"\n        label=\"wantAssertionsSigned\"\n        isReadOnly={readOnly}\n      />\n\n      <SwitchField\n        field=\"config.wantAssertionsEncrypted\"\n        label=\"wantAssertionsEncrypted\"\n        isReadOnly={readOnly}\n      />\n\n      {wantAssertionsEncrypted === \"true\" && (\n        <FormGroup\n          label={t(\"encryptionAlgorithm\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"encryptionAlgorithmHelp\")}\n              fieldLabelId=\"encryptionAlgorithm\"\n            />\n          }\n          fieldId=\"kc-encryptionAlgorithm\"\n        >\n          <Controller\n            name=\"config.encryptionAlgorithm\"\n            defaultValue=\"RSA-OAEP\"\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-encryptionAlgorithm\"\n                onToggle={(isExpanded) =>\n                  setEncryptionAlgorithmDropdownOpen(isExpanded)\n                }\n                isOpen={encryptionAlgorithmDropdownOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value.toString());\n                  setEncryptionAlgorithmDropdownOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isDisabled={readOnly}\n              >\n                <SelectOption value=\"RSA-OAEP\" />\n                <SelectOption value=\"RSA1_5\" />\n              </Select>\n            )}\n          ></Controller>\n        </FormGroup>\n      )}\n\n      <SwitchField\n        field=\"config.forceAuthn\"\n        label=\"forceAuthentication\"\n        isReadOnly={readOnly}\n      />\n\n      <SwitchField\n        field=\"config.validateSignature\"\n        label=\"validateSignature\"\n        isReadOnly={readOnly}\n      />\n      {validateSignature === \"true\" && (\n        <FormGroupField label=\"validatingX509Certs\">\n          <KeycloakTextArea\n            id=\"validatingX509Certs\"\n            data-testid=\"validatingX509Certs\"\n            isReadOnly={readOnly}\n            {...register(\"config.signingCertificate\")}\n          ></KeycloakTextArea>\n        </FormGroupField>\n      )}\n      <SwitchField\n        field=\"config.signSpMetadata\"\n        label=\"signServiceProviderMetadata\"\n        data-testid=\"signServiceProviderMetadata\"\n        isReadOnly={readOnly}\n      />\n      <SwitchField\n        field=\"config.loginHint\"\n        label=\"passSubject\"\n        data-testid=\"passSubject\"\n        isReadOnly={readOnly}\n      />\n\n      <FormGroup\n        label={t(\"allowedClockSkew\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"allowedClockSkewHelp\")}\n            fieldLabelId=\"allowedClockSkew\"\n          />\n        }\n        fieldId=\"allowedClockSkew\"\n        helperTextInvalid={t(\"required\")}\n      >\n        <Controller\n          name=\"config.allowedClockSkew\"\n          defaultValue={0}\n          control={control}\n          render={({ field }) => {\n            const v = Number(field.value);\n            return (\n              <NumberInput\n                data-testid=\"allowedClockSkew\"\n                inputName=\"allowedClockSkew\"\n                min={0}\n                max={2147483}\n                value={v}\n                readOnly\n                onPlus={() => field.onChange(v + 1)}\n                onMinus={() => field.onChange(v - 1)}\n                onChange={(event) => {\n                  const value = Number(\n                    (event.target as HTMLInputElement).value,\n                  );\n                  field.onChange(value < 0 ? 0 : value);\n                }}\n              />\n            );\n          }}\n        />\n      </FormGroup>\n\n      <FormGroup\n        label={t(\"attributeConsumingServiceIndex\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"attributeConsumingServiceIndexHelp\")}\n            fieldLabelId=\"attributeConsumingServiceIndex\"\n          />\n        }\n        fieldId=\"attributeConsumingServiceIndex\"\n        helperTextInvalid={t(\"required\")}\n      >\n        <Controller\n          name=\"config.attributeConsumingServiceIndex\"\n          defaultValue={0}\n          control={control}\n          render={({ field }) => {\n            const v = Number(field.value);\n            return (\n              <NumberInput\n                data-testid=\"attributeConsumingServiceIndex\"\n                inputName=\"attributeConsumingServiceIndex\"\n                min={0}\n                max={2147483}\n                value={v}\n                readOnly\n                onPlus={() => field.onChange(v + 1)}\n                onMinus={() => field.onChange(v - 1)}\n                onChange={(event) => {\n                  const value = Number(\n                    (event.target as HTMLInputElement).value,\n                  );\n                  field.onChange(value < 0 ? 0 : value);\n                }}\n              />\n            );\n          }}\n        />\n      </FormGroup>\n\n      <FormGroup\n        label={t(\"attributeConsumingServiceName\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"attributeConsumingServiceNameHelp\")}\n            fieldLabelId=\"attributeConsumingServiceName\"\n          />\n        }\n        fieldId=\"attributeConsumingServiceName\"\n        helperTextInvalid={t(\"required\")}\n      >\n        <KeycloakTextInput\n          id=\"attributeConsumingServiceName\"\n          data-testid=\"attributeConsumingServiceName\"\n          isReadOnly={readOnly}\n          {...register(\"config.attributeConsumingServiceName\")}\n        />\n      </FormGroup>\n    </div>\n  );\n};\n\nexport const DescriptorSettings = ({ readOnly }: DescriptorSettingsProps) => {\n  const { t } = useTranslation();\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  return readOnly ? (\n    <ExpandableSection\n      className=\"keycloak__discovery-settings__metadata\"\n      toggleText={isExpanded ? t(\"hideMetaData\") : t(\"showMetaData\")}\n      onToggle={(isOpen) => setIsExpanded(isOpen)}\n      isExpanded={isExpanded}\n    >\n      <Fields readOnly={readOnly} />\n    </ExpandableSection>\n  ) : (\n    <Fields readOnly={readOnly} />\n  );\n};\n","import { FormGroup, ValidatedOptions } from \"@patternfly/react-core\";\nimport { useWatch, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormattedLink } from \"../../components/external-link/FormattedLink\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport environment from \"../../environment\";\nimport { DisplayOrder } from \"../component/DisplayOrder\";\nimport { RedirectUrl } from \"../component/RedirectUrl\";\nimport { TextField } from \"../component/TextField\";\n\nimport \"./saml-general-settings.css\";\n\ntype SamlGeneralSettingsProps = {\n  isAliasReadonly?: boolean;\n};\n\nexport const SamlGeneralSettings = ({\n  isAliasReadonly = false,\n}: SamlGeneralSettingsProps) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n\n  const {\n    register,\n    control,\n    formState: { errors },\n  } = useFormContext();\n\n  const alias = useWatch({ control, name: \"alias\" });\n\n  return (\n    <>\n      <RedirectUrl id={alias} />\n\n      <FormGroup\n        label={t(\"alias\")}\n        labelIcon={<HelpItem helpText={t(\"aliasHelp\")} fieldLabelId=\"alias\" />}\n        fieldId=\"alias\"\n        isRequired\n        validated={\n          errors.alias ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"required\")}\n      >\n        <KeycloakTextInput\n          isRequired\n          id=\"alias\"\n          data-testid=\"alias\"\n          isReadOnly={isAliasReadonly}\n          validated={\n            errors.alias ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          {...register(\"alias\", { required: true })}\n        />\n      </FormGroup>\n\n      <TextField\n        field=\"displayName\"\n        label=\"displayName\"\n        data-testid=\"displayName\"\n      />\n      <DisplayOrder />\n      {isAliasReadonly ? (\n        <FormGroup\n          label={t(\"endpoints\")}\n          fieldId=\"endpoints\"\n          labelIcon={\n            <HelpItem helpText={t(\"aliasHelp\")} fieldLabelId=\"alias\" />\n          }\n          className=\"keycloak__identity-providers__saml_link\"\n        >\n          <FormattedLink\n            title={t(\"samlEndpointsLabel\")}\n            href={`${environment.authUrl}/realms/${realm}/broker/${alias}/endpoint/descriptor`}\n            isInline\n          />\n        </FormGroup>\n      ) : null}\n    </>\n  );\n};\n"],"names":["Fields","readOnly","t","useTranslation","register","control","errors","useFormContext","namedPolicyDropdownOpen","setNamedPolicyDropdownOpen","useState","principalTypeDropdownOpen","setPrincipalTypeDropdownOpen","signatureAlgorithmDropdownOpen","setSignatureAlgorithmDropdownOpen","encryptionAlgorithmDropdownOpen","setEncryptionAlgorithmDropdownOpen","samlSignatureKeyNameDropdownOpen","setSamlSignatureKeyNameDropdownOpen","wantAuthnSigned","useWatch","wantAssertionsEncrypted","validateSignature","principalType","jsxs","jsx","FormGroup","HelpItem","KeycloakTextInput","ValidatedOptions","SwitchField","Controller","field","Select","isExpanded","_","value","SelectVariant","SelectOption","Fragment","FormGroupField","KeycloakTextArea","v","NumberInput","event","DescriptorSettings","setIsExpanded","ExpandableSection","isOpen","SamlGeneralSettings","isAliasReadonly","realm","useRealm","alias","RedirectUrl","TextField","DisplayOrder","FormattedLink","environment"],"mappings":"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"}