{"version":3,"file":"LdapMapperDetails-p2Bz0H_3.js","sources":["../../src/user-federation/ldap/mappers/LdapMapperDetails.tsx"],"sourcesContent":["import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport type ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport { DirectionType } from \"@keycloak/keycloak-admin-client/lib/resources/userStorageProvider\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  DropdownItem,\n  Form,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../../admin-client\";\nimport { useAlerts } from \"../../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../../components/confirm-dialog/ConfirmDialog\";\nimport { DynamicComponents } from \"../../../components/dynamic/DynamicComponents\";\nimport { FormAccess } from \"../../../components/form/FormAccess\";\nimport { KeycloakSpinner } from \"../../../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeycloakTextInput } from \"../../../components/keycloak-text-input/KeycloakTextInput\";\nimport { ViewHeader } from \"../../../components/view-header/ViewHeader\";\nimport { useRealm } from \"../../../context/realm-context/RealmContext\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../../../util\";\nimport { useFetch } from \"../../../utils/useFetch\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { toUserFederationLdap } from \"../../routes/UserFederationLdap\";\nimport { UserFederationLdapMapperParams } from \"../../routes/UserFederationLdapMapper\";\n\nexport default function LdapMapperDetails() {\n  const form = useForm<ComponentRepresentation>();\n  const [mapping, setMapping] = useState<ComponentRepresentation>();\n  const [components, setComponents] = useState<ComponentTypeRepresentation[]>();\n\n  const { id, mapperId } = useParams<UserFederationLdapMapperParams>();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const [isMapperDropdownOpen, setIsMapperDropdownOpen] = useState(false);\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  useFetch(\n    async () => {\n      const components = await adminClient.components.listSubComponents({\n        id,\n        type: \"org.keycloak.storage.ldap.mappers.LDAPStorageMapper\",\n      });\n      if (mapperId && mapperId !== \"new\") {\n        const fetchedMapper = await adminClient.components.findOne({\n          id: mapperId,\n        });\n        return { components, fetchedMapper };\n      }\n      return { components };\n    },\n    ({ components, fetchedMapper }) => {\n      setMapping(fetchedMapper);\n      setComponents(components);\n      if (mapperId !== \"new\" && !fetchedMapper) throw new Error(t(\"notFound\"));\n\n      if (fetchedMapper) setupForm(fetchedMapper);\n    },\n    [],\n  );\n\n  const setupForm = (mapper: ComponentRepresentation) => {\n    convertToFormValues(mapper, form.setValue);\n  };\n\n  const save = async (mapper: ComponentRepresentation) => {\n    const component: ComponentRepresentation =\n      convertFormValuesToObject(mapper);\n    const map = {\n      ...component,\n      config: Object.entries(component.config || {}).reduce(\n        (result, [key, value]) => {\n          result[key] = Array.isArray(value) ? value : [value];\n          return result;\n        },\n        {} as Record<string, string | string[]>,\n      ),\n    };\n\n    try {\n      if (mapperId === \"new\") {\n        await adminClient.components.create(map);\n        navigate(\n          toUserFederationLdap({ realm, id: mapper.parentId!, tab: \"mappers\" }),\n        );\n      } else {\n        await adminClient.components.update({ id: mapperId }, map);\n      }\n      setupForm(map as ComponentRepresentation);\n      addAlert(\n        t(\n          mapperId === \"new\"\n            ? \"mappingCreatedSuccess\"\n            : \"mappingUpdatedSuccess\",\n        ),\n        AlertVariant.success,\n      );\n    } catch (error) {\n      addError(\n        mapperId === \"new\" ? \"mappingCreatedError\" : \"mappingUpdatedError\",\n        error,\n      );\n    }\n  };\n\n  const sync = async (direction: DirectionType) => {\n    try {\n      const result = await adminClient.userStorageProvider.mappersSync({\n        parentId: mapping?.parentId || \"\",\n        id: mapperId,\n        direction,\n      });\n      addAlert(\n        t(\"syncLDAPGroupsSuccessful\", {\n          result: result.status,\n        }),\n      );\n    } catch (error) {\n      addError(\"syncLDAPGroupsError\", error);\n    }\n    refresh();\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteMappingTitle\",\n    messageKey: \"deleteMappingConfirm\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.components.del({\n          id: mapping!.id!,\n        });\n        addAlert(t(\"mappingDeletedSuccess\"), AlertVariant.success);\n        navigate(toUserFederationLdap({ id, realm, tab: \"mappers\" }));\n      } catch (error) {\n        addError(\"mappingDeletedError\", error);\n      }\n    },\n  });\n\n  const mapperType = useWatch({\n    control: form.control,\n    name: \"providerId\",\n  });\n\n  if (!components) {\n    return <KeycloakSpinner />;\n  }\n\n  const isNew = mapperId === \"new\";\n  const mapper = components.find((c) => c.id === mapperType);\n  return (\n    <>\n      <DeleteConfirm />\n      <ViewHeader\n        key={key}\n        titleKey={mapping ? mapping.name! : t(\"createNewMapper\")}\n        dropdownItems={\n          isNew\n            ? undefined\n            : [\n                <DropdownItem key=\"delete\" onClick={toggleDeleteDialog}>\n                  {t(\"delete\")}\n                </DropdownItem>,\n                ...(mapper?.metadata.fedToKeycloakSyncSupported\n                  ? [\n                      <DropdownItem\n                        key=\"fedSync\"\n                        onClick={() => sync(\"fedToKeycloak\")}\n                      >\n                        {t(mapper.metadata.fedToKeycloakSyncMessage)}\n                      </DropdownItem>,\n                    ]\n                  : []),\n                ...(mapper?.metadata.keycloakToFedSyncSupported\n                  ? [\n                      <DropdownItem\n                        key=\"ldapSync\"\n                        onClick={() => {\n                          sync(\"keycloakToFed\");\n                        }}\n                      >\n                        {t(mapper.metadata.keycloakToFedSyncMessage)}\n                      </DropdownItem>,\n                    ]\n                  : []),\n              ]\n        }\n      />\n      <PageSection variant=\"light\" isFilled>\n        <FormAccess role=\"manage-realm\" isHorizontal>\n          {!isNew && (\n            <FormGroup label={t(\"id\")} fieldId=\"kc-ldap-mapper-id\">\n              <KeycloakTextInput\n                isDisabled\n                id=\"kc-ldap-mapper-id\"\n                data-testid=\"ldap-mapper-id\"\n                {...form.register(\"id\")}\n              />\n            </FormGroup>\n          )}\n          <FormGroup\n            label={t(\"name\")}\n            labelIcon={\n              <HelpItem helpText={t(\"nameHelp\")} fieldLabelId=\"name\" />\n            }\n            fieldId=\"kc-ldap-mapper-name\"\n            isRequired\n          >\n            <KeycloakTextInput\n              isDisabled={!isNew}\n              isRequired\n              id=\"kc-ldap-mapper-name\"\n              data-testid=\"ldap-mapper-name\"\n              validated={\n                form.formState.errors.name\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default\n              }\n              {...form.register(\"name\", { required: true })}\n            />\n            <KeycloakTextInput\n              hidden\n              defaultValue={isNew ? id : mapping ? mapping.parentId : \"\"}\n              id=\"kc-ldap-parentId\"\n              data-testid=\"ldap-mapper-parentId\"\n              {...form.register(\"parentId\")}\n            />\n            <KeycloakTextInput\n              hidden\n              defaultValue=\"org.keycloak.storage.ldap.mappers.LDAPStorageMapper\"\n              id=\"kc-ldap-provider-type\"\n              data-testid=\"ldap-mapper-provider-type\"\n              {...form.register(\"providerType\")}\n            />\n          </FormGroup>\n          {!isNew ? (\n            <FormGroup\n              label={t(\"mapperType\")}\n              labelIcon={\n                <HelpItem\n                  helpText={\n                    mapper?.helpText ? mapper.helpText : t(\"mapperTypeHelp\")\n                  }\n                  fieldLabelId=\"mapperType\"\n                />\n              }\n              fieldId=\"kc-ldap-mapper-type\"\n              isRequired\n            >\n              <KeycloakTextInput\n                isDisabled={!isNew}\n                isRequired\n                id=\"kc-ldap-mapper-type\"\n                data-testid=\"ldap-mapper-type-fld\"\n                {...form.register(\"providerId\")}\n              />\n            </FormGroup>\n          ) : (\n            <FormGroup\n              label={t(\"mapperType\")}\n              labelIcon={\n                <HelpItem\n                  helpText={\n                    mapper?.helpText ? mapper.helpText : t(\"mapperTypeHelp\")\n                  }\n                  fieldLabelId=\"mapperType\"\n                />\n              }\n              fieldId=\"kc-providerId\"\n              isRequired\n            >\n              <Controller\n                name=\"providerId\"\n                defaultValue=\"\"\n                control={form.control}\n                data-testid=\"ldap-mapper-type-select\"\n                render={({ field }) => (\n                  <Select\n                    toggleId=\"kc-providerId\"\n                    required\n                    onToggle={() =>\n                      setIsMapperDropdownOpen(!isMapperDropdownOpen)\n                    }\n                    isOpen={isMapperDropdownOpen}\n                    onSelect={(_, value) => {\n                      field.onChange(value as string);\n                      setIsMapperDropdownOpen(false);\n                    }}\n                    selections={field.value}\n                    variant={SelectVariant.typeahead}\n                  >\n                    {components.map((c) => (\n                      <SelectOption key={c.id} value={c.id} />\n                    ))}\n                  </Select>\n                )}\n              ></Controller>\n            </FormGroup>\n          )}\n          <FormProvider {...form}>\n            {!!mapperType && (\n              <DynamicComponents properties={mapper?.properties!} />\n            )}\n          </FormProvider>\n        </FormAccess>\n\n        <Form onSubmit={form.handleSubmit(() => save(form.getValues()))}>\n          <ActionGroup>\n            <Button\n              isDisabled={!form.formState.isDirty}\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"ldap-mapper-save\"\n            >\n              {t(\"save\")}\n            </Button>\n            <Button\n              variant=\"link\"\n              onClick={() =>\n                isNew\n                  ? navigate(-1)\n                  : navigate(\n                      `/${realm}/user-federation/ldap/${\n                        mapping!.parentId\n                      }/mappers`,\n                    )\n              }\n              data-testid=\"ldap-mapper-cancel\"\n            >\n              {t(\"cancel\")}\n            </Button>\n          </ActionGroup>\n        </Form>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["LdapMapperDetails","form","useForm","mapping","setMapping","useState","components","setComponents","id","mapperId","useParams","navigate","useNavigate","realm","useRealm","useTranslation","addAlert","addError","useAlerts","isMapperDropdownOpen","setIsMapperDropdownOpen","key","setKey","refresh","useFetch","adminClient","fetchedMapper","setupForm","mapper","save","component","convertFormValuesToObject","map","result","value","toUserFederationLdap","AlertVariant","error","sync","direction","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","mapperType","useWatch","KeycloakSpinner","isNew","c","jsxs","Fragment","jsx","ViewHeader","DropdownItem","PageSection","FormAccess","FormGroup","KeycloakTextInput","HelpItem","ValidatedOptions","Controller","field","Select","_","SelectVariant","SelectOption","FormProvider","DynamicComponents","Form","ActionGroup","Button"],"mappings":"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"}