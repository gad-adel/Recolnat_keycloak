{"version":3,"file":"RealmSettingsSection-2S7HK03F.js","sources":["../../../../node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/uniqWith.js","../../../../node_modules/.pnpm/@patternfly+react-table@4.113.6_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-table/dist/esm/components/Table/EditableTextCell.js","../../src/utils/useCurrentUser.ts","../../src/realm-settings/EmailTab.tsx","../../src/realm-settings/GeneralTab.tsx","../../src/realm-settings/AddMessageBundleModal.tsx","../../src/realm-settings/LocalizationTab.tsx","../../src/realm-settings/LoginTab.tsx","../../src/realm-settings/PartialExport.tsx","../../src/realm-settings/PartialImport.tsx","../../src/realm-settings/PoliciesTab.tsx","../../src/realm-settings/ProfilesTab.tsx","../../src/realm-settings/SessionsTab.tsx","../../src/realm-settings/ThemesTab.tsx","../../src/realm-settings/TokensTab.tsx","../../src/realm-settings/DefaultGroupsTab.tsx","../../src/realm-settings/UserRegistration.tsx","../../src/realm-settings/event-config/EventsTypeTable.tsx","../../src/realm-settings/event-config/AddEventTypesDialog.tsx","../../src/realm-settings/event-config/EventConfigForm.tsx","../../src/realm-settings/event-config/EventListenersForm.tsx","../../src/realm-settings/event-config/EventsTab.tsx","../../src/realm-settings/keys/KeysListTab.tsx","../../src/realm-settings/keys/key-providers/KeyProviderModal.tsx","../../src/realm-settings/keys/key-providers/KeyProvidersPicker.tsx","../../src/realm-settings/keys/KeysProvidersTab.tsx","../../src/realm-settings/keys/KeysTab.tsx","../../src/realm-settings/security-defences/HelpLinkTextInput.tsx","../../src/realm-settings/security-defences/HeadersForm.tsx","../../src/realm-settings/security-defences/Time.tsx","../../src/realm-settings/security-defences/BruteForceDetection.tsx","../../src/realm-settings/security-defences/SecurityDefenses.tsx","../../src/realm-settings/user-profile/AttributesGroupTab.tsx","../../src/realm-settings/user-profile/AttributesTab.tsx","../../src/realm-settings/user-profile/JsonEditorTab.tsx","../../src/realm-settings/user-profile/UserProfileTab.tsx","../../src/realm-settings/RealmSettingsTabs.tsx","../../src/realm-settings/RealmSettingsSection.tsx"],"sourcesContent":["import baseUniq from './_baseUniq.js';\n\n/**\n * This method is like `_.uniq` except that it accepts `comparator` which\n * is invoked to compare elements of `array`. The order of result values is\n * determined by the order they occur in the array.The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.uniqWith(objects, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n */\nfunction uniqWith(array, comparator) {\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n}\n\nexport default uniqWith;\n","import * as React from 'react';\nimport { TextInput } from '@patternfly/react-core/dist/esm/components/TextInput';\nimport inlineStyles from '@patternfly/react-styles/css/components/InlineEdit/inline-edit';\nimport formStyles from '@patternfly/react-styles/css/components/Form/form';\nimport { css } from '@patternfly/react-styles';\nexport const EditableTextCell = ({ value, rowIndex, cellIndex, props, handleTextInputChange, inputAriaLabel, isDisabled = false }) => (React.createElement(React.Fragment, null,\n    React.createElement(\"div\", { className: inlineStyles.inlineEditValue }, value),\n    React.createElement(\"div\", { className: inlineStyles.inlineEditInput },\n        React.createElement(TextInput, { isDisabled: isDisabled, value: props.editableValue !== undefined ? props.editableValue : value, validated: props.isValid !== false ? 'default' : 'error', type: \"text\", onChange: (newValue, event) => {\n                handleTextInputChange(newValue, event, rowIndex, cellIndex);\n            }, \"aria-label\": inputAriaLabel }),\n        React.createElement(\"div\", { className: css(formStyles.formHelperText, formStyles.modifiers.error), \"aria-live\": \"polite\" }, props.errorText))));\nEditableTextCell.displayName = 'EditableTextCell';\n//# sourceMappingURL=EditableTextCell.js.map","import UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { useState } from \"react\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useWhoAmI } from \"../context/whoami/WhoAmI\";\nimport { useFetch } from \"./useFetch\";\n\nexport function useCurrentUser() {\n  const { whoAmI } = useWhoAmI();\n  const [currentUser, setCurrentUser] = useState<UserRepresentation>();\n\n  const userId = whoAmI.getUserId();\n\n  useFetch(() => adminClient.users.findOne({ id: userId }), setCurrentUser, [\n    userId,\n  ]);\n\n  return currentUser;\n}\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  ActionListItem,\n  Alert,\n  AlertActionLink,\n  AlertVariant,\n  Button,\n  Checkbox,\n  FormGroup,\n  PageSection,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { FormPanel, HelpItem } from \"ui-shared\";\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { PasswordInput } from \"../components/password-input/PasswordInput\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toUser } from \"../user/routes/User\";\nimport { emailRegexPattern } from \"../util\";\nimport { useCurrentUser } from \"../utils/useCurrentUser\";\nimport useToggle from \"../utils/useToggle\";\nimport \"./realm-settings-section.css\";\n\ntype RealmSettingsEmailTabProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\ntype FormFields = Omit<RealmRepresentation, \"users\" | \"federatedUsers\">;\n\nexport const RealmSettingsEmailTab = ({\n  realm,\n  save,\n}: RealmSettingsEmailTabProps) => {\n  const { t } = useTranslation();\n  const { realm: realmName } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const currentUser = useCurrentUser();\n\n  const {\n    register,\n    control,\n    handleSubmit,\n    watch,\n    reset: resetForm,\n    getValues,\n    formState: { errors },\n  } = useForm<FormFields>({ defaultValues: realm });\n\n  const reset = () => resetForm(realm);\n  const watchFromValue = watch(\"smtpServer.from\", \"\");\n  const watchHostValue = watch(\"smtpServer.host\", \"\");\n  const [isTesting, toggleTest] = useToggle();\n\n  const authenticationEnabled = useWatch({\n    control,\n    name: \"smtpServer.auth\",\n    defaultValue: \"\",\n  });\n\n  const testConnection = async () => {\n    const toNumber = (value: string) => Number(value);\n    const toBoolean = (value: string) => value === true.toString();\n    const valueMapper = new Map<string, (value: string) => unknown>([\n      [\"port\", toNumber],\n      [\"ssl\", toBoolean],\n      [\"starttls\", toBoolean],\n      [\"auth\", toBoolean],\n    ]);\n\n    const serverSettings = { ...getValues()[\"smtpServer\"] };\n\n    for (const [key, mapperFn] of valueMapper.entries()) {\n      serverSettings[key] = mapperFn(serverSettings[key]);\n    }\n\n    // For default value, back end is expecting null instead of 0\n    if (serverSettings.port === 0) serverSettings.port = null;\n\n    try {\n      toggleTest();\n      await adminClient.realms.testSMTPConnection(\n        { realm: realm.realm! },\n        serverSettings,\n      );\n      addAlert(t(\"testConnectionSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"testConnectionError\", error);\n    }\n    toggleTest();\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormPanel title={t(\"template\")} className=\"kc-email-template\">\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"from\")}\n            fieldId=\"kc-display-name\"\n            isRequired\n            validated={errors.smtpServer?.from ? \"error\" : \"default\"}\n            helperTextInvalid={t(\"emailInvalid\")}\n          >\n            <KeycloakTextInput\n              type=\"email\"\n              id=\"kc-sender-email-address\"\n              data-testid=\"sender-email-address\"\n              placeholder=\"Sender email address\"\n              validated={errors.smtpServer?.from ? \"error\" : \"default\"}\n              {...register(\"smtpServer.from\", {\n                pattern: emailRegexPattern,\n                required: true,\n              })}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"fromDisplayName\")}\n            fieldId=\"kc-from-display-name\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"fromDisplayNameHelp\")}\n                fieldLabelId=\"authentication\"\n              />\n            }\n          >\n            <KeycloakTextInput\n              id=\"kc-from-display-name\"\n              data-testid=\"from-display-name\"\n              placeholder=\"Display name for Sender email address\"\n              {...register(\"smtpServer.fromDisplayName\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"replyTo\")}\n            fieldId=\"kc-reply-to\"\n            validated={errors.smtpServer?.replyTo ? \"error\" : \"default\"}\n            helperTextInvalid={t(\"emailInvalid\")}\n          >\n            <KeycloakTextInput\n              type=\"email\"\n              id=\"kc-reply-to\"\n              placeholder=\"Reply to email address\"\n              validated={errors.smtpServer?.replyTo ? \"error\" : \"default\"}\n              {...register(\"smtpServer.replyTo\", {\n                pattern: emailRegexPattern,\n              })}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"replyToDisplayName\")}\n            fieldId=\"kc-reply-to-display-name\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"replyToDisplayNameHelp\")}\n                fieldLabelId=\"replyToDisplayName\"\n              />\n            }\n          >\n            <KeycloakTextInput\n              id=\"kc-reply-to-display-name\"\n              placeholder='Display name for \"reply to\" email address'\n              {...register(\"smtpServer.replyToDisplayName\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"envelopeFrom\")}\n            fieldId=\"kc-envelope-from\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"envelopeFromHelp\")}\n                fieldLabelId=\"envelopeFrom\"\n              />\n            }\n          >\n            <KeycloakTextInput\n              id=\"kc-envelope-from\"\n              placeholder=\"Sender envelope email address\"\n              {...register(\"smtpServer.envelopeFrom\")}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        className=\"kc-email-connection\"\n        title={t(\"connectionAndAuthentication\")}\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"host\")}\n            fieldId=\"kc-host\"\n            isRequired\n            validated={errors.smtpServer?.host ? \"error\" : \"default\"}\n            helperTextInvalid={t(\"required\")}\n          >\n            <KeycloakTextInput\n              id=\"kc-host\"\n              placeholder=\"SMTP host\"\n              validated={errors.smtpServer?.host ? \"error\" : \"default\"}\n              {...register(\"smtpServer.host\", { required: true })}\n            />\n          </FormGroup>\n          <FormGroup label={t(\"port\")} fieldId=\"kc-port\">\n            <KeycloakTextInput\n              id=\"kc-port\"\n              placeholder=\"SMTP port (defaults to 25)\"\n              {...register(\"smtpServer.port\")}\n            />\n          </FormGroup>\n          <FormGroup label={t(\"encryption\")} fieldId=\"kc-html-display-name\">\n            <Controller\n              name=\"smtpServer.ssl\"\n              control={control}\n              defaultValue=\"false\"\n              render={({ field }) => (\n                <Checkbox\n                  id=\"kc-enable-ssl\"\n                  data-testid=\"enable-ssl\"\n                  label={t(\"enableSSL\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(\"\" + value)}\n                />\n              )}\n            />\n            <Controller\n              name=\"smtpServer.starttls\"\n              control={control}\n              defaultValue=\"false\"\n              render={({ field }) => (\n                <Checkbox\n                  id=\"kc-enable-start-tls\"\n                  data-testid=\"enable-start-tls\"\n                  label={t(\"enableStartTLS\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(\"\" + value)}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"authentication\")}\n            fieldId=\"kc-authentication\"\n          >\n            <Controller\n              name=\"smtpServer.auth\"\n              control={control}\n              defaultValue=\"\"\n              render={({ field }) => (\n                <Switch\n                  id=\"kc-authentication-switch\"\n                  data-testid=\"email-authentication-switch\"\n                  label={t(\"enabled\")}\n                  labelOff={t(\"disabled\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => {\n                    field.onChange(\"\" + value);\n                  }}\n                  aria-label={t(\"authentication\")}\n                />\n              )}\n            />\n          </FormGroup>\n          {authenticationEnabled === \"true\" && (\n            <>\n              <FormGroup\n                label={t(\"username\")}\n                fieldId=\"kc-username\"\n                isRequired\n                validated={errors.smtpServer?.user ? \"error\" : \"default\"}\n                helperTextInvalid={t(\"required\")}\n              >\n                <KeycloakTextInput\n                  id=\"kc-username\"\n                  data-testid=\"username-input\"\n                  placeholder=\"Login username\"\n                  validated={errors.smtpServer?.user ? \"error\" : \"default\"}\n                  {...register(\"smtpServer.user\", { required: true })}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"password\")}\n                fieldId=\"kc-username\"\n                isRequired\n                validated={errors.smtpServer?.password ? \"error\" : \"default\"}\n                helperTextInvalid={t(\"required\")}\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"passwordHelp\")}\n                    fieldLabelId=\"password\"\n                  />\n                }\n              >\n                <PasswordInput\n                  id=\"kc-password\"\n                  data-testid=\"password-input\"\n                  aria-label={t(\"password\")}\n                  validated={errors.smtpServer?.password ? \"error\" : \"default\"}\n                  {...register(\"smtpServer.password\", { required: true })}\n                />\n              </FormGroup>\n            </>\n          )}\n          {currentUser && (\n            <FormGroup id=\"descriptionTestConnection\">\n              {currentUser.email ? (\n                <Alert\n                  variant=\"info\"\n                  isInline\n                  title={t(\"testConnectionHint.withEmail\", {\n                    email: currentUser.email,\n                  })}\n                />\n              ) : (\n                <Alert\n                  variant=\"warning\"\n                  component=\"h2\"\n                  isInline\n                  title={t(\"testConnectionHint.withoutEmail\", {\n                    userName: currentUser.username,\n                  })}\n                  actionLinks={\n                    <AlertActionLink\n                      component={(props) => (\n                        <Link\n                          {...props}\n                          to={toUser({\n                            realm: realmName,\n                            id: currentUser.id!,\n                            tab: \"settings\",\n                          })}\n                        />\n                      )}\n                    >\n                      {t(\"testConnectionHint.withoutEmailAction\")}\n                    </AlertActionLink>\n                  }\n                />\n              )}\n            </FormGroup>\n          )}\n          <ActionGroup>\n            <ActionListItem>\n              <Button\n                variant=\"primary\"\n                type=\"submit\"\n                data-testid=\"email-tab-save\"\n              >\n                {t(\"save\")}\n              </Button>\n            </ActionListItem>\n            <ActionListItem>\n              <Button\n                variant=\"secondary\"\n                onClick={() => testConnection()}\n                data-testid=\"test-connection-button\"\n                isDisabled={\n                  !(emailRegexPattern.test(watchFromValue) && watchHostValue) ||\n                  !currentUser?.email\n                }\n                aria-describedby=\"descriptionTestConnection\"\n                isLoading={isTesting}\n                spinnerAriaValueText={t(\"testingConnection\")}\n              >\n                {t(\"testConnection\")}\n              </Button>\n            </ActionListItem>\n            <ActionListItem>\n              <Button\n                variant=\"link\"\n                onClick={reset}\n                data-testid=\"email-tab-revert\"\n              >\n                {t(\"revert\")}\n              </Button>\n            </ActionListItem>\n          </ActionGroup>\n        </FormAccess>\n      </FormPanel>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  ClipboardCopy,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Stack,\n  StackItem,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../admin-client\";\nimport { FormattedLink } from \"../components/external-link/FormattedLink\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { KeyValueInput } from \"../components/key-value-form/KeyValueInput\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport {\n  addTrailingSlash,\n  convertAttributeNameToForm,\n  convertToFormValues,\n} from \"../util\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\n\ntype RealmSettingsGeneralTabProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\ntype FormFields = Omit<RealmRepresentation, \"groups\">;\n\nexport const RealmSettingsGeneralTab = ({\n  realm,\n  save,\n}: RealmSettingsGeneralTabProps) => {\n  const { t } = useTranslation();\n  const { realm: realmName } = useRealm();\n  const form = useForm<FormFields>();\n  const {\n    register,\n    control,\n    handleSubmit,\n    setValue,\n    formState: { isDirty, errors },\n  } = form;\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const [open, setOpen] = useState(false);\n\n  const requireSslTypes = [\"all\", \"external\", \"none\"];\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n    if (realm.attributes?.[\"acr.loa.map\"]) {\n      const result = Object.entries(\n        JSON.parse(realm.attributes[\"acr.loa.map\"]),\n      ).flatMap(([key, value]) => ({ key, value }));\n      result.concat({ key: \"\", value: \"\" });\n      setValue(\n        convertAttributeNameToForm(\"attributes.acr.loa.map\") as any,\n        result,\n      );\n    }\n  };\n\n  useEffect(setupForm, []);\n\n  return (\n    <PageSection variant=\"light\">\n      <FormAccess\n        isHorizontal\n        role=\"manage-realm\"\n        className=\"pf-u-mt-lg\"\n        onSubmit={handleSubmit(save)}\n      >\n        <FormGroup\n          label={t(\"realmId\")}\n          fieldId=\"kc-realm-id\"\n          isRequired\n          validated={errors.realm ? \"error\" : \"default\"}\n          helperTextInvalid={errors.realm?.message}\n        >\n          <Controller\n            name=\"realm\"\n            control={control}\n            rules={{\n              required: { value: true, message: t(\"required\") },\n              pattern: {\n                value: /^[a-zA-Z0-9-_]+$/,\n                message: t(\"invalidRealmName\"),\n              },\n            }}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <ClipboardCopy data-testid=\"realmName\" onChange={field.onChange}>\n                {field.value}\n              </ClipboardCopy>\n            )}\n          />\n        </FormGroup>\n        <FormGroup label={t(\"displayName\")} fieldId=\"kc-display-name\">\n          <KeycloakTextInput\n            id=\"kc-display-name\"\n            {...register(\"displayName\")}\n          />\n        </FormGroup>\n        <FormGroup label={t(\"htmlDisplayName\")} fieldId=\"kc-html-display-name\">\n          <KeycloakTextInput\n            id=\"kc-html-display-name\"\n            {...register(\"displayNameHtml\")}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"frontendUrl\")}\n          fieldId=\"kc-frontend-url\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"frontendUrlHelp\")}\n              fieldLabelId=\"frontendUrl\"\n            />\n          }\n        >\n          <KeycloakTextInput\n            type=\"url\"\n            id=\"kc-frontend-url\"\n            {...register(convertAttributeNameToForm(\"attributes.frontendUrl\"))}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"requireSsl\")}\n          fieldId=\"kc-require-ssl\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"requireSslHelp\")}\n              fieldLabelId=\"requireSsl\"\n            />\n          }\n        >\n          <Controller\n            name=\"sslRequired\"\n            defaultValue=\"none\"\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-require-ssl\"\n                onToggle={() => setOpen(!open)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                aria-label={t(\"requireSsl\")}\n                isOpen={open}\n              >\n                {requireSslTypes.map((sslType) => (\n                  <SelectOption\n                    selected={sslType === field.value}\n                    key={sslType}\n                    value={sslType}\n                  >\n                    {t(`sslType.${sslType}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"acrToLoAMapping\")}\n          fieldId=\"acrToLoAMapping\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"acrToLoAMappingHelp\")}\n              fieldLabelId=\"acrToLoAMapping\"\n            />\n          }\n        >\n          <FormProvider {...form}>\n            <KeyValueInput\n              name={convertAttributeNameToForm(\"attributes.acr.loa.map\")}\n            />\n          </FormProvider>\n        </FormGroup>\n        <FormGroup\n          hasNoPaddingTop\n          label={t(\"userManagedAccess\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"userManagedAccessHelp\")}\n              fieldLabelId=\"userManagedAccess\"\n            />\n          }\n          fieldId=\"kc-user-managed-access\"\n        >\n          <Controller\n            name=\"userManagedAccessAllowed\"\n            control={control}\n            defaultValue={false}\n            render={({ field }) => (\n              <Switch\n                id=\"kc-user-managed-access\"\n                data-testid=\"user-managed-access-switch\"\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                isChecked={field.value}\n                onChange={field.onChange}\n                aria-label={t(\"userManagedAccess\")}\n              />\n            )}\n          />\n        </FormGroup>\n        {isFeatureEnabled(Feature.DeclarativeUserProfile) && (\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"userProfileEnabled\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"userProfileEnabledHelp\")}\n                fieldLabelId=\"userProfileEnabled\"\n              />\n            }\n            fieldId=\"kc-user-profile-enabled\"\n          >\n            <Controller\n              name={\n                convertAttributeNameToForm(\n                  \"attributes.userProfileEnabled\",\n                ) as any\n              }\n              control={control}\n              defaultValue=\"false\"\n              render={({ field }) => (\n                <Switch\n                  id=\"kc-user-profile-enabled\"\n                  data-testid=\"user-profile-enabled-switch\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(value.toString())}\n                  aria-label={t(\"userProfileEnabled\")}\n                />\n              )}\n            />\n          </FormGroup>\n        )}\n        <FormGroup\n          label={t(\"endpoints\")}\n          labelIcon={\n            <HelpItem helpText={t(\"endpointsHelp\")} fieldLabelId=\"endpoints\" />\n          }\n          fieldId=\"kc-endpoints\"\n        >\n          <Stack>\n            <StackItem>\n              <FormattedLink\n                href={`${addTrailingSlash(\n                  adminClient.baseUrl,\n                )}realms/${realmName}/.well-known/openid-configuration`}\n                title={t(\"openIDEndpointConfiguration\")}\n              />\n            </StackItem>\n            <StackItem>\n              <FormattedLink\n                href={`${addTrailingSlash(\n                  adminClient.baseUrl,\n                )}realms/${realmName}/protocol/saml/descriptor`}\n                title={t(\"samlIdentityProviderMetadata\")}\n              />\n            </StackItem>\n          </Stack>\n        </FormGroup>\n\n        <ActionGroup>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"general-tab-save\"\n            isDisabled={!isDirty}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button\n            data-testid=\"general-tab-revert\"\n            variant=\"link\"\n            onClick={setupForm}\n          >\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { SubmitHandler, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type { KeyValueType } from \"../components/key-value-form/key-value-convert\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\n\ntype AddMessageBundleModalProps = {\n  id?: string;\n  form: UseFormReturn<BundleForm>;\n  save: SubmitHandler<BundleForm>;\n  handleModalToggle: () => void;\n};\n\nexport type BundleForm = {\n  key: string;\n  value: string;\n  messageBundle: KeyValueType;\n};\n\nexport const AddMessageBundleModal = ({\n  handleModalToggle,\n  save,\n  form: {\n    register,\n    handleSubmit,\n    formState: { errors },\n  },\n}: AddMessageBundleModalProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"addMessageBundle\")}\n      isOpen\n      onClose={handleModalToggle}\n      actions={[\n        <Button\n          data-testid=\"add-bundle-confirm-button\"\n          key=\"confirm\"\n          variant=\"primary\"\n          type=\"submit\"\n          form=\"bundle-form\"\n        >\n          {t(\"create\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            handleModalToggle();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form id=\"bundle-form\" isHorizontal onSubmit={handleSubmit(save)}>\n        <FormGroup\n          label={t(\"key\")}\n          name=\"key\"\n          fieldId=\"key-id\"\n          helperTextInvalid={t(\"required\")}\n          validated={\n            errors.key ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          isRequired\n        >\n          <KeycloakTextInput\n            data-testid=\"key-input\"\n            autoFocus\n            id=\"key-id\"\n            validated={\n              errors.key ? ValidatedOptions.error : ValidatedOptions.default\n            }\n            {...register(\"key\", { required: true })}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"value\")}\n          name=\"add-value\"\n          fieldId=\"value-id\"\n          helperTextInvalid={t(\"required\")}\n          validated={\n            errors.value ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          isRequired\n        >\n          <KeycloakTextInput\n            data-testid=\"value-input\"\n            id=\"value-id\"\n            validated={\n              errors.value ? ValidatedOptions.error : ValidatedOptions.default\n            }\n            {...register(\"value\", { required: true })}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Divider,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectGroup,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  TextContent,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport {\n  EditableTextCell,\n  IEditableTextCell,\n  IRow,\n  IRowCell,\n  RowEditType,\n  RowErrors,\n  Table,\n  TableBody,\n  TableHeader,\n  TableVariant,\n  applyCellEdits,\n  cancelCellEdits,\n  validateCellEdits,\n} from \"@patternfly/react-table\";\nimport { cloneDeep, isEqual, uniqWith } from \"lodash-es\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormPanel, HelpItem } from \"ui-shared\";\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport type { KeyValueType } from \"../components/key-value-form/key-value-convert\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport { PaginatingTableToolbar } from \"../components/table-toolbar/PaginatingTableToolbar\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useWhoAmI } from \"../context/whoami/WhoAmI\";\nimport { DEFAULT_LOCALE } from \"../i18n/i18n\";\nimport { convertToFormValues } from \"../util\";\nimport { useFetch } from \"../utils/useFetch\";\nimport useLocaleSort, { mapByKey } from \"../utils/useLocaleSort\";\nimport { AddMessageBundleModal } from \"./AddMessageBundleModal\";\n\ntype LocalizationTabProps = {\n  save: (realm: RealmRepresentation) => void;\n  refresh: () => void;\n  realm: RealmRepresentation;\n};\n\ntype LocaleSpecificEntry = {\n  key: string;\n  value: string;\n};\n\nexport enum RowEditAction {\n  Save = \"save\",\n  Cancel = \"cancel\",\n  Edit = \"edit\",\n  Delete = \"delete\",\n}\n\nexport type BundleForm = {\n  key: string;\n  value: string;\n  messageBundle: KeyValueType;\n};\n\nconst localeToDisplayName = (locale: string) => {\n  try {\n    return new Intl.DisplayNames([locale], { type: \"language\" }).of(locale);\n  } catch (error) {\n    return locale;\n  }\n};\n\nexport const LocalizationTab = ({ save, realm }: LocalizationTabProps) => {\n  const { t } = useTranslation();\n  const [addMessageBundleModalOpen, setAddMessageBundleModalOpen] =\n    useState(false);\n\n  const [supportedLocalesOpen, setSupportedLocalesOpen] = useState(false);\n  const [defaultLocaleOpen, setDefaultLocaleOpen] = useState(false);\n  const [filterDropdownOpen, setFilterDropdownOpen] = useState(false);\n  const [selectMenuLocale, setSelectMenuLocale] = useState(DEFAULT_LOCALE);\n\n  const { setValue, getValues, control, handleSubmit, formState } = useForm();\n  const [selectMenuValueSelected, setSelectMenuValueSelected] = useState(false);\n  const [messageBundles, setMessageBundles] = useState<LocaleSpecificEntry[]>(\n    [],\n  );\n  const [tableRows, setTableRows] = useState<IRow[]>([]);\n\n  const themeTypes = useServerInfo().themes!;\n  const allLocales = useMemo(() => {\n    const locales = Object.values(themeTypes).flatMap((theme) =>\n      theme.flatMap(({ locales }) => (locales ? locales : [])),\n    );\n    return Array.from(new Set(locales));\n  }, [themeTypes]);\n  const bundleForm = useForm<BundleForm>({ mode: \"onChange\" });\n  const { addAlert, addError } = useAlerts();\n  const { realm: currentRealm } = useRealm();\n  const { whoAmI } = useWhoAmI();\n  const localeSort = useLocaleSort();\n\n  const defaultSupportedLocales = realm.supportedLocales?.length\n    ? realm.supportedLocales\n    : [DEFAULT_LOCALE];\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n    setValue(\"supportedLocales\", defaultSupportedLocales);\n  };\n\n  useEffect(setupForm, []);\n\n  const watchSupportedLocales: string[] = useWatch({\n    control,\n    name: \"supportedLocales\",\n    defaultValue: defaultSupportedLocales,\n  });\n  const internationalizationEnabled = useWatch({\n    control,\n    name: \"internationalizationEnabled\",\n    defaultValue: realm.internationalizationEnabled,\n  });\n\n  const [tableKey, setTableKey] = useState(0);\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [filter, setFilter] = useState(\"\");\n\n  const refreshTable = () => {\n    setTableKey(tableKey + 1);\n  };\n\n  useFetch(\n    async () => {\n      let result = await adminClient.realms\n        .getRealmLocalizationTexts({\n          first,\n          max,\n          realm: realm.realm!,\n          selectedLocale:\n            selectMenuLocale ||\n            getValues(\"defaultLocale\") ||\n            whoAmI.getLocale(),\n        })\n        // prevents server error in dev mode due to snowpack\n        .catch(() => []);\n\n      const searchInBundles = (idx: number) => {\n        return Object.entries(result).filter((i) => i[idx].includes(filter));\n      };\n\n      if (filter) {\n        const filtered = uniqWith(\n          searchInBundles(0).concat(searchInBundles(1)),\n          isEqual,\n        );\n\n        result = Object.fromEntries(filtered);\n      }\n\n      return { result };\n    },\n    ({ result }) => {\n      const bundles = localeSort(\n        Object.entries(result).map<LocaleSpecificEntry>(([key, value]) => ({\n          key,\n          value,\n        })),\n        mapByKey(\"key\"),\n      ).slice(first, first + max + 1);\n\n      setMessageBundles(bundles);\n\n      const updatedRows = bundles.map<IRow>((messageBundle) => ({\n        rowEditBtnAriaLabel: () =>\n          t(\"rowEditBtnAriaLabel\", {\n            messageBundle: messageBundle.value,\n          }),\n        rowSaveBtnAriaLabel: () =>\n          t(\"rowSaveBtnAriaLabel\", {\n            messageBundle: messageBundle.value,\n          }),\n        rowCancelBtnAriaLabel: () =>\n          t(\"rowCancelBtnAriaLabel\", {\n            messageBundle: messageBundle.value,\n          }),\n        cells: [\n          {\n            title: (value, rowIndex, cellIndex, props) => (\n              <EditableTextCell\n                value={value!}\n                rowIndex={rowIndex!}\n                cellIndex={cellIndex!}\n                props={props}\n                isDisabled\n                handleTextInputChange={handleTextInputChange}\n                inputAriaLabel={messageBundle.key}\n              />\n            ),\n            props: {\n              value: messageBundle.key,\n            },\n          },\n          {\n            title: (value, rowIndex, cellIndex, props) => (\n              <EditableTextCell\n                value={value!}\n                rowIndex={rowIndex!}\n                cellIndex={cellIndex!}\n                props={props}\n                handleTextInputChange={handleTextInputChange}\n                inputAriaLabel={messageBundle.value}\n              />\n            ),\n            props: {\n              value: messageBundle.value,\n            },\n          },\n        ],\n      }));\n      setTableRows(updatedRows);\n\n      return bundles;\n    },\n    [tableKey, filter, first, max],\n  );\n\n  const handleTextInputChange = (\n    newValue: string,\n    evt: any,\n    rowIndex: number,\n    cellIndex: number,\n  ) => {\n    setTableRows((prev) => {\n      const newRows = cloneDeep(prev);\n      const textCell = newRows[rowIndex]?.cells?.[\n        cellIndex\n      ] as IEditableTextCell;\n      textCell.props.editableValue = newValue;\n      return newRows;\n    });\n  };\n\n  const updateEditableRows = async (\n    type: RowEditType,\n    rowIndex?: number,\n    validationErrors?: RowErrors,\n  ) => {\n    if (rowIndex === undefined) {\n      return;\n    }\n    const newRows = cloneDeep(tableRows);\n    let newRow: IRow;\n    const invalid =\n      !!validationErrors && Object.keys(validationErrors).length > 0;\n\n    if (invalid) {\n      newRow = validateCellEdits(newRows[rowIndex], type, validationErrors);\n    } else if (type === RowEditAction.Cancel) {\n      newRow = cancelCellEdits(newRows[rowIndex]);\n    } else {\n      newRow = applyCellEdits(newRows[rowIndex], type);\n    }\n    newRows[rowIndex] = newRow;\n\n    // Update the copy of the retrieved data set so we can save it when the user saves changes\n\n    if (!invalid && type === RowEditAction.Save) {\n      const key = (newRow.cells?.[0] as IRowCell).props.value;\n      const value = (newRow.cells?.[1] as IRowCell).props.value;\n\n      // We only have one editable value, otherwise we'd need to save each\n      try {\n        await adminClient.realms.addLocalization(\n          {\n            realm: realm.realm!,\n            selectedLocale:\n              selectMenuLocale || getValues(\"defaultLocale\") || DEFAULT_LOCALE,\n            key,\n          },\n          value,\n        );\n        addAlert(t(\"updateMessageBundleSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addAlert(t(\"updateMessageBundleError\"), AlertVariant.danger);\n      }\n    }\n    setTableRows(newRows);\n  };\n\n  const handleModalToggle = () => {\n    setAddMessageBundleModalOpen(!addMessageBundleModalOpen);\n  };\n\n  const options = [\n    <SelectGroup label={t(\"defaultLocale\")} key=\"group1\">\n      <SelectOption key={DEFAULT_LOCALE} value={DEFAULT_LOCALE}>\n        {localeToDisplayName(DEFAULT_LOCALE)}\n      </SelectOption>\n    </SelectGroup>,\n    <Divider key=\"divider\" />,\n    <SelectGroup label={t(\"supportedLocales\")} key=\"group2\">\n      {watchSupportedLocales.map((locale) => (\n        <SelectOption key={locale} value={locale}>\n          {localeToDisplayName(locale)}\n        </SelectOption>\n      ))}\n    </SelectGroup>,\n  ];\n\n  const addKeyValue = async (pair: KeyValueType): Promise<void> => {\n    try {\n      await adminClient.realms.addLocalization(\n        {\n          realm: currentRealm!,\n          selectedLocale:\n            selectMenuLocale || getValues(\"defaultLocale\") || DEFAULT_LOCALE,\n          key: pair.key,\n        },\n        pair.value,\n      );\n\n      adminClient.setConfig({\n        realmName: currentRealm!,\n      });\n      refreshTable();\n      addAlert(t(\"addMessageBundleSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(t(\"addMessageBundleError\"), error);\n    }\n  };\n\n  const deleteKey = async (key: string) => {\n    try {\n      await adminClient.realms.deleteRealmLocalizationTexts({\n        realm: currentRealm!,\n        selectedLocale: selectMenuLocale,\n        key,\n      });\n      refreshTable();\n      addAlert(t(\"deleteMessageBundleSuccess\"));\n    } catch (error) {\n      addError(\"deleteMessageBundleError\", error);\n    }\n  };\n\n  return (\n    <>\n      {addMessageBundleModalOpen && (\n        <AddMessageBundleModal\n          handleModalToggle={handleModalToggle}\n          save={(pair: any) => {\n            addKeyValue(pair);\n            handleModalToggle();\n          }}\n          form={bundleForm}\n        />\n      )}\n      <PageSection variant=\"light\">\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"internationalization\")}\n            fieldId=\"kc-internationalization\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"internationalizationHelp\")}\n                fieldLabelId=\"internationalization\"\n              />\n            }\n          >\n            <Controller\n              name=\"internationalizationEnabled\"\n              control={control}\n              defaultValue={realm.internationalizationEnabled}\n              render={({ field }) => (\n                <Switch\n                  id=\"kc-l-internationalization\"\n                  label={t(\"enabled\")}\n                  labelOff={t(\"disabled\")}\n                  isChecked={field.value}\n                  data-testid={\n                    field.value\n                      ? \"internationalization-enabled\"\n                      : \"internationalization-disabled\"\n                  }\n                  onChange={field.onChange}\n                  aria-label={t(\"internationalization\")}\n                />\n              )}\n            />\n          </FormGroup>\n          {internationalizationEnabled && (\n            <>\n              <FormGroup\n                label={t(\"supportedLocales\")}\n                fieldId=\"kc-l-supported-locales\"\n              >\n                <Controller\n                  name=\"supportedLocales\"\n                  control={control}\n                  defaultValue={defaultSupportedLocales}\n                  render={({ field }) => (\n                    <Select\n                      toggleId=\"kc-l-supported-locales\"\n                      onToggle={(open) => {\n                        setSupportedLocalesOpen(open);\n                      }}\n                      onSelect={(_, v) => {\n                        const option = v as string;\n                        if (field.value.includes(option)) {\n                          field.onChange(\n                            field.value.filter(\n                              (item: string) => item !== option,\n                            ),\n                          );\n                        } else {\n                          field.onChange([...field.value, option]);\n                        }\n                      }}\n                      onClear={() => {\n                        field.onChange([]);\n                      }}\n                      selections={field.value}\n                      variant={SelectVariant.typeaheadMulti}\n                      aria-label={t(\"supportedLocales\")}\n                      isOpen={supportedLocalesOpen}\n                      placeholderText={t(\"selectLocales\")}\n                    >\n                      {allLocales.map((locale) => (\n                        <SelectOption\n                          selected={field.value.includes(locale)}\n                          key={locale}\n                          value={locale}\n                        >\n                          {localeToDisplayName(locale)}\n                        </SelectOption>\n                      ))}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"defaultLocale\")}\n                fieldId=\"kc-l-default-locale\"\n              >\n                <Controller\n                  name=\"defaultLocale\"\n                  control={control}\n                  defaultValue={DEFAULT_LOCALE}\n                  render={({ field }) => (\n                    <Select\n                      toggleId=\"kc-default-locale\"\n                      onToggle={() => setDefaultLocaleOpen(!defaultLocaleOpen)}\n                      onSelect={(_, value) => {\n                        field.onChange(value as string);\n                        setDefaultLocaleOpen(false);\n                      }}\n                      selections={\n                        field.value\n                          ? localeToDisplayName(field.value)\n                          : realm.defaultLocale !== \"\"\n                            ? localeToDisplayName(\n                                realm.defaultLocale || DEFAULT_LOCALE,\n                              )\n                            : t(\"placeholderText\")\n                      }\n                      variant={SelectVariant.single}\n                      aria-label={t(\"defaultLocale\")}\n                      isOpen={defaultLocaleOpen}\n                      placeholderText={t(\"placeholderText\")}\n                      data-testid=\"select-default-locale\"\n                    >\n                      {watchSupportedLocales.map((locale, idx) => (\n                        <SelectOption\n                          key={`default-locale-${idx}`}\n                          value={locale}\n                        >\n                          {localeToDisplayName(locale)}\n                        </SelectOption>\n                      ))}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n            </>\n          )}\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              isDisabled={!formState.isDirty}\n              type=\"submit\"\n              data-testid=\"localization-tab-save\"\n            >\n              {t(\"save\")}\n            </Button>\n            <Button variant=\"link\" onClick={setupForm}>\n              {t(\"revert\")}\n            </Button>\n          </ActionGroup>\n        </FormAccess>\n\n        <FormPanel className=\"kc-message-bundles\" title=\"Edit message bundles\">\n          <TextContent className=\"messageBundleDescription\">\n            {t(\"messageBundleDescription\")}\n          </TextContent>\n          <div className=\"tableBorder\">\n            <PaginatingTableToolbar\n              count={messageBundles.length}\n              first={first}\n              max={max}\n              onNextClick={setFirst}\n              onPreviousClick={setFirst}\n              onPerPageSelect={(first, max) => {\n                setFirst(first);\n                setMax(max);\n              }}\n              inputGroupName={\"search\"}\n              inputGroupOnEnter={(search) => {\n                setFilter(search);\n                setFirst(0);\n                setMax(10);\n              }}\n              inputGroupPlaceholder={t(\"searchForMessageBundle\")}\n              toolbarItem={\n                <Button\n                  data-testid=\"add-bundle-button\"\n                  onClick={() => setAddMessageBundleModalOpen(true)}\n                >\n                  {t(\"addMessageBundle\")}\n                </Button>\n              }\n              searchTypeComponent={\n                <ToolbarItem>\n                  <Select\n                    width={180}\n                    data-testid=\"filter-by-locale-select\"\n                    isOpen={filterDropdownOpen}\n                    className=\"kc-filter-by-locale-select\"\n                    variant={SelectVariant.single}\n                    isDisabled={!internationalizationEnabled}\n                    onToggle={(isExpanded) => setFilterDropdownOpen(isExpanded)}\n                    onSelect={(_, value) => {\n                      setSelectMenuLocale(value.toString());\n                      setSelectMenuValueSelected(true);\n                      refreshTable();\n                      setFilterDropdownOpen(false);\n                    }}\n                    selections={\n                      selectMenuValueSelected\n                        ? localeToDisplayName(selectMenuLocale)\n                        : realm.defaultLocale !== \"\"\n                          ? localeToDisplayName(DEFAULT_LOCALE)\n                          : t(\"placeholderText\")\n                    }\n                  >\n                    {options}\n                  </Select>\n                </ToolbarItem>\n              }\n            >\n              {messageBundles.length === 0 && !filter && (\n                <ListEmptyState\n                  hasIcon\n                  message={t(\"noMessageBundles\")}\n                  instructions={t(\"noMessageBundlesInstructions\")}\n                  onPrimaryAction={handleModalToggle}\n                />\n              )}\n              {messageBundles.length === 0 && filter && (\n                <ListEmptyState\n                  hasIcon\n                  icon={SearchIcon}\n                  isSearchVariant\n                  message={t(\"noSearchResults\")}\n                  instructions={t(\"noSearchResultsInstructions\")}\n                />\n              )}\n              {messageBundles.length !== 0 && (\n                <Table\n                  aria-label={t(\"editableRowsTable\")}\n                  data-testid=\"editable-rows-table\"\n                  variant={TableVariant.compact}\n                  cells={[t(\"key\"), t(\"value\")]}\n                  rows={tableRows}\n                  onRowEdit={(_, type, _b, rowIndex, validation) =>\n                    updateEditableRows(type, rowIndex, validation)\n                  }\n                  actions={[\n                    {\n                      title: t(\"delete\"),\n                      onClick: (_, row) =>\n                        deleteKey(\n                          (tableRows[row].cells?.[0] as IRowCell).props.value,\n                        ),\n                    },\n                  ]}\n                >\n                  <TableHeader />\n                  <TableBody />\n                </Table>\n              )}\n            </PaginatingTableToolbar>\n          </div>\n        </FormPanel>\n      </PageSection>\n    </>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { FormGroup, PageSection, Switch } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormPanel, HelpItem } from \"ui-shared\";\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\n\ntype RealmSettingsLoginTabProps = {\n  realm: RealmRepresentation;\n  refresh: () => void;\n};\n\ntype SwitchType = { [K in keyof RealmRepresentation]: boolean };\n\nexport const RealmSettingsLoginTab = ({\n  realm,\n  refresh,\n}: RealmSettingsLoginTabProps) => {\n  const { t } = useTranslation();\n\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n\n  const updateSwitchValue = async (switches: SwitchType | SwitchType[]) => {\n    const name = Array.isArray(switches)\n      ? Object.keys(switches[0])[0]\n      : Object.keys(switches)[0];\n\n    try {\n      await adminClient.realms.update(\n        {\n          realm: realmName,\n        },\n        Array.isArray(switches)\n          ? switches.reduce((realm, s) => Object.assign(realm, s), realm)\n          : Object.assign(realm, switches),\n      );\n      addAlert(t(\"enableSwitchSuccess\", { switch: t(name) }));\n      refresh();\n    } catch (error) {\n      addError(t(\"enableSwitchError\"), error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <FormPanel\n        className=\"kc-login-screen\"\n        title={t(\"loginScreenCustomization\")}\n      >\n        <FormAccess isHorizontal role=\"manage-realm\">\n          <FormGroup\n            label={t(\"registrationAllowed\")}\n            fieldId=\"kc-user-reg\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"userRegistrationHelpText\")}\n                fieldLabelId=\"registrationAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-user-reg-switch\"\n              data-testid=\"user-reg-switch\"\n              value={realm.registrationAllowed ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.registrationAllowed}\n              onChange={(value) => {\n                updateSwitchValue({ registrationAllowed: value });\n              }}\n              aria-label={t(\"registrationAllowed\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"resetPasswordAllowed\")}\n            fieldId=\"kc-forgot-pw\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"forgotPasswordHelpText\")}\n                fieldLabelId=\"resetPasswordAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-forgot-pw-switch\"\n              data-testid=\"forgot-pw-switch\"\n              name=\"resetPasswordAllowed\"\n              value={realm.resetPasswordAllowed ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.resetPasswordAllowed}\n              onChange={(value) => {\n                updateSwitchValue({ resetPasswordAllowed: value });\n              }}\n              aria-label={t(\"resetPasswordAllowed\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"rememberMe\")}\n            fieldId=\"kc-remember-me\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"rememberMeHelpText\")}\n                fieldLabelId=\"rememberMe\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-remember-me-switch\"\n              data-testid=\"remember-me-switch\"\n              value={realm.rememberMe ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.rememberMe}\n              onChange={(value) => {\n                updateSwitchValue({ rememberMe: value });\n              }}\n              aria-label={t(\"rememberMe\")}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel className=\"kc-email-settings\" title={t(\"emailSettings\")}>\n        <FormAccess isHorizontal role=\"manage-realm\">\n          <FormGroup\n            label={t(\"registrationEmailAsUsername\")}\n            fieldId=\"kc-email-as-username\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"emailAsUsernameHelpText\")}\n                fieldLabelId=\"registrationEmailAsUsername\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-email-as-username-switch\"\n              data-testid=\"email-as-username-switch\"\n              value={realm.registrationEmailAsUsername ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.registrationEmailAsUsername}\n              onChange={(value) => {\n                updateSwitchValue([\n                  {\n                    registrationEmailAsUsername: value,\n                  },\n                  {\n                    duplicateEmailsAllowed: false,\n                  },\n                ]);\n              }}\n              aria-label={t(\"registrationEmailAsUsername\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"loginWithEmailAllowed\")}\n            fieldId=\"kc-login-with-email\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"loginWithEmailHelpText\")}\n                fieldLabelId=\"loginWithEmailAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-login-with-email-switch\"\n              data-testid=\"login-with-email-switch\"\n              value={realm.loginWithEmailAllowed ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.loginWithEmailAllowed}\n              onChange={(value) => {\n                updateSwitchValue([\n                  {\n                    loginWithEmailAllowed: value,\n                  },\n                  { duplicateEmailsAllowed: false },\n                ]);\n              }}\n              aria-label={t(\"loginWithEmailAllowed\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"duplicateEmailsAllowed\")}\n            fieldId=\"kc-duplicate-emails\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"duplicateEmailsHelpText\")}\n                fieldLabelId=\"duplicateEmailsAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-duplicate-emails-switch\"\n              data-testid=\"duplicate-emails-switch\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={\n                realm.duplicateEmailsAllowed ||\n                (realm.loginWithEmailAllowed &&\n                  realm.registrationEmailAsUsername)\n              }\n              onChange={(value) => {\n                updateSwitchValue({\n                  duplicateEmailsAllowed: value,\n                });\n              }}\n              isDisabled={\n                realm.loginWithEmailAllowed || realm.registrationEmailAsUsername\n              }\n              aria-label={t(\"duplicateEmailsAllowed\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"verifyEmail\")}\n            fieldId=\"kc-verify-email\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"verifyEmailHelpText\")}\n                fieldLabelId=\"verifyEmail\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-verify-email-switch\"\n              data-testid=\"verify-email-switch\"\n              name=\"verifyEmail\"\n              value={realm.verifyEmail ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.verifyEmail}\n              onChange={(value) => {\n                updateSwitchValue({ verifyEmail: value });\n              }}\n              aria-label={t(\"verifyEmail\")}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        className=\"kc-user-info-settings\"\n        title={t(\"userInfoSettings\")}\n      >\n        <FormAccess isHorizontal role=\"manage-realm\">\n          <FormGroup\n            label={t(\"editUsernameAllowed\")}\n            fieldId=\"kc-edit-username\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"editUsernameHelp\")}\n                fieldLabelId=\"editUsernameAllowed\"\n              />\n            }\n            hasNoPaddingTop\n          >\n            <Switch\n              id=\"kc-edit-username-switch\"\n              data-testid=\"edit-username-switch\"\n              value={realm.editUsernameAllowed ? \"on\" : \"off\"}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={realm.editUsernameAllowed}\n              onChange={(value) => {\n                updateSwitchValue({ editUsernameAllowed: value });\n              }}\n              aria-label={t(\"editUsernameAllowed\")}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n    </PageSection>\n  );\n};\n","import {\n  Alert,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Switch,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { prettyPrintJSON } from \"../util\";\n\nimport \"./partial-export.css\";\n\nexport type PartialExportDialogProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nexport const PartialExportDialog = ({\n  isOpen,\n  onClose,\n}: PartialExportDialogProps) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n\n  const [exportGroupsAndRoles, setExportGroupsAndRoles] = useState(false);\n  const [exportClients, setExportClients] = useState(false);\n  const [isExporting, setIsExporting] = useState(false);\n\n  const showWarning = exportGroupsAndRoles || exportClients;\n\n  async function exportRealm() {\n    setIsExporting(true);\n\n    try {\n      const realmExport = await adminClient.realms.export({\n        realm,\n        exportClients,\n        exportGroupsAndRoles,\n      });\n\n      saveAs(\n        new Blob([prettyPrintJSON(realmExport)], {\n          type: \"application/json\",\n        }),\n        \"realm-export.json\",\n      );\n\n      addAlert(t(\"exportSuccess\"), AlertVariant.success);\n      onClose();\n    } catch (error) {\n      addError(\"exportFail\", error);\n    }\n\n    setIsExporting(false);\n  }\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"partialExport\")}\n      isOpen={isOpen}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"export\"\n          data-testid=\"export-button\"\n          isDisabled={isExporting}\n          onClick={exportRealm}\n        >\n          {t(\"export\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel-button\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text>{t(\"partialExportHeaderText\")}</Text>\n      </TextContent>\n      <Form\n        isHorizontal\n        className=\"keycloak__realm-settings__partial-import_form\"\n      >\n        <FormGroup\n          label={t(\"includeGroupsAndRoles\")}\n          fieldId=\"include-groups-and-roles-check\"\n          hasNoPaddingTop\n        >\n          <Switch\n            id=\"include-groups-and-roles-check\"\n            data-testid=\"include-groups-and-roles-check\"\n            isChecked={exportGroupsAndRoles}\n            onChange={setExportGroupsAndRoles}\n            label={t(\"on\")}\n            labelOff={t(\"off\")}\n            aria-label={t(\"includeGroupsAndRoles\")}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"includeClients\")}\n          fieldId=\"include-clients-check\"\n          hasNoPaddingTop\n        >\n          <Switch\n            id=\"include-clients-check\"\n            data-testid=\"include-clients-check\"\n            onChange={setExportClients}\n            isChecked={exportClients}\n            label={t(\"on\")}\n            labelOff={t(\"off\")}\n            aria-label={t(\"includeClients\")}\n          />\n        </FormGroup>\n      </Form>\n\n      {showWarning && (\n        <Alert\n          data-testid=\"warning-message\"\n          variant=\"warning\"\n          title={t(\"exportWarningTitle\")}\n          isInline\n        >\n          {t(\"exportWarningDescription\")}\n        </Alert>\n      )}\n    </Modal>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type {\n  PartialImportRealmRepresentation,\n  PartialImportResponse,\n  PartialImportResult,\n} from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport {\n  Alert,\n  Button,\n  ButtonVariant,\n  Checkbox,\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Divider,\n  Label,\n  Modal,\n  ModalVariant,\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport {\n  ChangeEvent,\n  FormEvent,\n  MouseEvent as ReactMouseEvent,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { JsonFileUpload } from \"../components/json-file-upload/JsonFileUpload\";\nimport { KeycloakDataTable } from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\n\nexport type PartialImportProps = {\n  open: boolean;\n  toggleDialog: () => void;\n};\n\n// An imported JSON file can either be an array of realm objects\n// or a single realm object.\ntype ImportedMultiRealm = RealmRepresentation | RealmRepresentation[];\n\ntype NonRoleResource = \"users\" | \"clients\" | \"groups\" | \"identityProviders\";\ntype RoleResource = \"realmRoles\" | \"clientRoles\";\ntype Resource = NonRoleResource | RoleResource;\n\ntype CollisionOption = \"FAIL\" | \"SKIP\" | \"OVERWRITE\";\n\ntype ResourceChecked = { [k in Resource]: boolean };\n\nconst INITIAL_RESOURCES: Readonly<ResourceChecked> = {\n  users: false,\n  clients: false,\n  groups: false,\n  identityProviders: false,\n  realmRoles: false,\n  clientRoles: false,\n};\n\nexport const PartialImportDialog = (props: PartialImportProps) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n\n  const [importedFile, setImportedFile] = useState<ImportedMultiRealm>();\n  const isFileSelected = !!importedFile;\n  const [isRealmSelectOpen, setIsRealmSelectOpen] = useState(false);\n  const [isCollisionSelectOpen, setIsCollisionSelectOpen] = useState(false);\n  const [importInProgress, setImportInProgress] = useState(false);\n  const [collisionOption, setCollisionOption] =\n    useState<CollisionOption>(\"FAIL\");\n  const [targetRealm, setTargetRealm] = useState<RealmRepresentation>({});\n  const [importResponse, setImportResponse] = useState<PartialImportResponse>();\n  const { addError } = useAlerts();\n\n  const [resourcesToImport, setResourcesToImport] = useState(INITIAL_RESOURCES);\n  const isAnyResourceChecked = Object.values(resourcesToImport).some(\n    (checked) => checked,\n  );\n\n  const resetResourcesToImport = () => {\n    setResourcesToImport(INITIAL_RESOURCES);\n  };\n\n  const resetInputState = () => {\n    setImportedFile(undefined);\n    setTargetRealm({});\n    setCollisionOption(\"FAIL\");\n    resetResourcesToImport();\n  };\n\n  // when dialog opens or closes, clear state\n  useEffect(() => {\n    setImportInProgress(false);\n    setImportResponse(undefined);\n    resetInputState();\n  }, [props.open]);\n\n  const handleFileChange = (value: ImportedMultiRealm) => {\n    resetInputState();\n    setImportedFile(value);\n\n    if (!Array.isArray(value)) {\n      setTargetRealm(value);\n    } else if (value.length > 0) {\n      setTargetRealm(value[0]);\n    }\n  };\n\n  const handleRealmSelect = (realm: string | SelectOptionObject) => {\n    setTargetRealm(realm as RealmRepresentation);\n    setIsRealmSelectOpen(false);\n    resetResourcesToImport();\n  };\n\n  const handleResourceCheckBox = (\n    checked: boolean,\n    event: FormEvent<HTMLInputElement>,\n  ) => {\n    const resource = event.currentTarget.name as Resource;\n\n    setResourcesToImport({\n      ...resourcesToImport,\n      [resource]: checked,\n    });\n  };\n\n  const realmSelectOptions = (realms: RealmRepresentation[]) =>\n    realms.map((realm) => (\n      <SelectOption\n        key={realm.id}\n        value={realm}\n        data-testid={realm.id + \"-select-option\"}\n      >\n        {realm.realm || realm.id}\n      </SelectOption>\n    ));\n\n  const handleCollisionSelect = (\n    event: ChangeEvent<Element> | ReactMouseEvent<Element, MouseEvent>,\n    option: string | SelectOptionObject,\n  ) => {\n    setCollisionOption(option as CollisionOption);\n    setIsCollisionSelectOpen(false);\n  };\n\n  const collisionOptions = () => {\n    return [\n      <SelectOption key=\"fail\" value=\"FAIL\">\n        {t(\"FAIL\")}\n      </SelectOption>,\n      <SelectOption key=\"skip\" value=\"SKIP\">\n        {t(\"SKIP\")}\n      </SelectOption>,\n      <SelectOption key=\"overwrite\" value=\"OVERWRITE\">\n        {t(\"OVERWRITE\")}\n      </SelectOption>,\n    ];\n  };\n\n  const targetHasResources = () => {\n    return (\n      targetHasResource(\"users\") ||\n      targetHasResource(\"groups\") ||\n      targetHasResource(\"clients\") ||\n      targetHasResource(\"identityProviders\") ||\n      targetHasRealmRoles() ||\n      targetHasClientRoles()\n    );\n  };\n\n  const targetHasResource = (resource: NonRoleResource) => {\n    const value = targetRealm[resource];\n    return value !== undefined && value.length > 0;\n  };\n\n  const targetHasRealmRoles = () => {\n    const value = targetRealm.roles?.realm;\n    return value !== undefined && value.length > 0;\n  };\n\n  const targetHasClientRoles = () => {\n    const value = targetRealm.roles?.client;\n    return value !== undefined && Object.keys(value).length > 0;\n  };\n\n  const itemCount = (resource: Resource) => {\n    if (!isFileSelected) return 0;\n\n    if (resource === \"realmRoles\") {\n      return targetRealm.roles?.realm?.length ?? 0;\n    }\n\n    if (resource === \"clientRoles\") {\n      return targetHasClientRoles()\n        ? clientRolesCount(targetRealm.roles!.client!)\n        : 0;\n    }\n\n    return targetRealm[resource]?.length ?? 0;\n  };\n\n  const clientRolesCount = (\n    clientRoles: Record<string, RoleRepresentation[]>,\n  ) =>\n    Object.values(clientRoles).reduce((total, role) => total + role.length, 0);\n\n  const resourceDataListItem = (\n    resource: Resource,\n    resourceDisplayName: string,\n  ) => {\n    return (\n      <DataListItem aria-labelledby={`${resource}-list-item`}>\n        <DataListItemRow>\n          <DataListItemCells\n            dataListCells={[\n              <DataListCell key={resource}>\n                <Checkbox\n                  id={`${resource}-checkbox`}\n                  label={`${itemCount(resource)} ${resourceDisplayName}`}\n                  aria-labelledby={`${resource}-checkbox`}\n                  name={resource}\n                  isChecked={resourcesToImport[resource]}\n                  onChange={handleResourceCheckBox}\n                  data-testid={resource + \"-checkbox\"}\n                />\n              </DataListCell>,\n            ]}\n          />\n        </DataListItemRow>\n      </DataListItem>\n    );\n  };\n\n  const jsonForImport = () => {\n    const jsonToImport: PartialImportRealmRepresentation = {\n      ifResourceExists: collisionOption,\n      id: targetRealm.id,\n      realm: targetRealm.realm,\n    };\n\n    if (resourcesToImport[\"users\"]) jsonToImport.users = targetRealm.users;\n    if (resourcesToImport[\"groups\"]) jsonToImport.groups = targetRealm.groups;\n    if (resourcesToImport[\"identityProviders\"])\n      jsonToImport.identityProviders = targetRealm.identityProviders;\n    if (resourcesToImport[\"clients\"])\n      jsonToImport.clients = targetRealm.clients;\n    if (resourcesToImport[\"realmRoles\"] || resourcesToImport[\"clientRoles\"]) {\n      jsonToImport.roles = targetRealm.roles;\n      if (!resourcesToImport[\"realmRoles\"]) delete jsonToImport.roles?.realm;\n      if (!resourcesToImport[\"clientRoles\"]) delete jsonToImport.roles?.client;\n    }\n    return jsonToImport;\n  };\n\n  async function doImport() {\n    if (importInProgress) return;\n\n    setImportInProgress(true);\n\n    try {\n      const importResults = await adminClient.realms.partialImport({\n        realm,\n        rep: jsonForImport(),\n      });\n      setImportResponse(importResults);\n    } catch (error) {\n      addError(\"importFail\", error);\n    }\n\n    setImportInProgress(false);\n  }\n\n  const importModal = () => {\n    return (\n      <Modal\n        variant={ModalVariant.medium}\n        title={t(\"partialImport\")}\n        isOpen={props.open}\n        onClose={props.toggleDialog}\n        actions={[\n          <Button\n            id=\"modal-import\"\n            data-testid=\"import-button\"\n            key=\"import\"\n            isDisabled={!isAnyResourceChecked}\n            onClick={() => {\n              doImport();\n            }}\n          >\n            {t(\"import\")}\n          </Button>,\n          <Button\n            id=\"modal-cancel\"\n            data-testid=\"cancel-button\"\n            key=\"cancel\"\n            variant={ButtonVariant.link}\n            onClick={() => {\n              props.toggleDialog();\n            }}\n          >\n            {t(\"cancel\")}\n          </Button>,\n        ]}\n      >\n        <Stack hasGutter>\n          <StackItem>\n            <TextContent>\n              <Text>{t(\"partialImportHeaderText\")}</Text>\n            </TextContent>\n          </StackItem>\n          <StackItem>\n            <JsonFileUpload\n              id=\"partial-import-file\"\n              allowEditingUploadedText\n              onChange={handleFileChange}\n            />\n          </StackItem>\n\n          {isFileSelected && targetHasResources() && (\n            <>\n              <StackItem>\n                <Divider />\n              </StackItem>\n              {Array.isArray(importedFile) && importedFile.length > 1 && (\n                <StackItem>\n                  <Text>{t(\"selectRealm\")}:</Text>\n                  <Select\n                    toggleId=\"realm-selector\"\n                    isOpen={isRealmSelectOpen}\n                    onToggle={() => setIsRealmSelectOpen(!isRealmSelectOpen)}\n                    onSelect={(_, value) => handleRealmSelect(value)}\n                    placeholderText={targetRealm.realm || targetRealm.id}\n                  >\n                    {realmSelectOptions(importedFile)}\n                  </Select>\n                </StackItem>\n              )}\n              <StackItem>\n                <Text>{t(\"chooseResources\")}:</Text>\n                <DataList aria-label={t(\"resourcesToImport\")} isCompact>\n                  {targetHasResource(\"users\") &&\n                    resourceDataListItem(\"users\", t(\"users\"))}\n                  {targetHasResource(\"groups\") &&\n                    resourceDataListItem(\"groups\", t(\"groups\"))}\n                  {targetHasResource(\"clients\") &&\n                    resourceDataListItem(\"clients\", t(\"clients\"))}\n                  {targetHasResource(\"identityProviders\") &&\n                    resourceDataListItem(\n                      \"identityProviders\",\n                      t(\"identityProviders\"),\n                    )}\n                  {targetHasRealmRoles() &&\n                    resourceDataListItem(\"realmRoles\", t(\"realmRoles\"))}\n                  {targetHasClientRoles() &&\n                    resourceDataListItem(\"clientRoles\", t(\"clientRoles\"))}\n                </DataList>\n              </StackItem>\n              <StackItem>\n                <Text>{t(\"selectIfResourceExists\")}:</Text>\n                <Select\n                  isOpen={isCollisionSelectOpen}\n                  direction=\"up\"\n                  onToggle={() => {\n                    setIsCollisionSelectOpen(!isCollisionSelectOpen);\n                  }}\n                  onSelect={handleCollisionSelect}\n                  placeholderText={t(collisionOption)}\n                >\n                  {collisionOptions()}\n                </Select>\n              </StackItem>\n            </>\n          )}\n        </Stack>\n      </Modal>\n    );\n  };\n\n  const importCompleteMessage = () => {\n    return `${t(\"importAdded\", {\n      count: importResponse?.added,\n    })}  ${t(\"importSkipped\", {\n      count: importResponse?.skipped,\n    })} ${t(\"importOverwritten\", {\n      count: importResponse?.overwritten,\n    })}`;\n  };\n\n  const loader = async (first = 0, max = 15) => {\n    if (!importResponse) {\n      return [];\n    }\n\n    const last = Math.min(first + max, importResponse.results.length);\n\n    return importResponse.results.slice(first, last);\n  };\n\n  const ActionLabel = (importRecord: PartialImportResult) => {\n    switch (importRecord.action) {\n      case \"ADDED\":\n        return (\n          <Label key={importRecord.id} color=\"green\">\n            {t(\"added\")}\n          </Label>\n        );\n      case \"SKIPPED\":\n        return (\n          <Label key={importRecord.id} color=\"orange\">\n            {t(\"skipped\")}\n          </Label>\n        );\n      case \"OVERWRITTEN\":\n        return (\n          <Label key={importRecord.id} color=\"purple\">\n            {t(\"overwritten\")}\n          </Label>\n        );\n      default:\n        return \"\";\n    }\n  };\n\n  const TypeRenderer = (importRecord: PartialImportResult) => {\n    const typeMap = new Map([\n      [\"CLIENT\", t(\"clients\")],\n      [\"REALM_ROLE\", t(\"realmRoles\")],\n      [\"USER\", t(\"users\")],\n      [\"CLIENT_ROLE\", t(\"clientRoles\")],\n      [\"IDP\", t(\"identityProviders\")],\n      [\"GROUP\", t(\"groups\")],\n    ]);\n\n    return <span>{typeMap.get(importRecord.resourceType)}</span>;\n  };\n\n  const importCompletedModal = () => {\n    return (\n      <Modal\n        variant={ModalVariant.medium}\n        title={t(\"partialImport\")}\n        isOpen={props.open}\n        onClose={props.toggleDialog}\n        actions={[\n          <Button\n            id=\"modal-close\"\n            data-testid=\"close-button\"\n            key=\"close\"\n            variant={ButtonVariant.primary}\n            onClick={() => {\n              props.toggleDialog();\n            }}\n          >\n            {t(\"close\")}\n          </Button>,\n        ]}\n      >\n        <Alert variant=\"success\" isInline title={importCompleteMessage()} />\n        <KeycloakDataTable\n          loader={loader}\n          isPaginated\n          ariaLabelKey=\"partialImport\"\n          columns={[\n            {\n              name: \"action\",\n              displayKey: \"action\",\n              cellRenderer: ActionLabel,\n            },\n            {\n              name: \"resourceType\",\n              displayKey: \"type\",\n              cellRenderer: TypeRenderer,\n            },\n            {\n              name: \"resourceName\",\n              displayKey: \"name\",\n            },\n            {\n              name: \"id\",\n              displayKey: \"id\",\n            },\n          ]}\n        />\n      </Modal>\n    );\n  };\n\n  if (!importResponse) {\n    return importModal();\n  }\n\n  return importCompletedModal();\n};\n","import type ClientPolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientPolicyRepresentation\";\nimport { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Divider,\n  Flex,\n  FlexItem,\n  PageSection,\n  Radio,\n  Switch,\n  Title,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { prettyPrintJSON } from \"../util\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { toAddClientPolicy } from \"./routes/AddClientPolicy\";\nimport { toClientPolicies } from \"./routes/ClientPolicies\";\nimport { toEditClientPolicy } from \"./routes/EditClientPolicy\";\n\nimport \"./realm-settings-section.css\";\n\nexport const PoliciesTab = () => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n  const [show, setShow] = useState(false);\n  const [policies, setPolicies] = useState<ClientPolicyRepresentation[]>();\n  const [selectedPolicy, setSelectedPolicy] =\n    useState<ClientPolicyRepresentation>();\n  const [key, setKey] = useState(0);\n  const [code, setCode] = useState<string>();\n  const [tablePolicies, setTablePolicies] =\n    useState<ClientPolicyRepresentation[]>();\n  const refresh = () => setKey(key + 1);\n\n  const form = useForm<Record<string, boolean>>({ mode: \"onChange\" });\n\n  useFetch(\n    () => adminClient.clientPolicies.listPolicies(),\n    (policies) => {\n      setPolicies(policies.policies),\n        setTablePolicies(policies.policies || []),\n        setCode(prettyPrintJSON(policies.policies));\n    },\n    [key],\n  );\n\n  const loader = async () => policies ?? [];\n\n  const saveStatus = async () => {\n    const switchValues = form.getValues();\n\n    const updatedPolicies = policies?.map<ClientPolicyRepresentation>(\n      (policy) => {\n        const enabled = switchValues[policy.name!];\n\n        return {\n          ...policy,\n          enabled,\n        };\n      },\n    );\n\n    try {\n      await adminClient.clientPolicies.updatePolicy({\n        policies: updatedPolicies,\n      });\n      navigate(toClientPolicies({ realm, tab: \"policies\" }));\n      addAlert(t(\"updateClientPolicySuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"updateClientPolicyError\", error);\n    }\n  };\n\n  const ClientPolicyDetailLink = ({ name }: ClientPolicyRepresentation) => (\n    <Link to={toEditClientPolicy({ realm, policyName: name! })}>{name}</Link>\n  );\n\n  const SwitchRenderer = ({\n    clientPolicy,\n  }: {\n    clientPolicy: ClientPolicyRepresentation;\n  }) => {\n    const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n      titleKey: \"disablePolicyConfirmTitle\",\n      messageKey: \"disablePolicyConfirm\",\n      continueButtonLabel: \"disable\",\n      onConfirm: () => {\n        form.setValue(clientPolicy.name!, false);\n        saveStatus();\n      },\n    });\n\n    return (\n      <>\n        <DisableConfirm />\n        <Controller\n          name={clientPolicy.name!}\n          data-testid={`${clientPolicy.name!}-switch`}\n          defaultValue={clientPolicy.enabled}\n          control={form.control}\n          render={({ field }) => (\n            <Switch\n              label={t(\"enabled\")}\n              labelOff={t(\"disabled\")}\n              isChecked={field.value}\n              onChange={(value) => {\n                if (!value) {\n                  toggleDisableDialog();\n                } else {\n                  field.onChange(value);\n                  saveStatus();\n                }\n              }}\n              aria-label={clientPolicy.name!}\n            />\n          )}\n        />\n      </>\n    );\n  };\n\n  const save = async () => {\n    if (!code) {\n      return;\n    }\n\n    try {\n      const obj: ClientPolicyRepresentation[] = JSON.parse(code);\n\n      try {\n        await adminClient.clientPolicies.updatePolicy({\n          policies: obj,\n        });\n        addAlert(t(\"updateClientPoliciesSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"updateClientPoliciesError\", error);\n      }\n    } catch (error) {\n      console.warn(\"Invalid json, ignoring value using {}\");\n      addError(\"updateClientPoliciesError\", error);\n    }\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientPolicyConfirmTitle\"),\n    messageKey: t(\"deleteClientPolicyConfirm\", {\n      policyName: selectedPolicy?.name,\n    }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      const updatedPolicies = policies?.filter(\n        (policy) => policy.name !== selectedPolicy?.name,\n      );\n\n      try {\n        await adminClient.clientPolicies.updatePolicy({\n          policies: updatedPolicies,\n        });\n        addAlert(t(\"deleteClientPolicySuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(t(\"deleteClientPolicyError\"), error);\n      }\n    },\n  });\n\n  if (!policies) {\n    return <KeycloakSpinner />;\n  }\n  return (\n    <>\n      <DeleteConfirm />\n      <PageSection>\n        <Flex className=\"kc-policies-config-section\">\n          <FlexItem>\n            <Title headingLevel=\"h1\" size=\"md\">\n              {t(\"policiesConfigType\")}\n            </Title>\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              isChecked={!show}\n              name=\"policiesView\"\n              onChange={() => setShow(false)}\n              label={t(\"policiesConfigTypes.formView\")}\n              id=\"formView-policiesView\"\n              data-testid=\"formView-policiesView\"\n              className=\"kc-form-radio-btn pf-u-mr-sm pf-u-ml-sm\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              isChecked={show}\n              name=\"policiesView\"\n              onChange={() => setShow(true)}\n              label={t(\"policiesConfigTypes.jsonEditor\")}\n              id=\"jsonEditor-policiesView\"\n              data-testid=\"jsonEditor-policiesView\"\n              className=\"kc-editor-radio-btn\"\n            />\n          </FlexItem>\n        </Flex>\n      </PageSection>\n      <Divider />\n      {!show ? (\n        <KeycloakDataTable\n          key={policies.length}\n          emptyState={\n            <ListEmptyState\n              message={t(\"noClientPolicies\")}\n              instructions={t(\"noClientPoliciesInstructions\")}\n              primaryActionText={t(\"createClientPolicy\")}\n              onPrimaryAction={() => navigate(toAddClientPolicy({ realm }))}\n            />\n          }\n          ariaLabelKey=\"clientPolicies\"\n          searchPlaceholderKey=\"clientPolicySearch\"\n          loader={loader}\n          toolbarItem={\n            <ToolbarItem>\n              <Button\n                id=\"createPolicy\"\n                component={(props) => (\n                  <Link {...props} to={toAddClientPolicy({ realm })} />\n                )}\n                data-testid=\"createPolicy\"\n              >\n                {t(\"createClientPolicy\")}\n              </Button>\n            </ToolbarItem>\n          }\n          actions={[\n            {\n              title: t(\"delete\"),\n              onRowClick: (item) => {\n                toggleDeleteDialog();\n                setSelectedPolicy(item);\n              },\n            } as Action<ClientPolicyRepresentation>,\n          ]}\n          columns={[\n            {\n              name: \"name\",\n              cellRenderer: ClientPolicyDetailLink,\n            },\n            {\n              name: \"enabled\",\n              displayKey: \"status\",\n              cellRenderer: (clientPolicy) => (\n                <SwitchRenderer clientPolicy={clientPolicy} />\n              ),\n            },\n            {\n              name: \"description\",\n            },\n          ]}\n        />\n      ) : (\n        <>\n          <div className=\"pf-u-mt-md pf-u-ml-lg\">\n            <CodeEditor\n              isLineNumbersVisible\n              isLanguageLabelVisible\n              isReadOnly={false}\n              code={code}\n              language={Language.json}\n              height=\"30rem\"\n              onChange={setCode}\n            />\n          </div>\n          <div className=\"pf-u-mt-md\">\n            <Button\n              variant={ButtonVariant.primary}\n              className=\"pf-u-mr-md pf-u-ml-lg\"\n              data-testid=\"jsonEditor-policies-saveBtn\"\n              onClick={save}\n            >\n              {t(\"save\")}\n            </Button>\n            <Button\n              variant={ButtonVariant.link}\n              data-testid=\"jsonEditor-reloadBtn\"\n              onClick={() => {\n                setCode(prettyPrintJSON(tablePolicies));\n              }}\n            >\n              {t(\"reload\")}\n            </Button>\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n","import type ClientProfileRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientProfileRepresentation\";\nimport { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Divider,\n  Flex,\n  FlexItem,\n  FormGroup,\n  Label,\n  PageSection,\n  Radio,\n  Title,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { omit } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { prettyPrintJSON } from \"../util\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { toAddClientProfile } from \"./routes/AddClientProfile\";\nimport { toClientProfile } from \"./routes/ClientProfile\";\n\nimport \"./realm-settings-section.css\";\n\ntype ClientProfile = ClientProfileRepresentation & {\n  global: boolean;\n};\n\nexport default function ProfilesTab() {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const [tableProfiles, setTableProfiles] = useState<ClientProfile[]>();\n  const [globalProfiles, setGlobalProfiles] =\n    useState<ClientProfileRepresentation[]>();\n  const [selectedProfile, setSelectedProfile] = useState<ClientProfile>();\n  const [show, setShow] = useState(false);\n  const [code, setCode] = useState<string>();\n  const [key, setKey] = useState(0);\n\n  useFetch(\n    () =>\n      adminClient.clientPolicies.listProfiles({\n        includeGlobalProfiles: true,\n      }),\n    (allProfiles) => {\n      setGlobalProfiles(allProfiles.globalProfiles);\n\n      const globalProfiles = allProfiles.globalProfiles?.map(\n        (globalProfiles) => ({\n          ...globalProfiles,\n          global: true,\n        }),\n      );\n\n      const profiles = allProfiles.profiles?.map((profiles) => ({\n        ...profiles,\n        global: false,\n      }));\n\n      const allClientProfiles = globalProfiles?.concat(profiles ?? []);\n      setTableProfiles(allClientProfiles || []);\n      setCode(JSON.stringify(allClientProfiles, null, 2));\n    },\n    [key],\n  );\n\n  const loader = async () => tableProfiles ?? [];\n\n  const normalizeProfile = (\n    profile: ClientProfile,\n  ): ClientProfileRepresentation => omit(profile, \"global\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientProfileConfirmTitle\"),\n    messageKey: t(\"deleteClientProfileConfirm\", {\n      profileName: selectedProfile?.name,\n    }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      const updatedProfiles = tableProfiles\n        ?.filter(\n          (profile) =>\n            profile.name !== selectedProfile?.name && !profile.global,\n        )\n        .map<ClientProfileRepresentation>((profile) =>\n          normalizeProfile(profile),\n        );\n\n      try {\n        await adminClient.clientPolicies.createProfiles({\n          profiles: updatedProfiles,\n          globalProfiles,\n        });\n        addAlert(t(\"deleteClientSuccess\"), AlertVariant.success);\n        setKey(key + 1);\n      } catch (error) {\n        addError(t(\"deleteClientError\"), error);\n      }\n    },\n  });\n\n  const cellFormatter = (row: ClientProfile) => (\n    <Link\n      to={toClientProfile({\n        realm,\n        profileName: row.name!,\n      })}\n      key={row.name}\n    >\n      {row.name} {row.global && <Label color=\"blue\">{t(\"global\")}</Label>}\n    </Link>\n  );\n\n  if (!tableProfiles) {\n    return <KeycloakSpinner />;\n  }\n\n  const save = async () => {\n    if (!code) {\n      return;\n    }\n\n    try {\n      const obj: ClientProfile[] = JSON.parse(code);\n      const changedProfiles = obj\n        .filter((profile) => !profile.global)\n        .map((profile) => normalizeProfile(profile));\n\n      const changedGlobalProfiles = obj\n        .filter((profile) => profile.global)\n        .map((profile) => normalizeProfile(profile));\n\n      try {\n        await adminClient.clientPolicies.createProfiles({\n          profiles: changedProfiles,\n          globalProfiles: changedGlobalProfiles,\n        });\n        addAlert(t(\"updateClientProfilesSuccess\"), AlertVariant.success);\n        setKey(key + 1);\n      } catch (error) {\n        addError(\"updateClientProfilesError\", error);\n      }\n    } catch (error) {\n      console.warn(\"Invalid json, ignoring value using {}\");\n    }\n  };\n\n  return (\n    <>\n      <DeleteConfirm />\n      <PageSection>\n        <Flex className=\"kc-profiles-config-section\">\n          <FlexItem>\n            <Title headingLevel=\"h1\" size=\"md\">\n              {t(\"profilesConfigType\")}\n            </Title>\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              isChecked={!show}\n              name=\"profilesView\"\n              onChange={() => setShow(false)}\n              label={t(\"profilesConfigTypes.formView\")}\n              id=\"formView-profilesView\"\n              className=\"kc-form-radio-btn pf-u-mr-sm pf-u-ml-sm\"\n              data-testid=\"formView-profilesView\"\n            />\n          </FlexItem>\n          <FlexItem>\n            <Radio\n              isChecked={show}\n              name=\"profilesView\"\n              onChange={() => setShow(true)}\n              label={t(\"profilesConfigTypes.jsonEditor\")}\n              id=\"jsonEditor-profilesView\"\n              className=\"kc-editor-radio-btn\"\n              data-testid=\"jsonEditor-profilesView\"\n            />\n          </FlexItem>\n        </Flex>\n      </PageSection>\n      <Divider />\n      {!show ? (\n        <KeycloakDataTable\n          key={tableProfiles.length}\n          ariaLabelKey=\"profiles\"\n          searchPlaceholderKey=\"clientProfileSearch\"\n          loader={loader}\n          toolbarItem={\n            <ToolbarItem>\n              <Button\n                id=\"createProfile\"\n                component={(props) => (\n                  <Link\n                    {...props}\n                    to={toAddClientProfile({ realm, tab: \"profiles\" })}\n                  />\n                )}\n                data-testid=\"createProfile\"\n              >\n                {t(\"createClientProfile\")}\n              </Button>\n            </ToolbarItem>\n          }\n          isRowDisabled={(value) => value.global}\n          actions={[\n            {\n              title: t(\"delete\"),\n              onRowClick: (profile) => {\n                setSelectedProfile(profile);\n                toggleDeleteDialog();\n              },\n            } as Action<ClientProfile>,\n          ]}\n          columns={[\n            {\n              name: \"name\",\n              displayKey: t(\"name\"),\n              cellRenderer: cellFormatter,\n            },\n            {\n              name: \"description\",\n              displayKey: t(\"clientProfileDescription\"),\n            },\n          ]}\n          emptyState={\n            <ListEmptyState\n              message={t(\"emptyClientProfiles\")}\n              instructions={t(\"emptyClientProfilesInstructions\")}\n            />\n          }\n        />\n      ) : (\n        <FormGroup fieldId={\"jsonEditor\"}>\n          <div className=\"pf-u-mt-md pf-u-ml-lg\">\n            <CodeEditor\n              isLineNumbersVisible\n              isLanguageLabelVisible\n              isReadOnly={false}\n              code={code}\n              language={Language.json}\n              height=\"30rem\"\n              onChange={(value) => {\n                setCode(value ?? \"\");\n              }}\n            />\n          </div>\n          <ActionGroup>\n            <div className=\"pf-u-mt-md\">\n              <Button\n                variant={ButtonVariant.primary}\n                className=\"pf-u-mr-md pf-u-ml-lg\"\n                onClick={save}\n                data-testid=\"jsonEditor-saveBtn\"\n              >\n                {t(\"save\")}\n              </Button>\n              <Button\n                variant={ButtonVariant.link}\n                onClick={() => {\n                  setCode(prettyPrintJSON(tableProfiles));\n                }}\n                data-testid=\"jsonEditor-reloadBtn\"\n              >\n                {t(\"reload\")}\n              </Button>\n            </div>\n          </ActionGroup>\n        </FormGroup>\n      )}\n    </>\n  );\n}\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  PageSection,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormPanel, HelpItem } from \"ui-shared\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { TimeSelector } from \"../components/time-selector/TimeSelector\";\nimport { convertToFormValues } from \"../util\";\n\nimport \"./realm-settings-section.css\";\n\ntype RealmSettingsSessionsTabProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const RealmSettingsSessionsTab = ({\n  realm,\n  save,\n}: RealmSettingsSessionsTabProps) => {\n  const { t } = useTranslation();\n\n  const { setValue, control, handleSubmit, formState } =\n    useForm<RealmRepresentation>();\n\n  const offlineSessionMaxEnabled = useWatch({\n    control,\n    name: \"offlineSessionMaxLifespanEnabled\",\n  });\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n  };\n\n  useEffect(setupForm, []);\n\n  return (\n    <PageSection variant=\"light\">\n      <FormPanel\n        title={t(\"SSOSessionSettings\")}\n        className=\"kc-sso-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"SSOSessionIdle\")}\n            fieldId=\"SSOSessionIdle\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"ssoSessionIdle\")}\n                fieldLabelId=\"SSOSessionIdle\"\n              />\n            }\n          >\n            <Controller\n              name=\"ssoSessionIdleTimeout\"\n              defaultValue={realm.ssoSessionIdleTimeout}\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-sso-session-idle\"\n                  data-testid=\"sso-session-idle-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"SSOSessionMax\")}\n            fieldId=\"SSOSessionMax\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"ssoSessionMax\")}\n                fieldLabelId=\"SSOSessionMax\"\n              />\n            }\n          >\n            <Controller\n              name=\"ssoSessionMaxLifespan\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-sso-session-max\"\n                  data-testid=\"sso-session-max-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"SSOSessionIdleRememberMe\")}\n            fieldId=\"SSOSessionIdleRememberMe\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"ssoSessionIdleRememberMe\")}\n                fieldLabelId=\"SSOSessionIdleRememberMe\"\n              />\n            }\n          >\n            <Controller\n              name=\"ssoSessionIdleTimeoutRememberMe\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-sso-session-idle-remember-me\"\n                  data-testid=\"sso-session-idle-remember-me-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"SSOSessionMaxRememberMe\")}\n            fieldId=\"SSOSessionMaxRememberMe\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"ssoSessionMaxRememberMe\")}\n                fieldLabelId=\"SSOSessionMaxRememberMe\"\n              />\n            }\n          >\n            <Controller\n              name=\"ssoSessionMaxLifespanRememberMe\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-sso-session-max-remember-me\"\n                  data-testid=\"sso-session-max-remember-me-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        title={t(\"clientSessionSettings\")}\n        className=\"kc-client-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"clientSessionIdle\")}\n            fieldId=\"clientSessionIdle\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clientSessionIdleHelp\")}\n                fieldLabelId=\"clientSessionIdle\"\n              />\n            }\n          >\n            <Controller\n              name=\"clientSessionIdleTimeout\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-client-session-idle\"\n                  data-testid=\"client-session-idle-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"clientSessionMax\")}\n            fieldId=\"clientSessionMax\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clientSessionMaxHelp\")}\n                fieldLabelId=\"clientSessionMax\"\n              />\n            }\n          >\n            <Controller\n              name=\"clientSessionMaxLifespan\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-client-session-max\"\n                  data-testid=\"client-session-max-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        title={t(\"offlineSessionSettings\")}\n        className=\"kc-offline-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"offlineSessionIdle\")}\n            fieldId=\"offlineSessionIdle\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"offlineSessionIdleHelp\")}\n                fieldLabelId=\"offlineSessionIdle\"\n              />\n            }\n          >\n            <Controller\n              name=\"offlineSessionIdleTimeout\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-offline-session-idle\"\n                  data-testid=\"offline-session-idle-input\"\n                  aria-label=\"offline-session-idle-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"offlineSessionMaxLimited\")}\n            fieldId=\"kc-offlineSessionMaxLimited\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"offlineSessionMaxLimitedHelp\")}\n                fieldLabelId=\"offlineSessionMaxLimited\"\n              />\n            }\n          >\n            <Controller\n              name=\"offlineSessionMaxLifespanEnabled\"\n              control={control}\n              defaultValue={false}\n              render={({ field }) => (\n                <Switch\n                  id=\"kc-offline-session-max\"\n                  data-testid=\"offline-session-max-switch\"\n                  aria-label={t(\"offlineSessionMaxLimited\")}\n                  label={t(\"enabled\")}\n                  labelOff={t(\"disabled\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                />\n              )}\n            />\n          </FormGroup>\n          {offlineSessionMaxEnabled && (\n            <FormGroup\n              label={t(\"offlineSessionMax\")}\n              fieldId=\"offlineSessionMax\"\n              id=\"offline-session-max-label\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"offlineSessionMaxHelp\")}\n                  fieldLabelId=\"offlineSessionMax\"\n                />\n              }\n            >\n              <Controller\n                name=\"offlineSessionMaxLifespan\"\n                control={control}\n                render={({ field }) => (\n                  <TimeSelector\n                    className=\"kc-offline-session-max\"\n                    data-testid=\"offline-session-max-input\"\n                    value={field.value!}\n                    onChange={field.onChange}\n                    units={[\"minute\", \"hour\", \"day\"]}\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        className=\"kc-login-settings-template\"\n        title={t(\"loginSettings\")}\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"loginTimeout\")}\n            id=\"kc-login-timeout-label\"\n            fieldId=\"offlineSessionIdle\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"loginTimeoutHelp\")}\n                fieldLabelId=\"loginTimeout\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessCodeLifespanLogin\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-login-timeout\"\n                  data-testid=\"login-timeout-input\"\n                  aria-label=\"login-timeout-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"loginActionTimeout\")}\n            fieldId=\"loginActionTimeout\"\n            id=\"login-action-timeout-label\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"loginActionTimeoutHelp\")}\n                fieldLabelId=\"loginActionTimeout\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessCodeLifespanUserAction\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-login-action-timeout\"\n                  data-testid=\"login-action-timeout-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"sessions-tab-save\"\n              isDisabled={!formState.isDirty}\n            >\n              {t(\"save\")}\n            </Button>\n            <Button variant=\"link\" onClick={setupForm}>\n              {t(\"revert\")}\n            </Button>\n          </ActionGroup>\n        </FormAccess>\n      </FormPanel>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { convertToFormValues } from \"../util\";\n\ntype RealmSettingsThemesTabProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const RealmSettingsThemesTab = ({\n  realm,\n  save,\n}: RealmSettingsThemesTabProps) => {\n  const { t } = useTranslation();\n\n  const [loginThemeOpen, setLoginThemeOpen] = useState(false);\n  const [accountThemeOpen, setAccountThemeOpen] = useState(false);\n  const [adminUIThemeOpen, setAdminUIThemeOpen] = useState(false);\n  const [emailThemeOpen, setEmailThemeOpen] = useState(false);\n\n  const { control, handleSubmit, setValue } = useForm<RealmRepresentation>();\n  const themeTypes = useServerInfo().themes!;\n\n  const setupForm = () => {\n    convertToFormValues(realm, setValue);\n  };\n  useEffect(setupForm, []);\n\n  return (\n    <PageSection variant=\"light\">\n      <FormAccess\n        isHorizontal\n        role=\"manage-realm\"\n        className=\"pf-u-mt-lg\"\n        onSubmit={handleSubmit(save)}\n      >\n        <FormGroup\n          label={t(\"loginTheme\")}\n          fieldId=\"kc-login-theme\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"loginThemeHelp\")}\n              fieldLabelId=\"loginTheme\"\n            />\n          }\n        >\n          <Controller\n            name=\"loginTheme\"\n            control={control}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-login-theme\"\n                onToggle={() => setLoginThemeOpen(!loginThemeOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setLoginThemeOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={loginThemeOpen}\n                placeholderText={t(\"selectATheme\")}\n                data-testid=\"select-login-theme\"\n              >\n                {themeTypes.login.map((theme, idx) => (\n                  <SelectOption\n                    selected={theme.name === field.value}\n                    key={`login-theme-${idx}`}\n                    value={theme.name}\n                  >\n                    {t(`${theme.name}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"accountTheme\")}\n          fieldId=\"kc-account-theme\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"accountThemeHelp\")}\n              fieldLabelId=\"accountTheme\"\n            />\n          }\n        >\n          <Controller\n            name=\"accountTheme\"\n            control={control}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-account-theme\"\n                onToggle={() => setAccountThemeOpen(!accountThemeOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setAccountThemeOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                aria-label={t(\"accountTheme\")}\n                isOpen={accountThemeOpen}\n                placeholderText={t(\"selectATheme\")}\n                data-testid=\"select-account-theme\"\n              >\n                {themeTypes.account\n                  .filter((theme) => theme.name !== \"base\")\n                  .map((theme, idx) => (\n                    <SelectOption\n                      selected={theme.name === field.value}\n                      key={`account-theme-${idx}`}\n                      value={theme.name}\n                    >\n                      {t(`${theme.name}`)}\n                    </SelectOption>\n                  ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"adminTheme\")}\n          fieldId=\"kc-admin-ui-theme\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"adminThemeHelp\")}\n              fieldLabelId=\"adminTheme\"\n            />\n          }\n        >\n          <Controller\n            name=\"adminTheme\"\n            control={control}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-admin-ui-theme\"\n                onToggle={() => setAdminUIThemeOpen(!adminUIThemeOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setAdminUIThemeOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={adminUIThemeOpen}\n                placeholderText={t(\"selectATheme\")}\n                data-testid=\"select-admin-theme\"\n              >\n                {themeTypes.admin\n                  .filter((theme) => theme.name !== \"base\")\n                  .map((theme, idx) => (\n                    <SelectOption\n                      selected={theme.name === field.value}\n                      key={`admin-theme-${idx}`}\n                      value={theme.name}\n                    >\n                      {t(`${theme.name}`)}\n                    </SelectOption>\n                  ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <FormGroup\n          label={t(\"emailTheme\")}\n          fieldId=\"kc-email-theme\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"emailThemeHelp\")}\n              fieldLabelId=\"emailTheme\"\n            />\n          }\n        >\n          <Controller\n            name=\"emailTheme\"\n            control={control}\n            defaultValue=\"\"\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-email-theme\"\n                onToggle={() => setEmailThemeOpen(!emailThemeOpen)}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setEmailThemeOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={emailThemeOpen}\n                placeholderText={t(\"selectATheme\")}\n                data-testid=\"select-email-theme\"\n              >\n                {themeTypes.email.map((theme, idx) => (\n                  <SelectOption\n                    selected={theme.name === field.value}\n                    key={`email-theme-${idx}`}\n                    value={theme.name}\n                  >\n                    {t(`${theme.name}`)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        <ActionGroup>\n          <Button variant=\"primary\" type=\"submit\" data-testid=\"themes-tab-save\">\n            {t(\"save\")}\n          </Button>\n          <Button variant=\"link\" onClick={setupForm}>\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  NumberInput,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  Text,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormPanel, HelpItem } from \"ui-shared\";\nimport { FormAccess } from \"../components/form/FormAccess\";\nimport { KeycloakTextInput } from \"../components/keycloak-text-input/KeycloakTextInput\";\nimport {\n  TimeSelector,\n  toHumanFormat,\n} from \"../components/time-selector/TimeSelector\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { useWhoAmI } from \"../context/whoami/WhoAmI\";\nimport { convertToFormValues, sortProviders } from \"../util\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\n\nimport \"./realm-settings-section.css\";\n\ntype RealmSettingsSessionsTabProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n  reset?: () => void;\n};\n\nexport const RealmSettingsTokensTab = ({\n  realm,\n  reset,\n  save,\n}: RealmSettingsSessionsTabProps) => {\n  const { t } = useTranslation();\n  const serverInfo = useServerInfo();\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const { whoAmI } = useWhoAmI();\n\n  const [defaultSigAlgDrpdwnIsOpen, setDefaultSigAlgDrpdwnOpen] =\n    useState(false);\n\n  const defaultSigAlgOptions = sortProviders(\n    serverInfo.providers![\"signature\"].providers,\n  );\n\n  const form = useForm<RealmRepresentation>();\n  const { setValue, control } = form;\n\n  const offlineSessionMaxEnabled = useWatch({\n    control,\n    name: \"offlineSessionMaxLifespanEnabled\",\n    defaultValue: realm.offlineSessionMaxLifespanEnabled,\n  });\n\n  const ssoSessionIdleTimeout = useWatch({\n    control,\n    name: \"ssoSessionIdleTimeout\",\n    defaultValue: 36000,\n  });\n\n  const revokeRefreshToken = useWatch({\n    control,\n    name: \"revokeRefreshToken\",\n    defaultValue: false,\n  });\n\n  useEffect(() => {\n    convertToFormValues(realm, setValue);\n  }, []);\n\n  return (\n    <PageSection variant=\"light\">\n      <FormPanel title={t(\"general\")} className=\"kc-sso-session-template\">\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"defaultSigAlg\")}\n            fieldId=\"kc-default-signature-algorithm\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"defaultSigAlgHelp\")}\n                fieldLabelId=\"algorithm\"\n              />\n            }\n          >\n            <Controller\n              name=\"defaultSignatureAlgorithm\"\n              defaultValue={\"RS256\"}\n              control={form.control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"kc-default-sig-alg\"\n                  onToggle={() =>\n                    setDefaultSigAlgDrpdwnOpen(!defaultSigAlgDrpdwnIsOpen)\n                  }\n                  onSelect={(_, value) => {\n                    field.onChange(value.toString());\n                    setDefaultSigAlgDrpdwnOpen(false);\n                  }}\n                  selections={[field.value?.toString()]}\n                  variant={SelectVariant.single}\n                  aria-label={t(\"defaultSigAlg\")}\n                  isOpen={defaultSigAlgDrpdwnIsOpen}\n                  data-testid=\"select-default-sig-alg\"\n                >\n                  {defaultSigAlgOptions!.map((p, idx) => (\n                    <SelectOption\n                      selected={p === field.value}\n                      key={`default-sig-alg-${idx}`}\n                      value={p}\n                    ></SelectOption>\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n\n          {isFeatureEnabled(Feature.DeviceFlow) && (\n            <>\n              <FormGroup\n                label={t(\"oAuthDeviceCodeLifespan\")}\n                fieldId=\"oAuthDeviceCodeLifespan\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"oAuthDeviceCodeLifespanHelp\")}\n                    fieldLabelId=\"oAuthDeviceCodeLifespan\"\n                  />\n                }\n              >\n                <Controller\n                  name=\"oauth2DeviceCodeLifespan\"\n                  defaultValue={0}\n                  control={form.control}\n                  render={({ field }) => (\n                    <TimeSelector\n                      id=\"oAuthDeviceCodeLifespan\"\n                      data-testid=\"oAuthDeviceCodeLifespan\"\n                      value={field.value || 0}\n                      onChange={field.onChange}\n                      units={[\"minute\", \"hour\", \"day\"]}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"oAuthDevicePollingInterval\")}\n                fieldId=\"oAuthDevicePollingInterval\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"oAuthDevicePollingIntervalHelp\")}\n                    fieldLabelId=\"oAuthDevicePollingInterval\"\n                  />\n                }\n              >\n                <Controller\n                  name=\"oauth2DevicePollingInterval\"\n                  defaultValue={0}\n                  control={form.control}\n                  render={({ field }) => (\n                    <NumberInput\n                      id=\"oAuthDevicePollingInterval\"\n                      value={field.value}\n                      min={0}\n                      onPlus={() => field.onChange(field.value || 0 + 1)}\n                      onMinus={() => field.onChange(field.value || 0 - 1)}\n                      onChange={(event) => {\n                        const newValue = Number(event.currentTarget.value);\n                        field.onChange(!isNaN(newValue) ? newValue : 0);\n                      }}\n                      placeholder={t(\"oAuthDevicePollingInterval\")}\n                    />\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"shortVerificationUri\")}\n                fieldId=\"shortVerificationUri\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"shortVerificationUriTooltipHelp\")}\n                    fieldLabelId=\"shortVerificationUri\"\n                  />\n                }\n              >\n                <KeycloakTextInput\n                  id=\"shortVerificationUri\"\n                  placeholder={t(\"shortVerificationUri\")}\n                  {...form.register(\"attributes.shortVerificationUri\")}\n                />\n              </FormGroup>\n            </>\n          )}\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        title={t(\"refreshTokens\")}\n        className=\"kc-client-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            hasNoPaddingTop\n            label={t(\"revokeRefreshToken\")}\n            fieldId=\"kc-revoke-refresh-token\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"revokeRefreshTokenHelp\")}\n                fieldLabelId=\"revokeRefreshToken\"\n              />\n            }\n          >\n            <Controller\n              name=\"revokeRefreshToken\"\n              control={form.control}\n              defaultValue={false}\n              render={({ field }) => (\n                <Switch\n                  id=\"kc-revoke-refresh-token\"\n                  data-testid=\"revoke-refresh-token-switch\"\n                  aria-label={t(\"revokeRefreshToken\")}\n                  label={t(\"enabled\")}\n                  labelOff={t(\"disabled\")}\n                  isChecked={field.value}\n                  onChange={field.onChange}\n                />\n              )}\n            />\n          </FormGroup>\n          {revokeRefreshToken && (\n            <FormGroup\n              label={t(\"refreshTokenMaxReuse\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"refreshTokenMaxReuseHelp\")}\n                  fieldLabelId=\"refreshTokenMaxReuse\"\n                />\n              }\n              fieldId=\"refreshTokenMaxReuse\"\n            >\n              <Controller\n                name=\"refreshTokenMaxReuse\"\n                defaultValue={0}\n                control={form.control}\n                render={({ field }) => (\n                  <NumberInput\n                    type=\"text\"\n                    id=\"refreshTokenMaxReuseMs\"\n                    value={field.value}\n                    onPlus={() => field.onChange(field.value! + 1)}\n                    onMinus={() => field.onChange(field.value! - 1)}\n                    onChange={(event) =>\n                      field.onChange(\n                        Number((event.target as HTMLInputElement).value),\n                      )\n                    }\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        title={t(\"accessTokens\")}\n        className=\"kc-offline-session-template\"\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"accessTokenLifespan\")}\n            fieldId=\"accessTokenLifespan\"\n            helperText={t(\"recommendedSsoTimeout\", {\n              time: toHumanFormat(ssoSessionIdleTimeout!, whoAmI.getLocale()),\n            })}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"accessTokenLifespanHelp\")}\n                fieldLabelId=\"accessTokenLifespan\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessTokenLifespan\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  validated={\n                    field.value! > ssoSessionIdleTimeout!\n                      ? \"warning\"\n                      : \"default\"\n                  }\n                  className=\"kc-access-token-lifespan\"\n                  data-testid=\"access-token-lifespan-input\"\n                  aria-label=\"access-token-lifespan\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          <FormGroup\n            label={t(\"accessTokenLifespanImplicitFlow\")}\n            fieldId=\"accessTokenLifespanImplicitFlow\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"accessTokenLifespanImplicitFlow\")}\n                fieldLabelId=\"accessTokenLifespanImplicitFlow\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessTokenLifespanForImplicitFlow\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-access-token-lifespan-implicit\"\n                  data-testid=\"access-token-lifespan-implicit-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"clientLoginTimeout\")}\n            fieldId=\"clientLoginTimeout\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"clientLoginTimeoutHelp\")}\n                fieldLabelId=\"clientLoginTimeout\"\n              />\n            }\n          >\n            <Controller\n              name=\"accessCodeLifespan\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-client-login-timeout\"\n                  data-testid=\"client-login-timeout-input\"\n                  aria-label=\"client-login-timeout\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n\n          {offlineSessionMaxEnabled && (\n            <FormGroup\n              label={t(\"offlineSessionMax\")}\n              fieldId=\"offlineSessionMax\"\n              id=\"offline-session-max-label\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"offlineSessionMaxHelp\")}\n                  fieldLabelId=\"offlineSessionMax\"\n                />\n              }\n            >\n              <Controller\n                name=\"offlineSessionMaxLifespan\"\n                control={form.control}\n                render={({ field }) => (\n                  <TimeSelector\n                    className=\"kc-offline-session-max\"\n                    data-testid=\"offline-session-max-input\"\n                    value={field.value!}\n                    onChange={field.onChange}\n                    units={[\"minute\", \"hour\", \"day\"]}\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n        </FormAccess>\n      </FormPanel>\n      <FormPanel\n        className=\"kc-login-settings-template\"\n        title={t(\"actionTokens\")}\n      >\n        <FormAccess\n          isHorizontal\n          role=\"manage-realm\"\n          className=\"pf-u-mt-lg\"\n          onSubmit={form.handleSubmit(save)}\n        >\n          <FormGroup\n            label={t(\"userInitiatedActionLifespan\")}\n            id=\"kc-user-initiated-action-lifespan\"\n            fieldId=\"userInitiatedActionLifespan\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"userInitiatedActionLifespanHelp\")}\n                fieldLabelId=\"userInitiatedActionLifespan\"\n              />\n            }\n          >\n            <Controller\n              name=\"actionTokenGeneratedByUserLifespan\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-user-initiated-action-lifespan\"\n                  data-testid=\"user-initiated-action-lifespan\"\n                  aria-label=\"user-initiated-action-lifespan\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"defaultAdminInitiated\")}\n            fieldId=\"defaultAdminInitiated\"\n            id=\"default-admin-initiated-label\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"defaultAdminInitiatedActionLifespanHelp\")}\n                fieldLabelId=\"defaultAdminInitiated\"\n              />\n            }\n          >\n            <Controller\n              name=\"actionTokenGeneratedByAdminLifespan\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-default-admin-initiated\"\n                  data-testid=\"default-admin-initated-input\"\n                  aria-label=\"default-admin-initated-input\"\n                  value={field.value!}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <Text\n            className=\"kc-override-action-tokens-subtitle\"\n            component={TextVariants.h1}\n          >\n            {t(\"overrideActionTokens\")}\n          </Text>\n          <FormGroup\n            label={t(\"emailVerification\")}\n            fieldId=\"emailVerification\"\n            id=\"email-verification\"\n          >\n            <Controller\n              name=\"attributes.actionTokenGeneratedByUserLifespan-verify-email\"\n              defaultValue=\"\"\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-email-verification\"\n                  data-testid=\"email-verification-input\"\n                  value={field.value}\n                  onChange={(value) => field.onChange(value.toString())}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"idpAccountEmailVerification\")}\n            fieldId=\"idpAccountEmailVerification\"\n            id=\"idp-acct-label\"\n          >\n            <Controller\n              name=\"attributes.actionTokenGeneratedByUserLifespan-idp-verify-account-via-email\"\n              defaultValue={\"\"}\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-idp-email-verification\"\n                  data-testid=\"idp-email-verification-input\"\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"forgotPassword\")}\n            fieldId=\"forgotPassword\"\n            id=\"forgot-password-label\"\n          >\n            <Controller\n              name=\"attributes.actionTokenGeneratedByUserLifespan-reset-credentials\"\n              defaultValue={\"\"}\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-forgot-pw\"\n                  data-testid=\"forgot-pw-input\"\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"executeActions\")}\n            fieldId=\"executeActions\"\n            id=\"execute-actions\"\n          >\n            <Controller\n              name=\"attributes.actionTokenGeneratedByUserLifespan-execute-actions\"\n              defaultValue={\"\"}\n              control={form.control}\n              render={({ field }) => (\n                <TimeSelector\n                  className=\"kc-execute-actions\"\n                  data-testid=\"execute-actions-input\"\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n          <ActionGroup>\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              data-testid=\"tokens-tab-save\"\n              isDisabled={!form.formState.isDirty}\n            >\n              {t(\"save\")}\n            </Button>\n            <Button variant=\"link\" onClick={reset}>\n              {t(\"revert\")}\n            </Button>\n          </ActionGroup>\n        </FormAccess>\n      </FormPanel>\n    </PageSection>\n  );\n};\n","import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  Popover,\n  Text,\n  TextContent,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { useHelp } from \"ui-shared\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport { GroupPickerDialog } from \"../components/group/GroupPickerDialog\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../components/list-empty-state/ListEmptyState\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toUserFederation } from \"../user-federation/routes/UserFederation\";\nimport { useFetch } from \"../utils/useFetch\";\nimport useToggle from \"../utils/useToggle\";\n\nexport const DefaultsGroupsTab = () => {\n  const { t } = useTranslation();\n\n  const [isKebabOpen, toggleKebab] = useToggle();\n  const [isGroupPickerOpen, toggleGroupPicker] = useToggle();\n  const [defaultGroups, setDefaultGroups] = useState<GroupRepresentation[]>();\n  const [selectedRows, setSelectedRows] = useState<GroupRepresentation[]>([]);\n\n  const [key, setKey] = useState(0);\n  const [load, setLoad] = useState(0);\n  const reload = () => setLoad(load + 1);\n\n  const { realm } = useRealm();\n  const { addAlert, addError } = useAlerts();\n  const { enabled } = useHelp();\n\n  useFetch(\n    () => adminClient.realms.getDefaultGroups({ realm }),\n    (groups) => {\n      setDefaultGroups(groups);\n      setKey(key + 1);\n    },\n    [load],\n  );\n\n  const loader = () => Promise.resolve(defaultGroups!);\n\n  const removeGroup = async () => {\n    try {\n      await Promise.all(\n        selectedRows.map((group) =>\n          adminClient.realms.removeDefaultGroup({\n            realm,\n            id: group.id!,\n          }),\n        ),\n      );\n      addAlert(\n        t(\"groupRemove\", { count: selectedRows.length }),\n        AlertVariant.success,\n      );\n      setSelectedRows([]);\n    } catch (error) {\n      addError(\"groupRemoveError\", error);\n    }\n    reload();\n  };\n\n  const addGroups = async (groups: GroupRepresentation[]) => {\n    try {\n      await Promise.all(\n        groups.map((group) =>\n          adminClient.realms.addDefaultGroup({\n            realm,\n            id: group.id!,\n          }),\n        ),\n      );\n      addAlert(\n        t(\"defaultGroupAdded\", { count: groups.length }),\n        AlertVariant.success,\n      );\n    } catch (error) {\n      addError(\"defaultGroupAddedError\", error);\n    }\n    reload();\n  };\n\n  const [toggleRemoveDialog, RemoveDialog] = useConfirmDialog({\n    titleKey: t(\"removeConfirmTitle\", { count: selectedRows.length }),\n    messageKey: t(\"removeConfirm\", { count: selectedRows.length }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: removeGroup,\n  });\n\n  if (!defaultGroups) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <RemoveDialog />\n      {isGroupPickerOpen && (\n        <GroupPickerDialog\n          type=\"selectMany\"\n          text={{\n            title: \"addDefaultGroups\",\n            ok: \"add\",\n          }}\n          onConfirm={(groups) => {\n            addGroups(groups || []);\n            toggleGroupPicker();\n          }}\n          onClose={toggleGroupPicker}\n        />\n      )}\n      {enabled && (\n        <Popover\n          bodyContent={\n            <Trans i18nKey=\"defaultGroups\">\n              {\" \"}\n              <Link to={toUserFederation({ realm })} />.\n            </Trans>\n          }\n        >\n          <TextContent\n            className=\"keycloak__section_intro__help\"\n            style={{\n              paddingLeft: \"var(--pf-c-page__main-section--PaddingLeft)\",\n            }}\n          >\n            <Text>\n              <QuestionCircleIcon /> {t(\"whatIsDefaultGroups\")}\n            </Text>\n          </TextContent>\n        </Popover>\n      )}\n      <KeycloakDataTable\n        key={key}\n        canSelectAll\n        onSelect={(rows) => setSelectedRows([...rows])}\n        loader={loader}\n        ariaLabelKey=\"defaultGroups\"\n        searchPlaceholderKey=\"searchForGroups\"\n        toolbarItem={\n          <>\n            <ToolbarItem>\n              <Button\n                data-testid=\"openCreateGroupModal\"\n                variant=\"primary\"\n                onClick={toggleGroupPicker}\n              >\n                {t(\"addGroups\")}\n              </Button>\n            </ToolbarItem>\n            <ToolbarItem>\n              <Dropdown\n                toggle={\n                  <KebabToggle\n                    onToggle={toggleKebab}\n                    isDisabled={selectedRows!.length === 0}\n                  />\n                }\n                isOpen={isKebabOpen}\n                isPlain\n                dropdownItems={[\n                  <DropdownItem\n                    key=\"action\"\n                    component=\"button\"\n                    onClick={() => {\n                      toggleRemoveDialog();\n                      toggleKebab();\n                    }}\n                  >\n                    {t(\"remove\")}\n                  </DropdownItem>,\n                ]}\n              />\n            </ToolbarItem>\n          </>\n        }\n        actions={[\n          {\n            title: t(\"remove\"),\n            onRowClick: (group) => {\n              setSelectedRows([group]);\n              toggleRemoveDialog();\n              return Promise.resolve(false);\n            },\n          } as Action<GroupRepresentation>,\n        ]}\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"groupName\",\n          },\n          {\n            name: \"path\",\n            displayKey: \"path\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            hasIcon\n            message={t(\"noDefaultGroups\")}\n            instructions={\n              <Trans i18nKey=\"noDefaultGroupsInstructions\">\n                {\" \"}\n                <Link\n                  className=\"pf-u-font-weight-light\"\n                  to={toUserFederation({ realm })}\n                />\n                Add groups...\n              </Trans>\n            }\n            primaryActionText={t(\"addGroups\")}\n            onPrimaryAction={toggleGroupPicker}\n          />\n        }\n      />\n    </>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport { AlertVariant, Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { RoleMapping } from \"../components/role-mapping/RoleMapping\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { DefaultsGroupsTab } from \"./DefaultGroupsTab\";\n\nexport const UserRegistration = () => {\n  const { t } = useTranslation();\n  const [realm, setRealm] = useState<RealmRepresentation>();\n  const [activeTab, setActiveTab] = useState(10);\n  const [key, setKey] = useState(0);\n\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm: realmName }),\n    setRealm,\n    [],\n  );\n\n  if (!realm) {\n    return <KeycloakSpinner />;\n  }\n\n  const addComposites = async (composites: RoleRepresentation[]) => {\n    const compositeArray = composites;\n\n    try {\n      await adminClient.roles.createComposite(\n        { roleId: realm.defaultRole!.id!, realm: realmName },\n        compositeArray,\n      );\n      setKey(key + 1);\n      addAlert(t(\"addAssociatedRolesSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"addAssociatedRolesError\", error);\n    }\n  };\n\n  return (\n    <Tabs\n      activeKey={activeTab}\n      onSelect={(_, key) => setActiveTab(key as number)}\n    >\n      <Tab\n        key={key}\n        id=\"roles\"\n        eventKey={10}\n        title={<TabTitleText>{t(\"defaultRoles\")}</TabTitleText>}\n      >\n        <RoleMapping\n          name={realm.defaultRole!.name!}\n          id={realm.defaultRole!.id!}\n          type=\"roles\"\n          isManager\n          save={(rows) => addComposites(rows.map((r) => r.role))}\n        />\n      </Tab>\n      <Tab\n        id=\"groups\"\n        eventKey={20}\n        title={<TabTitleText>{t(\"defaultGroups\")}</TabTitleText>}\n      >\n        <DefaultsGroupsTab />\n      </Tab>\n    </Tabs>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Button, ToolbarItem } from \"@patternfly/react-core\";\n\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\n\nexport type EventType = {\n  id: string;\n};\n\ntype EventsTypeTableProps = {\n  ariaLabelKey?: string;\n  eventTypes: string[];\n  addTypes?: () => void;\n  onSelect?: (value: EventType[]) => void;\n  onDelete?: (value: EventType) => void;\n};\n\nexport function EventsTypeTable({\n  ariaLabelKey = \"userEventsRegistered\",\n  eventTypes,\n  addTypes,\n  onSelect,\n  onDelete,\n}: EventsTypeTableProps) {\n  const { t } = useTranslation();\n\n  const data = eventTypes.map((type) => ({\n    id: type,\n    name: t(`eventTypes.${type}.name`),\n    description: t(`eventTypes.${type}.description`),\n  }));\n  return (\n    <KeycloakDataTable\n      ariaLabelKey={ariaLabelKey}\n      searchPlaceholderKey=\"searchEventType\"\n      loader={data}\n      onSelect={onSelect ? onSelect : undefined}\n      canSelectAll={!!onSelect}\n      toolbarItem={\n        addTypes && (\n          <ToolbarItem>\n            <Button id=\"addTypes\" onClick={addTypes} data-testid=\"addTypes\">\n              {t(\"addSavedTypes\")}\n            </Button>\n          </ToolbarItem>\n        )\n      }\n      actions={\n        !onDelete\n          ? []\n          : [\n              {\n                title: t(\"remove\"),\n                onRowClick: onDelete,\n              } as Action<EventType>,\n            ]\n      }\n      columns={[\n        {\n          name: \"name\",\n          displayKey: \"eventType\",\n        },\n        {\n          name: \"description\",\n          displayKey: \"description\",\n        },\n      ]}\n      emptyState={\n        <ListEmptyState\n          message={t(\"emptyEvents\")}\n          instructions={t(\"emptyEventsInstructions\")}\n        />\n      }\n    />\n  );\n}\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Modal, ModalVariant } from \"@patternfly/react-core\";\n\nimport { EventsTypeTable, EventType } from \"./EventsTypeTable\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\ntype AddEventTypesDialogProps = {\n  onConfirm: (selected: EventType[]) => void;\n  onClose: () => void;\n  configured: string[];\n};\n\nexport const AddEventTypesDialog = ({\n  onConfirm,\n  onClose,\n  configured,\n}: AddEventTypesDialogProps) => {\n  const { t } = useTranslation();\n  const { enums } = useServerInfo();\n\n  const [selectedTypes, setSelectedTypes] = useState<EventType[]>([]);\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"addTypes\")}\n      isOpen={true}\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid=\"addEventTypeConfirm\"\n          key=\"confirm\"\n          variant=\"primary\"\n          onClick={() => onConfirm(selectedTypes)}\n        >\n          {t(\"add\")}\n        </Button>,\n        <Button\n          data-testid=\"moveCancel\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <EventsTypeTable\n        ariaLabelKey=\"addTypes\"\n        onSelect={(selected) => setSelectedTypes(selected)}\n        eventTypes={enums![\"eventType\"].filter(\n          (type) => !configured.includes(type),\n        )}\n      />\n    </Modal>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  Divider,\n  FormGroup,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { HelpItem } from \"ui-shared\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\n\nexport type EventsType = \"admin\" | \"user\";\n\ntype EventConfigFormProps = {\n  type: EventsType;\n  form: UseFormReturn;\n  reset: () => void;\n  clear: () => void;\n};\n\nexport const EventConfigForm = ({\n  type,\n  form,\n  reset,\n  clear,\n}: EventConfigFormProps) => {\n  const { t } = useTranslation();\n  const {\n    control,\n    watch,\n    setValue,\n    formState: { isDirty },\n  } = form;\n  const eventKey = type === \"admin\" ? \"adminEventsEnabled\" : \"eventsEnabled\";\n  const eventsEnabled: boolean = watch(eventKey);\n\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"events-disable-title\",\n    messageKey: \"events-disable-confirm\",\n    continueButtonLabel: \"confirm\",\n    onConfirm: () => setValue(eventKey, false, { shouldDirty: true }),\n  });\n\n  return (\n    <>\n      <DisableConfirm />\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"saveEvents\")}\n        fieldId={eventKey}\n        labelIcon={\n          <HelpItem\n            helpText={t(`save-${type}-eventsHelp`)}\n            fieldLabelId=\"saveEvents\"\n          />\n        }\n      >\n        <Controller\n          name={eventKey}\n          defaultValue={false}\n          control={control}\n          render={({ field }) => (\n            <Switch\n              data-testid={eventKey}\n              id={`${eventKey}-switch`}\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value}\n              onChange={(value) => {\n                if (!value) {\n                  toggleDisableDialog();\n                } else {\n                  field.onChange(value);\n                }\n              }}\n              aria-label={t(\"saveEvents\")}\n            />\n          )}\n        />\n      </FormGroup>\n      {eventsEnabled && (\n        <>\n          {type === \"admin\" && (\n            <FormGroup\n              hasNoPaddingTop\n              label={t(\"includeRepresentation\")}\n              fieldId=\"includeRepresentation\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"includeRepresentationHelp\")}\n                  fieldLabelId=\"includeRepresentation\"\n                />\n              }\n            >\n              <Controller\n                name=\"adminEventsDetailsEnabled\"\n                defaultValue={false}\n                control={control}\n                render={({ field }) => (\n                  <Switch\n                    data-testid=\"includeRepresentation\"\n                    id=\"includeRepresentation\"\n                    label={t(\"on\")}\n                    labelOff={t(\"off\")}\n                    isChecked={field.value}\n                    onChange={field.onChange}\n                    aria-label={t(\"includeRepresentation\")}\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n          <FormGroup\n            label={t(\"expiration\")}\n            fieldId=\"expiration\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"expirationHelp\")}\n                fieldLabelId=\"expiration\"\n              />\n            }\n          >\n            <Controller\n              name={\n                type === \"user\" ? \"eventsExpiration\" : \"adminEventsExpiration\"\n              }\n              defaultValue=\"\"\n              control={control}\n              render={({ field }) => (\n                <TimeSelector\n                  value={field.value}\n                  onChange={field.onChange}\n                  units={[\"minute\", \"hour\", \"day\"]}\n                />\n              )}\n            />\n          </FormGroup>\n        </>\n      )}\n      <ActionGroup>\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          id={`save-${type}`}\n          data-testid={`save-${type}`}\n          isDisabled={!isDirty}\n        >\n          {t(\"save\")}\n        </Button>\n        <Button variant=\"link\" onClick={reset}>\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n      <Divider />\n      <FormGroup\n        label={type === \"user\" ? t(\"clearUserEvents\") : t(\"clearAdminEvents\")}\n        fieldId={`clear-${type}-events`}\n        labelIcon={\n          <HelpItem\n            helpText={t(`${type}-clearEventsHelp`)}\n            fieldLabelId={`clear-${type}-events`}\n          />\n        }\n      >\n        <Button\n          variant=\"danger\"\n          id={`clear-${type}-events`}\n          data-testid={`clear-${type}-events`}\n          onClick={() => clear()}\n        >\n          {type === \"user\" ? t(\"clearUserEvents\") : t(\"clearAdminEvents\")}\n        </Button>\n      </FormGroup>\n    </>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, UseFormReturn } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\ntype EventListenersFormProps = {\n  form: UseFormReturn;\n  reset: () => void;\n};\n\nexport const EventListenersForm = ({\n  form,\n  reset,\n}: EventListenersFormProps) => {\n  const { t } = useTranslation();\n  const {\n    control,\n    formState: { isDirty },\n  } = form;\n\n  const [selectEventListenerOpen, setSelectEventListenerOpen] = useState(false);\n  const serverInfo = useServerInfo();\n  const eventListeners = serverInfo.providers?.eventsListener.providers;\n\n  return (\n    <>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"eventListeners\")}\n        fieldId={\"kc-eventListeners\"}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"eventListenersHelpTextHelp\")}\n            fieldLabelId=\"eventListeners\"\n          />\n        }\n      >\n        <Controller\n          name=\"eventsListeners\"\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              name=\"eventsListeners\"\n              className=\"kc_eventListeners_select\"\n              data-testid=\"eventListeners-select\"\n              chipGroupProps={{\n                numChips: 3,\n                expandedText: t(\"hide\"),\n                collapsedText: t(\"showRemaining\"),\n              }}\n              variant={SelectVariant.typeaheadMulti}\n              typeAheadAriaLabel=\"Select\"\n              onToggle={(isOpen) => setSelectEventListenerOpen(isOpen)}\n              selections={field.value}\n              onSelect={(_, selectedValue) => {\n                const option = selectedValue.toString();\n                const changedValue = field.value.includes(option)\n                  ? field.value.filter((item: string) => item !== option)\n                  : [...field.value, option];\n                field.onChange(changedValue);\n              }}\n              onClear={(operation) => {\n                operation.stopPropagation();\n                field.onChange([]);\n              }}\n              isOpen={selectEventListenerOpen}\n              aria-labelledby={\"eventsListeners\"}\n            >\n              {Object.keys(eventListeners!).map((event) => (\n                <SelectOption key={event} value={event} />\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <ActionGroup>\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          data-testid={\"saveEventListenerBtn\"}\n          isDisabled={!isDirty}\n        >\n          {t(\"save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          data-testid={\"revertEventListenerBtn\"}\n          onClick={reset}\n        >\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </>\n  );\n};\n","import type { RealmEventsConfigRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/realmEventsConfigRepresentation\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  PageSection,\n  Tab,\n  Tabs,\n  TabTitleText,\n} from \"@patternfly/react-core\";\nimport { isEqual } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertToFormValues } from \"../../util\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { AddEventTypesDialog } from \"./AddEventTypesDialog\";\nimport { EventConfigForm, EventsType } from \"./EventConfigForm\";\nimport { EventListenersForm } from \"./EventListenersForm\";\nimport { EventsTypeTable, EventType } from \"./EventsTypeTable\";\n\ntype EventsTabProps = {\n  realm: RealmRepresentation;\n};\n\ntype EventsConfigForm = RealmEventsConfigRepresentation & {\n  adminEventsExpiration?: number;\n};\n\nexport const EventsTab = ({ realm }: EventsTabProps) => {\n  const { t } = useTranslation();\n  const form = useForm<EventsConfigForm>();\n  const { setValue, handleSubmit } = form;\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n  const [tableKey, setTableKey] = useState(0);\n  const reload = () => setTableKey(new Date().getTime());\n\n  const [activeTab, setActiveTab] = useState(\"event\");\n  const [events, setEvents] = useState<RealmEventsConfigRepresentation>();\n  const [type, setType] = useState<EventsType>();\n  const [addEventType, setAddEventType] = useState(false);\n\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n\n  const setupForm = (eventConfig?: EventsConfigForm) => {\n    setEvents(eventConfig);\n    convertToFormValues(eventConfig || {}, setValue);\n  };\n\n  const clear = async (type: EventsType) => {\n    setType(type);\n    toggleDeleteDialog();\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteEvents\",\n    messageKey: \"deleteEventsConfirm\",\n    continueButtonLabel: \"clear\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        switch (type) {\n          case \"admin\":\n            await adminClient.realms.clearAdminEvents({ realm: realmName });\n            break;\n          case \"user\":\n            await adminClient.realms.clearEvents({ realm: realmName });\n            break;\n        }\n        addAlert(t(`${type}-events-cleared`), AlertVariant.success);\n      } catch (error) {\n        addError(`${type}-events-cleared-error`, error);\n      }\n    },\n  });\n\n  useFetch(\n    () => adminClient.realms.getConfigEvents({ realm: realmName }),\n    (eventConfig) => {\n      setupForm({\n        ...eventConfig,\n        adminEventsExpiration: realm.attributes?.adminEventsExpiration,\n      });\n      reload();\n    },\n    [key],\n  );\n\n  const save = async (config: EventsConfigForm) => {\n    const updatedEventListener = !isEqual(\n      events?.eventsListeners,\n      config.eventsListeners,\n    );\n\n    const { adminEventsExpiration, ...eventConfig } = config;\n    if (realm.attributes?.adminEventsExpiration !== adminEventsExpiration) {\n      await adminClient.realms.update(\n        { realm: realmName },\n        {\n          ...realm,\n          attributes: { ...(realm.attributes || {}), adminEventsExpiration },\n        },\n      );\n    }\n\n    try {\n      await adminClient.realms.updateConfigEvents(\n        { realm: realmName },\n        eventConfig,\n      );\n      setupForm({ ...events, ...eventConfig, adminEventsExpiration });\n      addAlert(\n        updatedEventListener\n          ? t(\"saveEventListenersSuccess\")\n          : t(\"eventConfigSuccessfully\"),\n        AlertVariant.success,\n      );\n    } catch (error) {\n      addError(\n        updatedEventListener\n          ? t(\"saveEventListenersError\")\n          : t(\"eventConfigError\"),\n        error,\n      );\n    }\n  };\n\n  const addEventTypes = async (eventTypes: EventType[]) => {\n    const eventsTypes = eventTypes.map((type) => type.id);\n    const enabledEvents = events!.enabledEventTypes?.concat(eventsTypes);\n    await addEvents(enabledEvents);\n  };\n\n  const addEvents = async (events: string[] = []) => {\n    const eventConfig = { ...form.getValues(), enabledEventTypes: events };\n    await save(eventConfig);\n    setAddEventType(false);\n    refresh();\n  };\n\n  return (\n    <>\n      <DeleteConfirm />\n      {addEventType && (\n        <AddEventTypesDialog\n          onConfirm={(eventTypes) => addEventTypes(eventTypes)}\n          configured={events?.enabledEventTypes || []}\n          onClose={() => setAddEventType(false)}\n        />\n      )}\n      <Tabs\n        activeKey={activeTab}\n        onSelect={(_, key) => setActiveTab(key as string)}\n      >\n        <Tab\n          eventKey=\"event\"\n          title={<TabTitleText>{t(\"eventListeners\")}</TabTitleText>}\n          data-testid=\"rs-event-listeners-tab\"\n        >\n          <PageSection>\n            <FormAccess\n              role=\"manage-events\"\n              isHorizontal\n              onSubmit={handleSubmit(save)}\n            >\n              <EventListenersForm form={form} reset={() => setupForm(events)} />\n            </FormAccess>\n          </PageSection>\n        </Tab>\n        <Tab\n          eventKey=\"user\"\n          title={<TabTitleText>{t(\"userEventsSettings\")}</TabTitleText>}\n          data-testid=\"rs-events-tab\"\n        >\n          <PageSection>\n            <FormAccess\n              role=\"manage-events\"\n              isHorizontal\n              onSubmit={handleSubmit(save)}\n            >\n              <EventConfigForm\n                type=\"user\"\n                form={form}\n                reset={() => setupForm(events)}\n                clear={() => clear(\"user\")}\n              />\n            </FormAccess>\n          </PageSection>\n          <PageSection>\n            <EventsTypeTable\n              key={tableKey}\n              addTypes={() => setAddEventType(true)}\n              eventTypes={events?.enabledEventTypes || []}\n              onDelete={(value) => {\n                const enabledEventTypes = events?.enabledEventTypes?.filter(\n                  (e) => e !== value.id,\n                );\n                addEvents(enabledEventTypes);\n                setEvents({ ...events, enabledEventTypes });\n              }}\n            />\n          </PageSection>\n        </Tab>\n        <Tab\n          eventKey=\"admin\"\n          title={<TabTitleText>{t(\"adminEventsSettings\")}</TabTitleText>}\n          data-testid=\"rs-admin-events-tab\"\n        >\n          <PageSection>\n            <FormAccess\n              role=\"manage-events\"\n              isHorizontal\n              onSubmit={handleSubmit(save)}\n            >\n              <EventConfigForm\n                type=\"admin\"\n                form={form}\n                reset={() => setupForm(events)}\n                clear={() => clear(\"admin\")}\n              />\n            </FormAccess>\n          </PageSection>\n        </Tab>\n      </Tabs>\n    </>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport type { KeyMetadataRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/keyMetadataRepresentation\";\nimport {\n  Button,\n  ButtonVariant,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { emptyFormatter } from \"../../util\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toKeysTab } from \"../routes/KeysTab\";\n\nimport \"../realm-settings-section.css\";\n\nimport useFormatDate from \"../../utils/useFormatDate\";\n\nconst FILTER_OPTIONS = [\"ACTIVE\", \"PASSIVE\", \"DISABLED\"] as const;\ntype FilterType = (typeof FILTER_OPTIONS)[number];\n\ntype KeyData = KeyMetadataRepresentation & {\n  provider?: string;\n};\n\ntype KeysListTabProps = {\n  realmComponents: ComponentRepresentation[];\n};\n\ntype SelectFilterProps = {\n  onFilter: (filter: FilterType) => void;\n};\n\nconst SelectFilter = ({ onFilter }: SelectFilterProps) => {\n  const { t } = useTranslation();\n  const [filterType, setFilterType] = useState<FilterType>(FILTER_OPTIONS[0]);\n\n  const [filterDropdownOpen, toggleFilter] = useToggle();\n  return (\n    <Select\n      width={300}\n      data-testid=\"filter-type-select\"\n      isOpen={filterDropdownOpen}\n      className=\"kc-filter-type-select\"\n      variant={SelectVariant.single}\n      onToggle={toggleFilter}\n      toggleIcon={<FilterIcon />}\n      onSelect={(_, value) => {\n        const filter =\n          FILTER_OPTIONS.find((o) => o === value.toString()) ||\n          FILTER_OPTIONS[0];\n        setFilterType(filter);\n        onFilter(filter);\n        toggleFilter();\n      }}\n      selections={filterType}\n    >\n      {FILTER_OPTIONS.map((option) => (\n        <SelectOption\n          key={option}\n          data-testid={`${option}-option`}\n          value={option}\n        >\n          {t(`keysFilter.${option}`)}\n        </SelectOption>\n      ))}\n    </Select>\n  );\n};\n\nexport const KeysListTab = ({ realmComponents }: KeysListTabProps) => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const formatDate = useFormatDate();\n\n  const [publicKey, setPublicKey] = useState(\"\");\n  const [certificate, setCertificate] = useState(\"\");\n\n  const { realm } = useRealm();\n\n  const [keyData, setKeyData] = useState<KeyData[]>();\n  const [filteredKeyData, setFilteredKeyData] = useState<KeyData[]>();\n\n  useFetch(\n    async () => {\n      const keysMetaData = await adminClient.realms.getKeys({ realm });\n      return keysMetaData.keys?.map((key) => {\n        const provider = realmComponents.find(\n          (component: ComponentRepresentation) =>\n            component.id === key.providerId,\n        );\n        return { ...key, provider: provider?.name } as KeyData;\n      })!;\n    },\n    setKeyData,\n    [],\n  );\n\n  const [togglePublicKeyDialog, PublicKeyDialog] = useConfirmDialog({\n    titleKey: t(\"publicKeys\").slice(0, -1),\n    messageKey: publicKey,\n    continueButtonLabel: \"close\",\n    continueButtonVariant: ButtonVariant.primary,\n    onConfirm: () => Promise.resolve(),\n  });\n\n  const [toggleCertificateDialog, CertificateDialog] = useConfirmDialog({\n    titleKey: t(\"certificate\"),\n    messageKey: certificate,\n    continueButtonLabel: \"close\",\n    continueButtonVariant: ButtonVariant.primary,\n    onConfirm: () => Promise.resolve(),\n  });\n\n  if (!keyData) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection variant=\"light\" padding={{ default: \"noPadding\" }}>\n      <PublicKeyDialog />\n      <CertificateDialog />\n      <KeycloakDataTable\n        isNotCompact\n        className=\"kc-keys-list\"\n        loader={filteredKeyData || keyData}\n        ariaLabelKey=\"keysList\"\n        searchPlaceholderKey=\"searchKey\"\n        searchTypeComponent={\n          <SelectFilter\n            onFilter={(filterType) =>\n              setFilteredKeyData(\n                filterType !== FILTER_OPTIONS[0]\n                  ? keyData!.filter(({ status }) => status === filterType)\n                  : undefined,\n              )\n            }\n          />\n        }\n        canSelectAll\n        columns={[\n          {\n            name: \"algorithm\",\n            displayKey: \"algorithm\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(15)],\n          },\n          {\n            name: \"type\",\n            displayKey: \"type\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"kid\",\n            displayKey: \"kid\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"use\",\n            displayKey: \"use\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"provider\",\n            displayKey: \"provider\",\n            cellRenderer: ({ provider }: KeyData) => provider || \"\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"validTo\",\n            displayKey: \"validTo\",\n            cellRenderer: ({ validTo }: KeyData) =>\n              validTo ? formatDate(new Date(validTo)) : \"\",\n            cellFormatters: [emptyFormatter()],\n            transforms: [cellWidth(10)],\n          },\n          {\n            name: \"publicKeys\",\n            displayKey: \"publicKeys\",\n            cellRenderer: ({ type, publicKey, certificate }: KeyData) => {\n              if (type === \"EC\") {\n                return (\n                  <Button\n                    onClick={() => {\n                      togglePublicKeyDialog();\n                      setPublicKey(publicKey!);\n                    }}\n                    variant=\"secondary\"\n                    id=\"kc-public-key\"\n                  >\n                    {t(\"publicKeys\").slice(0, -1)}\n                  </Button>\n                );\n              } else if (type === \"RSA\") {\n                return (\n                  <div className=\"button-wrapper\">\n                    <Button\n                      onClick={() => {\n                        togglePublicKeyDialog();\n                        setPublicKey(publicKey!);\n                      }}\n                      variant=\"secondary\"\n                      id={publicKey}\n                    >\n                      {t(\"publicKeys\").slice(0, -1)}\n                    </Button>\n                    <Button\n                      onClick={() => {\n                        toggleCertificateDialog();\n                        setCertificate(certificate!);\n                      }}\n                      variant=\"secondary\"\n                      id={certificate}\n                      className=\"kc-certificate\"\n                    >\n                      {t(\"certificate\")}\n                    </Button>\n                  </div>\n                );\n              } else return \"\";\n            },\n            cellFormatters: [],\n            transforms: [cellWidth(20)],\n          },\n        ]}\n        isSearching={!!filteredKeyData}\n        emptyState={\n          <ListEmptyState\n            hasIcon\n            message={t(\"noKeys\")}\n            instructions={t(\"noKeysDescription\")}\n            primaryActionText={t(\"addProvider\")}\n            onPrimaryAction={() =>\n              navigate(toKeysTab({ realm, tab: \"providers\" }))\n            }\n          />\n        }\n      />\n    </PageSection>\n  );\n};\n","import { Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { KeyProviderForm } from \"./KeyProviderForm\";\nimport type { ProviderType } from \"../../routes/KeyProvider\";\n\ntype KeyProviderModalProps = {\n  providerType: ProviderType;\n  onClose: () => void;\n};\n\nexport const KeyProviderModal = ({\n  providerType,\n  onClose,\n}: KeyProviderModalProps) => {\n  const { t } = useTranslation();\n  return (\n    <Modal\n      className=\"add-provider-modal\"\n      variant={ModalVariant.medium}\n      title={t(\"addProvider\")}\n      isOpen\n      onClose={onClose}\n    >\n      <KeyProviderForm providerType={providerType} onClose={onClose} />\n    </Modal>\n  );\n};\n","import {\n  DataList,\n  DataListCell,\n  DataListItem,\n  DataListItemCells,\n  DataListItemRow,\n  Modal,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { useServerInfo } from \"../../../context/server-info/ServerInfoProvider\";\nimport { KEY_PROVIDER_TYPE } from \"../../../util\";\n\ntype KeyProvidersPickerProps = {\n  onConfirm: (provider: string) => void;\n  onClose: () => void;\n};\n\nexport const KeyProvidersPicker = ({\n  onConfirm,\n  onClose,\n}: KeyProvidersPickerProps) => {\n  const { t } = useTranslation();\n  const serverInfo = useServerInfo();\n  const keyProviderComponentTypes =\n    serverInfo.componentTypes?.[KEY_PROVIDER_TYPE] ?? [];\n  return (\n    <Modal variant=\"medium\" title={t(\"addProvider\")} isOpen onClose={onClose}>\n      <DataList\n        onSelectDataListItem={(id) => {\n          onConfirm(id);\n        }}\n        aria-label={t(\"addPredefinedMappers\")}\n        isCompact\n      >\n        {keyProviderComponentTypes.map((provider) => (\n          <DataListItem\n            aria-label={provider.id}\n            key={provider.id}\n            id={provider.id}\n          >\n            <DataListItemRow>\n              <DataListItemCells\n                dataListCells={[\n                  <DataListCell\n                    key={`name-${provider.id}`}\n                    data-testid={`option-${provider.id}`}\n                  >\n                    {provider.id}\n                  </DataListCell>,\n                  <DataListCell width={2} key={`helpText-${provider.helpText}`}>\n                    {provider.helpText}\n                  </DataListCell>,\n                ]}\n              />\n            </DataListItemRow>\n          </DataListItem>\n        ))}\n      </DataList>\n    </Modal>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport type ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport type { KeyMetadataRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/keyMetadataRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  InputGroup,\n  PageSection,\n  TextInput,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport { KeyboardEvent, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { DraggableTable } from \"../../authentication/components/DraggableTable\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { KEY_PROVIDER_TYPE } from \"../../util\";\nimport useToggle from \"../../utils/useToggle\";\nimport { ProviderType, toKeyProvider } from \"../routes/KeyProvider\";\nimport { KeyProviderModal } from \"./key-providers/KeyProviderModal\";\nimport { KeyProvidersPicker } from \"./key-providers/KeyProvidersPicker\";\n\nimport \"../realm-settings-section.css\";\n\ntype ComponentData = KeyMetadataRepresentation & {\n  id?: string;\n  providerDescription?: string;\n  name?: string;\n  toggleHidden?: boolean;\n  config?: any;\n  parentId?: string;\n};\n\ntype KeysProvidersTabProps = {\n  realmComponents: ComponentRepresentation[];\n  refresh: () => void;\n};\n\nexport const KeysProvidersTab = ({\n  realmComponents,\n  refresh,\n}: KeysProvidersTabProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [searchVal, setSearchVal] = useState(\"\");\n  const [filteredComponents, setFilteredComponents] = useState<ComponentData[]>(\n    [],\n  );\n\n  const [isCreateModalOpen, handleModalToggle] = useToggle();\n  const serverInfo = useServerInfo();\n  const keyProviderComponentTypes =\n    serverInfo.componentTypes?.[KEY_PROVIDER_TYPE] ?? [];\n\n  const [providerOpen, toggleProviderOpen] = useToggle();\n  const [defaultUIDisplayName, setDefaultUIDisplayName] =\n    useState<ProviderType>();\n\n  const [selectedComponent, setSelectedComponent] =\n    useState<ComponentRepresentation>();\n\n  const components = useMemo(\n    () =>\n      realmComponents.map((component) => {\n        const provider = keyProviderComponentTypes.find(\n          (componentType: ComponentTypeRepresentation) =>\n            component.providerId === componentType.id,\n        );\n\n        return {\n          ...component,\n          providerDescription: provider?.helpText,\n        };\n      }),\n    [realmComponents],\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteProviderTitle\",\n    messageKey: t(\"deleteProviderConfirm\", {\n      provider: selectedComponent?.name,\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.components.del({\n          id: selectedComponent!.id!,\n          realm: realm,\n        });\n\n        refresh();\n\n        addAlert(t(\"deleteProviderSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"deleteProviderError\", error);\n      }\n    },\n  });\n\n  const onSearch = () => {\n    if (searchVal !== \"\") {\n      setSearchVal(searchVal);\n      const filteredComponents = components.filter(\n        (component) =>\n          component.name?.includes(searchVal) ||\n          component.providerId?.includes(searchVal),\n      );\n      setFilteredComponents(filteredComponents);\n    } else {\n      setSearchVal(\"\");\n      setFilteredComponents(components);\n    }\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      onSearch();\n    }\n  };\n\n  const handleInputChange = (value: string) => {\n    setSearchVal(value);\n  };\n\n  return (\n    <>\n      {providerOpen && (\n        <KeyProvidersPicker\n          onClose={() => toggleProviderOpen()}\n          onConfirm={(provider) => {\n            handleModalToggle();\n            setDefaultUIDisplayName(provider as ProviderType);\n            toggleProviderOpen();\n          }}\n        />\n      )}\n      {isCreateModalOpen && defaultUIDisplayName && (\n        <KeyProviderModal\n          providerType={defaultUIDisplayName}\n          onClose={() => {\n            handleModalToggle();\n            refresh();\n          }}\n        />\n      )}\n      <DeleteConfirm />\n      <PageSection variant=\"light\" padding={{ default: \"noPadding\" }}>\n        <Toolbar>\n          <ToolbarGroup className=\"providers-toolbar\">\n            <ToolbarItem>\n              <InputGroup>\n                <TextInput\n                  name={\"inputGroupName\"}\n                  id={\"inputGroupName\"}\n                  data-testid=\"provider-search-input\"\n                  type=\"search\"\n                  aria-label={t(\"search\")}\n                  placeholder={t(\"search\")}\n                  onChange={handleInputChange}\n                  onKeyDown={handleKeyDown}\n                />\n                <Button\n                  variant={ButtonVariant.control}\n                  aria-label={t(\"search\")}\n                  onClick={onSearch}\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroup>\n            </ToolbarItem>\n            <ToolbarItem>\n              <Button\n                data-testid=\"addProviderDropdown\"\n                className=\"add-provider-dropdown\"\n                onClick={() => toggleProviderOpen()}\n              >\n                {t(\"addProvider\")}\n              </Button>\n            </ToolbarItem>\n          </ToolbarGroup>\n        </Toolbar>\n        <DraggableTable\n          variant=\"compact\"\n          className=\"kc-draggable-table\"\n          keyField=\"id\"\n          data={\n            filteredComponents.length === 0 ? components : filteredComponents\n          }\n          onDragFinish={async (_, itemOrder) => {\n            const updateAll = components.map((component: ComponentData) => {\n              const componentToSave = { ...component };\n              delete componentToSave.providerDescription;\n\n              return adminClient.components.update(\n                { id: component.id! },\n                {\n                  ...componentToSave,\n                  config: {\n                    priority: [\n                      (\n                        itemOrder.length -\n                        itemOrder.indexOf(component.id!) +\n                        100\n                      ).toString(),\n                    ],\n                  },\n                },\n              );\n            });\n\n            try {\n              await Promise.all(updateAll);\n              refresh();\n              addAlert(t(\"saveProviderListSuccess\"), AlertVariant.success);\n            } catch (error) {\n              addError(\"saveProviderError\", error);\n            }\n          }}\n          columns={[\n            {\n              name: \"name\",\n              displayKey: \"name\",\n              cellRenderer: (component) => (\n                <Link\n                  key={component.name}\n                  data-testid=\"provider-name-link\"\n                  to={toKeyProvider({\n                    realm,\n                    id: component.id!,\n                    providerType: component.providerId as ProviderType,\n                  })}\n                >\n                  {component.name}\n                </Link>\n              ),\n            },\n            {\n              name: \"providerId\",\n              displayKey: \"provider\",\n            },\n            {\n              name: \"providerDescription\",\n              displayKey: \"providerDescription\",\n            },\n          ]}\n          actions={[\n            {\n              title: t(\"delete\"),\n              onClick: (_key, _idx, component) => {\n                setSelectedComponent(component as ComponentRepresentation);\n                toggleDeleteDialog();\n              },\n            },\n          ]}\n        />\n      </PageSection>\n    </>\n  );\n};\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport { Tab, TabTitleText } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../../components/routable-tabs/RoutableTabs\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { KEY_PROVIDER_TYPE } from \"../../util\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { KeySubTab, toKeysTab } from \"../routes/KeysTab\";\nimport { KeysListTab } from \"./KeysListTab\";\nimport { KeysProvidersTab } from \"./KeysProvidersTab\";\n\nconst sortByPriority = (components: ComponentRepresentation[]) => {\n  const sortedComponents = [...components].sort((a, b) => {\n    const priorityA = Number(a.config?.priority);\n    const priorityB = Number(b.config?.priority);\n\n    return (\n      (!isNaN(priorityB) ? priorityB : 0) - (!isNaN(priorityA) ? priorityA : 0)\n    );\n  });\n\n  return sortedComponents;\n};\n\nexport const KeysTab = () => {\n  const { t } = useTranslation();\n\n  const { realm: realmName } = useRealm();\n\n  const [realmComponents, setRealmComponents] =\n    useState<ComponentRepresentation[]>();\n  const [key, setKey] = useState(0);\n  const refresh = () => {\n    setKey(key + 1);\n  };\n\n  useFetch(\n    () =>\n      adminClient.components.find({\n        type: KEY_PROVIDER_TYPE,\n        realm: realmName,\n      }),\n    (components) => setRealmComponents(sortByPriority(components)),\n    [key],\n  );\n\n  const useTab = (tab: KeySubTab) =>\n    useRoutableTab(toKeysTab({ realm: realmName, tab }));\n\n  const listTab = useTab(\"list\");\n  const providersTab = useTab(\"providers\");\n\n  if (!realmComponents) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <RoutableTabs\n      mountOnEnter\n      unmountOnExit\n      defaultLocation={toKeysTab({ realm: realmName, tab: \"list\" })}\n    >\n      <Tab\n        id=\"keysList\"\n        data-testid=\"rs-keys-list-tab\"\n        aria-label=\"keys-list-subtab\"\n        title={<TabTitleText>{t(\"keysList\")}</TabTitleText>}\n        {...listTab}\n      >\n        <KeysListTab realmComponents={realmComponents} />\n      </Tab>\n      <Tab\n        id=\"providers\"\n        data-testid=\"rs-providers-tab\"\n        aria-label=\"rs-providers-tab\"\n        title={<TabTitleText>{t(\"providers\")}</TabTitleText>}\n        {...providersTab}\n      >\n        <KeysProvidersTab realmComponents={realmComponents} refresh={refresh} />\n      </Tab>\n    </RoutableTabs>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { Trans, useTranslation } from \"react-i18next\";\n\nimport { FormattedLink } from \"../../components/external-link/FormattedLink\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\ntype HelpLinkTextInputProps = {\n  fieldName: string;\n  url: string;\n};\n\nexport const HelpLinkTextInput = ({\n  fieldName,\n  url,\n}: HelpLinkTextInputProps) => {\n  const { t } = useTranslation();\n  const { register } = useFormContext();\n  const name = fieldName.substr(fieldName.indexOf(\".\") + 1);\n  return (\n    <FormGroup\n      label={t(name)}\n      fieldId={name}\n      labelIcon={\n        <HelpItem\n          helpText={\n            <Trans i18nKey={`${name}Help`}>\n              Default value prevents pages from being included\n              <FormattedLink href={url} title={t(\"learnMore\")} />\n            </Trans>\n          }\n          fieldLabelId={name}\n        />\n      }\n    >\n      <KeycloakTextInput id={name} {...register(fieldName)} />\n    </FormGroup>\n  );\n};\n","import { useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { ActionGroup, Button } from \"@patternfly/react-core\";\n\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpLinkTextInput } from \"./HelpLinkTextInput\";\nimport { convertToFormValues } from \"../../util\";\n\nimport \"./security-defences.css\";\n\ntype HeadersFormProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const HeadersForm = ({ realm, save }: HeadersFormProps) => {\n  const { t } = useTranslation();\n  const form = useForm();\n  const {\n    setValue,\n    formState: { isDirty },\n    handleSubmit,\n  } = form;\n\n  const setupForm = () => convertToFormValues(realm, setValue);\n  useEffect(setupForm, []);\n\n  return (\n    <FormProvider {...form}>\n      <FormAccess\n        isHorizontal\n        role=\"manage-realm\"\n        className=\"keycloak__security-defences__form\"\n        onSubmit={handleSubmit(save)}\n      >\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.xFrameOptions\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.contentSecurityPolicy\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.contentSecurityPolicyReportOnly\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.xContentTypeOptions\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.xRobotsTag\"\n          url=\"https://developers.google.com/search/docs/advanced/robots/robots_meta_tag\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.xXSSProtection\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.strictTransportSecurity\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security\"\n        />\n        <HelpLinkTextInput\n          fieldName=\"browserSecurityHeaders.referrerPolicy\"\n          url=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\"\n        />\n\n        <ActionGroup>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"headers-form-tab-save\"\n            isDisabled={!isDirty}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button variant=\"link\" onClick={setupForm}>\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </FormProvider>\n  );\n};\n","import { FormGroup, ValidatedOptions } from \"@patternfly/react-core\";\nimport { CSSProperties } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\n\nexport const Time = ({\n  name,\n  style,\n}: {\n  name: string;\n  style?: CSSProperties;\n}) => {\n  const { t } = useTranslation();\n  const {\n    control,\n    formState: { errors },\n  } = useFormContext();\n  return (\n    <FormGroup\n      style={style}\n      label={t(name)}\n      fieldId={name}\n      labelIcon={<HelpItem helpText={t(`${name}Help`)} fieldLabelId={name} />}\n      validated={\n        errors[name] ? ValidatedOptions.error : ValidatedOptions.default\n      }\n      helperTextInvalid={t(\"required\")}\n    >\n      <Controller\n        name={name}\n        defaultValue=\"\"\n        control={control}\n        rules={{ required: true }}\n        render={({ field }) => (\n          <TimeSelector\n            data-testid={name}\n            value={field.value}\n            onChange={field.onChange}\n            validated={\n              errors[name] ? ValidatedOptions.error : ValidatedOptions.default\n            }\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  NumberInput,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { convertToFormValues } from \"../../util\";\nimport { Time } from \"./Time\";\n\ntype BruteForceDetectionProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const BruteForceDetection = ({\n  realm,\n  save,\n}: BruteForceDetectionProps) => {\n  const { t } = useTranslation();\n  const form = useForm();\n  const {\n    setValue,\n    handleSubmit,\n    control,\n    formState: { isDirty },\n  } = form;\n\n  const enable = useWatch({\n    control,\n    name: \"bruteForceProtected\",\n  });\n\n  const permanentLockout = useWatch({\n    control,\n    name: \"permanentLockout\",\n  });\n\n  const setupForm = () => convertToFormValues(realm, setValue);\n  useEffect(setupForm, []);\n\n  return (\n    <FormProvider {...form}>\n      <FormAccess\n        role=\"manage-realm\"\n        isHorizontal\n        onSubmit={handleSubmit(save)}\n      >\n        <FormGroup\n          label={t(\"enabled\")}\n          fieldId=\"bruteForceProtected\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"bruteForceProtected\"\n            defaultValue={false}\n            control={control}\n            render={({ field }) => (\n              <Switch\n                id=\"bruteForceProtected\"\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                isChecked={field.value}\n                onChange={field.onChange}\n              />\n            )}\n          />\n        </FormGroup>\n        {enable && (\n          <>\n            <FormGroup\n              label={t(\"failureFactor\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"failureFactorHelp\")}\n                  fieldLabelId=\"failureFactor\"\n                />\n              }\n              fieldId=\"failureFactor\"\n            >\n              <Controller\n                name=\"failureFactor\"\n                defaultValue={0}\n                control={control}\n                rules={{ required: true }}\n                render={({ field }) => (\n                  <NumberInput\n                    type=\"text\"\n                    id=\"failureFactor\"\n                    value={field.value}\n                    onPlus={() => field.onChange(field.value + 1)}\n                    onMinus={() => field.onChange(field.value - 1)}\n                    onChange={(event) =>\n                      field.onChange(\n                        Number((event.target as HTMLInputElement).value),\n                      )\n                    }\n                  />\n                )}\n              />\n            </FormGroup>\n            <FormGroup\n              label={t(\"permanentLockout\")}\n              fieldId=\"permanentLockout\"\n              hasNoPaddingTop\n            >\n              <Controller\n                name=\"permanentLockout\"\n                defaultValue={false}\n                control={control}\n                render={({ field }) => (\n                  <Switch\n                    id=\"permanentLockout\"\n                    label={t(\"on\")}\n                    labelOff={t(\"off\")}\n                    isChecked={field.value}\n                    onChange={field.onChange}\n                    aria-label={t(\"permanentLockout\")}\n                  />\n                )}\n              />\n            </FormGroup>\n\n            {!permanentLockout && (\n              <>\n                <Time name=\"waitIncrementSeconds\" />\n                <Time name=\"maxFailureWaitSeconds\" />\n                <Time name=\"maxDeltaTimeSeconds\" />\n              </>\n            )}\n\n            <FormGroup\n              label={t(\"quickLoginCheckMilliSeconds\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"quickLoginCheckMilliSecondsHelp\")}\n                  fieldLabelId=\"quickLoginCheckMilliSeconds\"\n                />\n              }\n              fieldId=\"quickLoginCheckMilliSeconds\"\n            >\n              <Controller\n                name=\"quickLoginCheckMilliSeconds\"\n                defaultValue={0}\n                control={control}\n                render={({ field }) => (\n                  <NumberInput\n                    type=\"text\"\n                    id=\"quickLoginCheckMilliSeconds\"\n                    value={field.value}\n                    onPlus={() => field.onChange(field.value + 1)}\n                    onMinus={() => field.onChange(field.value - 1)}\n                    onChange={(event) =>\n                      field.onChange(\n                        Number((event.target as HTMLInputElement).value),\n                      )\n                    }\n                  />\n                )}\n              />\n            </FormGroup>\n\n            <Time name=\"minimumQuickLoginWaitSeconds\" />\n          </>\n        )}\n\n        <ActionGroup>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"brute-force-tab-save\"\n            isDisabled={!isDirty}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button variant=\"link\" onClick={setupForm}>\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </FormProvider>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { PageSection, Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\n\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { HeadersForm } from \"./HeadersForm\";\nimport { BruteForceDetection } from \"./BruteForceDetection\";\n\ntype SecurityDefensesProps = {\n  realm: RealmRepresentation;\n  save: (realm: RealmRepresentation) => void;\n};\n\nexport const SecurityDefenses = ({ realm, save }: SecurityDefensesProps) => {\n  const { t } = useTranslation();\n  const [activeTab, setActiveTab] = useState(10);\n  return (\n    <Tabs\n      activeKey={activeTab}\n      onSelect={(_, key) => setActiveTab(key as number)}\n    >\n      <Tab\n        id=\"headers\"\n        eventKey={10}\n        title={<TabTitleText>{t(\"headers\")}</TabTitleText>}\n      >\n        <PageSection variant=\"light\">\n          <HeadersForm realm={realm} save={save} />\n        </PageSection>\n      </Tab>\n      <Tab\n        id=\"bruteForce\"\n        eventKey={20}\n        title={<TabTitleText>{t(\"bruteForceDetection\")}</TabTitleText>}\n      >\n        <PageSection variant=\"light\">\n          <BruteForceDetection realm={realm} save={save} />\n        </PageSection>\n      </Tab>\n    </Tabs>\n  );\n};\n","import type { UserProfileGroup } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport {\n  Button,\n  ButtonVariant,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toEditAttributesGroup } from \"../routes/EditAttributesGroup\";\nimport { toNewAttributesGroup } from \"../routes/NewAttributesGroup\";\nimport { useUserProfile } from \"./UserProfileContext\";\n\nexport const AttributesGroupTab = () => {\n  const { config, save } = useUserProfile();\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n  const [key, setKey] = useState(0);\n  const [groupToDelete, setGroupToDelete] = useState<UserProfileGroup>();\n\n  // Refresh data in table when config changes.\n  useEffect(() => setKey((value) => value + 1), [config]);\n\n  async function loader() {\n    return config?.groups ?? [];\n  }\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteDialogTitle\",\n    children: (\n      <Trans i18nKey=\"deleteDialogDescription\">\n        {\" \"}\n        <strong>{{ group: groupToDelete?.name }}</strong>.\n      </Trans>\n    ),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm() {\n      const groups = (config?.groups ?? []).filter(\n        (group) => group !== groupToDelete,\n      );\n\n      save(\n        { ...config, groups },\n        {\n          successMessageKey: \"deleteSuccess\",\n          errorMessageKey: \"deleteAttributeGroupError\",\n        },\n      );\n    },\n  });\n\n  function deleteAttributeGroup(group: UserProfileGroup) {\n    setGroupToDelete(group);\n    toggleDeleteDialog();\n  }\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <DeleteConfirm />\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        ariaLabelKey=\"tableTitle\"\n        toolbarItem={\n          <ToolbarItem>\n            <Button\n              component={(props) => (\n                <Link {...props} to={toNewAttributesGroup({ realm })} />\n              )}\n            >\n              {t(\"createGroupText\")}\n            </Button>\n          </ToolbarItem>\n        }\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"columnName\",\n            cellRenderer: (group) => (\n              <Link to={toEditAttributesGroup({ realm, name: group.name! })}>\n                {group.name}\n              </Link>\n            ),\n          },\n          {\n            name: \"displayHeader\",\n            displayKey: \"columnDisplayName\",\n          },\n          {\n            name: \"displayDescription\",\n            displayKey: \"columnDisplayDescription\",\n          },\n        ]}\n        actions={[\n          {\n            title: t(\"delete\"),\n            onRowClick: deleteAttributeGroup,\n          } as Action<UserProfileGroup>,\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyStateMessage\")}\n            instructions={t(\"emptyStateInstructions\")}\n            primaryActionText={t(\"createGroupText\")}\n            onPrimaryAction={() => navigate(toNewAttributesGroup({ realm }))}\n          />\n        }\n      />\n    </PageSection>\n  );\n};\n","import type { UserProfileAttribute } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport {\n  Button,\n  ButtonVariant,\n  Divider,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { uniqBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { DraggableTable } from \"../../authentication/components/DraggableTable\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toAddAttribute } from \"../routes/AddAttribute\";\nimport { toAttribute } from \"../routes/Attribute\";\nimport { useUserProfile } from \"./UserProfileContext\";\n\nconst RESTRICTED_ATTRIBUTES = [\"username\", \"email\"];\n\ntype movedAttributeType = UserProfileAttribute;\n\nexport const AttributesTab = () => {\n  const { config, save } = useUserProfile();\n  const { realm: realmName } = useRealm();\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const [filter, setFilter] = useState(\"allGroups\");\n  const [isFilterTypeDropdownOpen, toggleIsFilterTypeDropdownOpen] =\n    useToggle();\n  const [data, setData] = useState(config?.attributes);\n  const [attributeToDelete, setAttributeToDelete] = useState(\"\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteAttributeConfirmTitle\"),\n    messageKey: t(\"deleteAttributeConfirm\", {\n      attributeName: attributeToDelete,\n    }),\n    continueButtonLabel: t(\"delete\"),\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      if (!config?.attributes) return;\n\n      const updatedAttributes = config.attributes.filter(\n        (attribute) => attribute.name !== attributeToDelete,\n      );\n\n      save(\n        { attributes: updatedAttributes!, groups: config.groups },\n        {\n          successMessageKey: \"deleteAttributeSuccess\",\n          errorMessageKey: \"deleteAttributeError\",\n        },\n      );\n      setAttributeToDelete(\"\");\n    },\n  });\n\n  if (!config) {\n    return <KeycloakSpinner />;\n  }\n\n  const attributes = config.attributes ?? [];\n  const groups = config.groups ?? [];\n\n  const executeMove = async (\n    attribute: UserProfileAttribute,\n    newIndex: number,\n  ) => {\n    const fromIndex = attributes.findIndex((attr) => {\n      return attr.name === attribute.name;\n    });\n\n    let movedAttribute: movedAttributeType = {};\n    movedAttribute = attributes[fromIndex];\n    attributes.splice(fromIndex, 1);\n    attributes.splice(newIndex, 0, movedAttribute);\n\n    save(\n      { attributes, groups },\n      {\n        successMessageKey: \"updatedUserProfileSuccess\",\n        errorMessageKey: \"updatedUserProfileError\",\n      },\n    );\n  };\n\n  const cellFormatter = (row: UserProfileAttribute) => (\n    <Link\n      to={toAttribute({\n        realm: realmName,\n        attributeName: row.name!,\n      })}\n      key={row.name}\n    >\n      {row.name}\n    </Link>\n  );\n\n  return (\n    <>\n      <Toolbar>\n        <ToolbarContent>\n          <ToolbarItem>\n            <Select\n              width={200}\n              data-testid=\"filter-select\"\n              isOpen={isFilterTypeDropdownOpen}\n              variant={SelectVariant.single}\n              onToggle={toggleIsFilterTypeDropdownOpen}\n              toggleIcon={<FilterIcon />}\n              onSelect={(_, value) => {\n                const filter = value.toString();\n                setFilter(filter);\n                setData(\n                  filter === \"allGroups\"\n                    ? attributes\n                    : attributes.filter((attr) => attr.group === filter),\n                );\n                toggleIsFilterTypeDropdownOpen();\n              }}\n              selections={filter === \"allGroups\" ? t(filter) : filter}\n            >\n              {[\n                <SelectOption\n                  key=\"allGroups\"\n                  data-testid=\"all-groups\"\n                  value=\"allGroups\"\n                >\n                  {t(\"allGroups\")}\n                </SelectOption>,\n                ...uniqBy(\n                  attributes.filter((attr) => !!attr.group),\n                  \"group\",\n                ).map((attr) => (\n                  <SelectOption\n                    key={attr.group}\n                    data-testid={`${attr.group}-option`}\n                    value={attr.group}\n                  />\n                )),\n              ]}\n            </Select>\n          </ToolbarItem>\n          <ToolbarItem className=\"kc-toolbar-attributesTab\">\n            <Button\n              data-testid=\"createAttributeBtn\"\n              variant=\"primary\"\n              component={(props) => (\n                <Link {...props} to={toAddAttribute({ realm: realmName })} />\n              )}\n            >\n              {t(\"createAttribute\")}\n            </Button>\n          </ToolbarItem>\n        </ToolbarContent>\n      </Toolbar>\n      <Divider />\n      <DeleteConfirm />\n      <DraggableTable\n        keyField=\"name\"\n        onDragFinish={async (nameDragged, items) => {\n          const keys = attributes.map((e) => e.name);\n          const newIndex = items.indexOf(nameDragged);\n          const oldIndex = keys.indexOf(nameDragged);\n          const dragged = attributes[oldIndex];\n          if (!dragged.name) return;\n\n          executeMove(dragged, newIndex);\n        }}\n        actions={[\n          {\n            title: t(\"edit\"),\n            onClick: (_key, _idx, component) => {\n              navigate(\n                toAttribute({\n                  realm: realmName,\n                  attributeName: component.name,\n                }),\n              );\n            },\n          },\n          {\n            title: t(\"delete\"),\n            isActionable: ({ name }) => !RESTRICTED_ATTRIBUTES.includes(name!),\n            onClick: (_key, _idx, component) => {\n              setAttributeToDelete(component.name);\n              toggleDeleteDialog();\n            },\n          },\n        ]}\n        columns={[\n          {\n            name: \"name\",\n            displayKey: t(\"attributeName\"),\n            cellRenderer: cellFormatter,\n          },\n          {\n            name: \"displayName\",\n            displayKey: t(\"attributeDisplayName\"),\n          },\n          {\n            name: \"group\",\n            displayKey: t(\"attributeGroup\"),\n          },\n        ]}\n        data={data ?? attributes}\n      />\n    </>\n  );\n};\n","import { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport { ActionGroup, Button, Form, PageSection } from \"@patternfly/react-core\";\nimport type { editor } from \"monaco-editor\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { prettyPrintJSON } from \"../../util\";\nimport { useUserProfile } from \"./UserProfileContext\";\n\nexport const JsonEditorTab = () => {\n  const { config, save, isSaving } = useUserProfile();\n  const { t } = useTranslation();\n  const { addError } = useAlerts();\n  const [editor, setEditor] = useState<editor.IStandaloneCodeEditor>();\n\n  useEffect(() => resetCode(), [config, editor]);\n\n  function resetCode() {\n    editor?.setValue(config ? prettyPrintJSON(config) : \"\");\n  }\n\n  async function handleSave() {\n    const value = editor?.getValue();\n\n    if (!value) {\n      return;\n    }\n\n    try {\n      await save(JSON.parse(value));\n    } catch (error) {\n      addError(\"invalidJsonError\", error);\n      return;\n    }\n  }\n\n  return (\n    <PageSection variant=\"light\">\n      <CodeEditor\n        language={Language.json}\n        height=\"30rem\"\n        onEditorDidMount={(editor) => setEditor(editor)}\n        isLanguageLabelVisible\n      />\n      <Form>\n        <ActionGroup>\n          <Button\n            data-testid=\"save\"\n            variant=\"primary\"\n            onClick={handleSave}\n            isDisabled={isSaving}\n          >\n            {t(\"save\")}\n          </Button>\n          <Button variant=\"link\" onClick={resetCode} isDisabled={isSaving}>\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </Form>\n    </PageSection>\n  );\n};\n","import { Tab, TabTitleText } from \"@patternfly/react-core\";\n\nimport { useTranslation } from \"react-i18next\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../../components/routable-tabs/RoutableTabs\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport {\n  toUserProfile,\n  UserProfileTab as IUserProfileTab,\n} from \"../routes/UserProfile\";\nimport { AttributesGroupTab } from \"./AttributesGroupTab\";\nimport { AttributesTab } from \"./AttributesTab\";\nimport { JsonEditorTab } from \"./JsonEditorTab\";\nimport { UserProfileProvider } from \"./UserProfileContext\";\n\nexport const UserProfileTab = () => {\n  const { realm } = useRealm();\n  const { t } = useTranslation();\n\n  const useTab = (tab: IUserProfileTab) =>\n    useRoutableTab(toUserProfile({ realm, tab }));\n\n  const attributesTab = useTab(\"attributes\");\n  const attributesGroupTab = useTab(\"attributes-group\");\n  const jsonEditorTab = useTab(\"json-editor\");\n\n  return (\n    <UserProfileProvider>\n      <RoutableTabs\n        defaultLocation={toUserProfile({ realm, tab: \"attributes\" })}\n        mountOnEnter\n      >\n        <Tab\n          title={<TabTitleText>{t(\"attributes\")}</TabTitleText>}\n          data-testid=\"attributesTab\"\n          {...attributesTab}\n        >\n          <AttributesTab />\n        </Tab>\n        <Tab\n          title={<TabTitleText>{t(\"attributesGroup\")}</TabTitleText>}\n          data-testid=\"attributesGroupTab\"\n          {...attributesGroupTab}\n        >\n          <AttributesGroupTab />\n        </Tab>\n        <Tab\n          title={<TabTitleText>{t(\"jsonEditor\")}</TabTitleText>}\n          data-testid=\"jsonEditorTab\"\n          {...jsonEditorTab}\n        >\n          <JsonEditorTab />\n        </Tab>\n      </RoutableTabs>\n    </UserProfileProvider>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  DropdownItem,\n  DropdownSeparator,\n  PageSection,\n  Tab,\n  TabTitleText,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useAccess } from \"../context/access/Access\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../components/confirm-dialog/ConfirmDialog\";\nimport type { KeyValueType } from \"../components/key-value-form/key-value-convert\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useRealms } from \"../context/RealmsContext\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { toDashboard } from \"../dashboard/routes/Dashboard\";\nimport environment from \"../environment\";\nimport helpUrls from \"../help-urls\";\nimport { convertFormValuesToObject, convertToFormValues } from \"../util\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport { RealmSettingsEmailTab } from \"./EmailTab\";\nimport { RealmSettingsGeneralTab } from \"./GeneralTab\";\nimport { LocalizationTab } from \"./LocalizationTab\";\nimport { RealmSettingsLoginTab } from \"./LoginTab\";\nimport { PartialExportDialog } from \"./PartialExport\";\nimport { PartialImportDialog } from \"./PartialImport\";\nimport { PoliciesTab } from \"./PoliciesTab\";\nimport ProfilesTab from \"./ProfilesTab\";\nimport { RealmSettingsSessionsTab } from \"./SessionsTab\";\nimport { RealmSettingsThemesTab } from \"./ThemesTab\";\nimport { RealmSettingsTokensTab } from \"./TokensTab\";\nimport { UserRegistration } from \"./UserRegistration\";\nimport { EventsTab } from \"./event-config/EventsTab\";\nimport { KeysTab } from \"./keys/KeysTab\";\nimport { ClientPoliciesTab, toClientPolicies } from \"./routes/ClientPolicies\";\nimport { RealmSettingsTab, toRealmSettings } from \"./routes/RealmSettings\";\nimport { SecurityDefenses } from \"./security-defences/SecurityDefenses\";\nimport { UserProfileTab } from \"./user-profile/UserProfileTab\";\n\ntype RealmSettingsHeaderProps = {\n  onChange: (value: boolean) => void;\n  value: boolean;\n  save: () => void;\n  realmName: string;\n  refresh: () => void;\n};\n\nconst RealmSettingsHeader = ({\n  save,\n  onChange,\n  value,\n  realmName,\n  refresh,\n}: RealmSettingsHeaderProps) => {\n  const { t } = useTranslation();\n  const { refresh: refreshRealms } = useRealms();\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const [partialImportOpen, setPartialImportOpen] = useState(false);\n  const [partialExportOpen, setPartialExportOpen] = useState(false);\n\n  const { hasAccess } = useAccess();\n  const canManageRealm = hasAccess(\"manage-realm\");\n\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"disableConfirmTitle\",\n    messageKey: \"disableConfirmRealm\",\n    continueButtonLabel: \"disable\",\n    onConfirm: () => {\n      onChange(!value);\n      save();\n    },\n  });\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteConfirmTitle\",\n    messageKey: \"deleteConfirmRealmSetting\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.realms.del({ realm: realmName });\n        addAlert(t(\"deletedSuccessRealmSetting\"), AlertVariant.success);\n        await refreshRealms();\n        navigate(toDashboard({ realm: environment.masterRealm }));\n        refresh();\n      } catch (error) {\n        addError(\"deleteErrorRealmSetting\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <DisableConfirm />\n      <DeleteConfirm />\n      <PartialImportDialog\n        open={partialImportOpen}\n        toggleDialog={() => setPartialImportOpen(!partialImportOpen)}\n      />\n      <PartialExportDialog\n        isOpen={partialExportOpen}\n        onClose={() => setPartialExportOpen(false)}\n      />\n      <ViewHeader\n        titleKey={realmName}\n        subKey=\"realmSettingsExplain\"\n        helpUrl={helpUrls.realmSettingsUrl}\n        divider={false}\n        dropdownItems={[\n          <DropdownItem\n            key=\"import\"\n            data-testid=\"openPartialImportModal\"\n            isDisabled={!canManageRealm}\n            onClick={() => {\n              setPartialImportOpen(true);\n            }}\n          >\n            {t(\"partialImport\")}\n          </DropdownItem>,\n          <DropdownItem\n            key=\"export\"\n            data-testid=\"openPartialExportModal\"\n            isDisabled={!canManageRealm}\n            onClick={() => setPartialExportOpen(true)}\n          >\n            {t(\"partialExport\")}\n          </DropdownItem>,\n          <DropdownSeparator key=\"separator\" />,\n          <DropdownItem\n            key=\"delete\"\n            isDisabled={!canManageRealm}\n            onClick={toggleDeleteDialog}\n          >\n            {t(\"delete\")}\n          </DropdownItem>,\n        ]}\n        isEnabled={value}\n        isReadOnly={!canManageRealm}\n        onToggle={(value) => {\n          if (!value) {\n            toggleDisableDialog();\n          } else {\n            onChange(value);\n            save();\n          }\n        }}\n      />\n    </>\n  );\n};\n\ntype RealmSettingsTabsProps = {\n  realm: RealmRepresentation;\n  refresh: () => void;\n};\n\nexport const RealmSettingsTabs = ({\n  realm,\n  refresh,\n}: RealmSettingsTabsProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n  const { refresh: refreshRealms } = useRealms();\n  const navigate = useNavigate();\n  const isFeatureEnabled = useIsFeatureEnabled();\n\n  const { control, setValue, getValues } = useForm({\n    mode: \"onChange\",\n  });\n  const [key, setKey] = useState(0);\n\n  const refreshHeader = () => {\n    setKey(key + 1);\n  };\n\n  const setupForm = (r: RealmRepresentation = realm) => {\n    convertToFormValues(r, setValue);\n  };\n\n  useEffect(setupForm, [setValue, realm]);\n\n  const save = async (r: RealmRepresentation) => {\n    r = convertFormValuesToObject(r);\n    if (\n      r.attributes?.[\"acr.loa.map\"] &&\n      typeof r.attributes[\"acr.loa.map\"] !== \"string\"\n    ) {\n      r.attributes[\"acr.loa.map\"] = JSON.stringify(\n        Object.fromEntries(\n          (r.attributes[\"acr.loa.map\"] as KeyValueType[])\n            .filter(({ key }) => key !== \"\")\n            .map(({ key, value }) => [key, value]),\n        ),\n      );\n    }\n\n    try {\n      const savedRealm: RealmRepresentation = {\n        ...realm,\n        ...r,\n        id: r.realm,\n      };\n\n      // For the default value, null is expected instead of an empty string.\n      if (savedRealm.smtpServer?.port === \"\") {\n        savedRealm.smtpServer = { ...savedRealm.smtpServer, port: null };\n      }\n      await adminClient.realms.update({ realm: realmName }, savedRealm);\n      addAlert(t(\"realmSaveSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"realmSaveError\", error);\n    }\n\n    const isRealmRenamed = realmName !== (r.realm || realm.realm);\n    if (isRealmRenamed) {\n      await refreshRealms();\n      navigate(toRealmSettings({ realm: r.realm!, tab: \"general\" }));\n    }\n    refresh();\n  };\n\n  const useTab = (tab: RealmSettingsTab) =>\n    useRoutableTab(toRealmSettings({ realm: realmName, tab }));\n\n  const generalTab = useTab(\"general\");\n  const loginTab = useTab(\"login\");\n  const emailTab = useTab(\"email\");\n  const themesTab = useTab(\"themes\");\n  const keysTab = useTab(\"keys\");\n  const eventsTab = useTab(\"events\");\n  const localizationTab = useTab(\"localization\");\n  const securityDefensesTab = useTab(\"security-defenses\");\n  const sessionsTab = useTab(\"sessions\");\n  const tokensTab = useTab(\"tokens\");\n  const clientPoliciesTab = useTab(\"client-policies\");\n  const userProfileTab = useTab(\"user-profile\");\n  const userRegistrationTab = useTab(\"user-registration\");\n\n  const useClientPoliciesTab = (tab: ClientPoliciesTab) =>\n    useRoutableTab(\n      toClientPolicies({\n        realm: realmName,\n        tab,\n      }),\n    );\n\n  const clientPoliciesProfilesTab = useClientPoliciesTab(\"profiles\");\n  const clientPoliciesPoliciesTab = useClientPoliciesTab(\"policies\");\n\n  return (\n    <>\n      <Controller\n        name=\"enabled\"\n        defaultValue={true}\n        control={control}\n        render={({ field }) => (\n          <RealmSettingsHeader\n            value={field.value}\n            onChange={field.onChange}\n            realmName={realmName}\n            refresh={refreshHeader}\n            save={() => save(getValues())}\n          />\n        )}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs\n          isBox\n          mountOnEnter\n          aria-label=\"realm-settings-tabs\"\n          defaultLocation={toRealmSettings({\n            realm: realmName,\n            tab: \"general\",\n          })}\n        >\n          <Tab\n            title={<TabTitleText>{t(\"general\")}</TabTitleText>}\n            data-testid=\"rs-general-tab\"\n            {...generalTab}\n          >\n            <RealmSettingsGeneralTab realm={realm} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"login\")}</TabTitleText>}\n            data-testid=\"rs-login-tab\"\n            {...loginTab}\n          >\n            <RealmSettingsLoginTab refresh={refresh} realm={realm} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"email\")}</TabTitleText>}\n            data-testid=\"rs-email-tab\"\n            {...emailTab}\n          >\n            <RealmSettingsEmailTab realm={realm} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"themes\")}</TabTitleText>}\n            data-testid=\"rs-themes-tab\"\n            {...themesTab}\n          >\n            <RealmSettingsThemesTab realm={realm} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"keys\")}</TabTitleText>}\n            data-testid=\"rs-keys-tab\"\n            {...keysTab}\n          >\n            <KeysTab />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"events\")}</TabTitleText>}\n            data-testid=\"rs-realm-events-tab\"\n            {...eventsTab}\n          >\n            <EventsTab realm={realm} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"localization\")}</TabTitleText>}\n            data-testid=\"rs-localization-tab\"\n            {...localizationTab}\n          >\n            <LocalizationTab\n              key={key}\n              refresh={refresh}\n              save={save}\n              realm={realm}\n            />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"securityDefences\")}</TabTitleText>}\n            data-testid=\"rs-security-defenses-tab\"\n            {...securityDefensesTab}\n          >\n            <SecurityDefenses realm={realm} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"sessions\")}</TabTitleText>}\n            data-testid=\"rs-sessions-tab\"\n            {...sessionsTab}\n          >\n            <RealmSettingsSessionsTab key={key} realm={realm} save={save} />\n          </Tab>\n          <Tab\n            title={<TabTitleText>{t(\"tokens\")}</TabTitleText>}\n            data-testid=\"rs-tokens-tab\"\n            {...tokensTab}\n          >\n            <RealmSettingsTokensTab save={save} realm={realm} />\n          </Tab>\n          {isFeatureEnabled(Feature.ClientPolicies) && (\n            <Tab\n              title={<TabTitleText>{t(\"clientPolicies\")}</TabTitleText>}\n              data-testid=\"rs-clientPolicies-tab\"\n              {...clientPoliciesTab}\n            >\n              <RoutableTabs\n                mountOnEnter\n                defaultLocation={toClientPolicies({\n                  realm: realmName,\n                  tab: \"profiles\",\n                })}\n              >\n                <Tab\n                  id=\"profiles\"\n                  data-testid=\"rs-policies-clientProfiles-tab\"\n                  aria-label={t(\"clientProfilesSubTab\")}\n                  title={<TabTitleText>{t(\"profiles\")}</TabTitleText>}\n                  tooltip={\n                    <Tooltip content={t(\"clientPoliciesProfilesHelpText\")} />\n                  }\n                  {...clientPoliciesProfilesTab}\n                >\n                  <ProfilesTab />\n                </Tab>\n                <Tab\n                  id=\"policies\"\n                  data-testid=\"rs-policies-clientPolicies-tab\"\n                  aria-label={t(\"clientPoliciesSubTab\")}\n                  {...clientPoliciesPoliciesTab}\n                  title={<TabTitleText>{t(\"policies\")}</TabTitleText>}\n                  tooltip={\n                    <Tooltip content={t(\"clientPoliciesPoliciesHelpText\")} />\n                  }\n                >\n                  <PoliciesTab />\n                </Tab>\n              </RoutableTabs>\n            </Tab>\n          )}\n          {isFeatureEnabled(Feature.DeclarativeUserProfile) &&\n            realm.attributes?.userProfileEnabled === \"true\" && (\n              <Tab\n                title={<TabTitleText>{t(\"userProfile\")}</TabTitleText>}\n                data-testid=\"rs-user-profile-tab\"\n                {...userProfileTab}\n              >\n                <UserProfileTab />\n              </Tab>\n            )}\n          <Tab\n            title={<TabTitleText>{t(\"userRegistration\")}</TabTitleText>}\n            data-testid=\"rs-userRegistration-tab\"\n            {...userRegistrationTab}\n          >\n            <UserRegistration />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n};\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport { useState } from \"react\";\n\nimport { adminClient } from \"../admin-client\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { useParams } from \"../utils/useParams\";\nimport { RealmSettingsTabs } from \"./RealmSettingsTabs\";\nimport type { RealmSettingsParams } from \"./routes/RealmSettings\";\n\nexport default function RealmSettingsSection() {\n  const { realm: realmName } = useParams<RealmSettingsParams>();\n  const [realm, setRealm] = useState<RealmRepresentation>();\n  const [key, setKey] = useState(0);\n\n  const refresh = () => {\n    setKey(key + 1);\n    setRealm(undefined);\n  };\n\n  useFetch(() => adminClient.realms.findOne({ realm: realmName }), setRealm, [\n    key,\n  ]);\n\n  if (!realm) {\n    return <KeycloakSpinner />;\n  }\n  return <RealmSettingsTabs realm={realm} refresh={refresh} />;\n}\n"],"names":["uniqWith","array","comparator","baseUniq","EditableTextCell","value","rowIndex","cellIndex","props","handleTextInputChange","inputAriaLabel","isDisabled","React","inlineStyles","TextInput","newValue","event","css","formStyles","useCurrentUser","whoAmI","useWhoAmI","currentUser","setCurrentUser","useState","userId","useFetch","adminClient","RealmSettingsEmailTab","realm","save","useTranslation","realmName","useRealm","addAlert","addError","useAlerts","register","control","handleSubmit","watch","resetForm","getValues","errors","useForm","reset","watchFromValue","watchHostValue","isTesting","toggleTest","useToggle","authenticationEnabled","useWatch","testConnection","toNumber","toBoolean","valueMapper","serverSettings","key","mapperFn","AlertVariant","error","jsxs","PageSection","jsx","FormPanel","FormAccess","FormGroup","KeycloakTextInput","emailRegexPattern","HelpItem","Controller","field","Checkbox","Switch","Fragment","PasswordInput","Alert","AlertActionLink","Link","toUser","ActionGroup","ActionListItem","Button","RealmSettingsGeneralTab","form","setValue","isDirty","isFeatureEnabled","useIsFeatureEnabled","open","setOpen","requireSslTypes","setupForm","convertToFormValues","result","convertAttributeNameToForm","useEffect","ClipboardCopy","Select","_","SelectVariant","sslType","SelectOption","FormProvider","KeyValueInput","Feature","Stack","StackItem","FormattedLink","addTrailingSlash","AddMessageBundleModal","handleModalToggle","t","Modal","ModalVariant","ButtonVariant","Form","ValidatedOptions","localeToDisplayName","locale","LocalizationTab","addMessageBundleModalOpen","setAddMessageBundleModalOpen","supportedLocalesOpen","setSupportedLocalesOpen","defaultLocaleOpen","setDefaultLocaleOpen","filterDropdownOpen","setFilterDropdownOpen","selectMenuLocale","setSelectMenuLocale","DEFAULT_LOCALE","formState","selectMenuValueSelected","setSelectMenuValueSelected","messageBundles","setMessageBundles","tableRows","setTableRows","themeTypes","useServerInfo","allLocales","useMemo","locales","theme","bundleForm","currentRealm","localeSort","useLocaleSort","defaultSupportedLocales","watchSupportedLocales","internationalizationEnabled","tableKey","setTableKey","max","setMax","first","setFirst","filter","setFilter","refreshTable","searchInBundles","idx","i","filtered","isEqual","bundles","mapByKey","updatedRows","messageBundle","evt","prev","newRows","cloneDeep","textCell","updateEditableRows","type","validationErrors","newRow","invalid","validateCellEdits","cancelCellEdits","applyCellEdits","options","SelectGroup","Divider","addKeyValue","pair","deleteKey","v","option","item","TextContent","PaginatingTableToolbar","search","ToolbarItem","isExpanded","ListEmptyState","SearchIcon","Table","TableVariant","_b","validation","row","TableHeader","TableBody","RealmSettingsLoginTab","refresh","updateSwitchValue","switches","name","s","PartialExportDialog","isOpen","onClose","exportGroupsAndRoles","setExportGroupsAndRoles","exportClients","setExportClients","isExporting","setIsExporting","showWarning","exportRealm","realmExport","saveAs","prettyPrintJSON","Text","INITIAL_RESOURCES","PartialImportDialog","importedFile","setImportedFile","isFileSelected","isRealmSelectOpen","setIsRealmSelectOpen","isCollisionSelectOpen","setIsCollisionSelectOpen","importInProgress","setImportInProgress","collisionOption","setCollisionOption","targetRealm","setTargetRealm","importResponse","setImportResponse","resourcesToImport","setResourcesToImport","isAnyResourceChecked","checked","resetResourcesToImport","resetInputState","handleFileChange","handleRealmSelect","handleResourceCheckBox","resource","realmSelectOptions","realms","handleCollisionSelect","collisionOptions","targetHasResources","targetHasResource","targetHasRealmRoles","targetHasClientRoles","itemCount","clientRolesCount","clientRoles","total","role","resourceDataListItem","resourceDisplayName","DataListItem","DataListItemRow","DataListItemCells","DataListCell","jsonForImport","jsonToImport","doImport","importResults","importModal","JsonFileUpload","DataList","importCompleteMessage","loader","last","ActionLabel","importRecord","Label","TypeRenderer","typeMap","importCompletedModal","KeycloakDataTable","PoliciesTab","navigate","useNavigate","show","setShow","policies","setPolicies","selectedPolicy","setSelectedPolicy","setKey","code","setCode","tablePolicies","setTablePolicies","saveStatus","switchValues","updatedPolicies","policy","enabled","toClientPolicies","ClientPolicyDetailLink","toEditClientPolicy","SwitchRenderer","clientPolicy","toggleDisableDialog","DisableConfirm","useConfirmDialog","obj","toggleDeleteDialog","DeleteConfirm","Flex","FlexItem","Title","Radio","CodeEditor","Language","toAddClientPolicy","KeycloakSpinner","ProfilesTab","tableProfiles","setTableProfiles","globalProfiles","setGlobalProfiles","selectedProfile","setSelectedProfile","allProfiles","profiles","allClientProfiles","normalizeProfile","profile","omit","updatedProfiles","cellFormatter","toClientProfile","changedProfiles","changedGlobalProfiles","toAddClientProfile","RealmSettingsSessionsTab","offlineSessionMaxEnabled","TimeSelector","RealmSettingsThemesTab","loginThemeOpen","setLoginThemeOpen","accountThemeOpen","setAccountThemeOpen","adminUIThemeOpen","setAdminUIThemeOpen","emailThemeOpen","setEmailThemeOpen","RealmSettingsTokensTab","serverInfo","defaultSigAlgDrpdwnIsOpen","setDefaultSigAlgDrpdwnOpen","defaultSigAlgOptions","sortProviders","ssoSessionIdleTimeout","revokeRefreshToken","p","NumberInput","toHumanFormat","TextVariants","DefaultsGroupsTab","isKebabOpen","toggleKebab","isGroupPickerOpen","toggleGroupPicker","defaultGroups","setDefaultGroups","selectedRows","setSelectedRows","load","setLoad","reload","useHelp","groups","removeGroup","group","addGroups","toggleRemoveDialog","RemoveDialog","GroupPickerDialog","Popover","Trans","toUserFederation","QuestionCircleIcon","rows","Dropdown","KebabToggle","DropdownItem","UserRegistration","setRealm","activeTab","setActiveTab","addComposites","composites","compositeArray","Tabs","Tab","TabTitleText","RoleMapping","r","EventsTypeTable","ariaLabelKey","eventTypes","addTypes","onSelect","onDelete","data","AddEventTypesDialog","onConfirm","configured","enums","selectedTypes","setSelectedTypes","selected","EventConfigForm","clear","eventKey","eventsEnabled","EventListenersForm","selectEventListenerOpen","setSelectEventListenerOpen","eventListeners","selectedValue","changedValue","operation","EventsTab","events","setEvents","setType","addEventType","setAddEventType","eventConfig","config","updatedEventListener","adminEventsExpiration","addEventTypes","eventsTypes","enabledEvents","addEvents","enabledEventTypes","e","FILTER_OPTIONS","SelectFilter","onFilter","filterType","setFilterType","toggleFilter","FilterIcon","o","KeysListTab","realmComponents","formatDate","useFormatDate","publicKey","setPublicKey","certificate","setCertificate","keyData","setKeyData","filteredKeyData","setFilteredKeyData","provider","component","togglePublicKeyDialog","PublicKeyDialog","toggleCertificateDialog","CertificateDialog","status","emptyFormatter","cellWidth","validTo","toKeysTab","KeyProviderModal","providerType","KeyProviderForm","KeyProvidersPicker","keyProviderComponentTypes","KEY_PROVIDER_TYPE","id","KeysProvidersTab","searchVal","setSearchVal","filteredComponents","setFilteredComponents","isCreateModalOpen","providerOpen","toggleProviderOpen","defaultUIDisplayName","setDefaultUIDisplayName","selectedComponent","setSelectedComponent","components","componentType","onSearch","handleKeyDown","handleInputChange","Toolbar","ToolbarGroup","InputGroup","DraggableTable","itemOrder","updateAll","componentToSave","toKeyProvider","_key","_idx","sortByPriority","a","b","priorityA","priorityB","KeysTab","setRealmComponents","useTab","tab","useRoutableTab","listTab","providersTab","RoutableTabs","HelpLinkTextInput","fieldName","url","useFormContext","HeadersForm","Time","style","BruteForceDetection","enable","permanentLockout","SecurityDefenses","AttributesGroupTab","useUserProfile","groupToDelete","setGroupToDelete","deleteAttributeGroup","toNewAttributesGroup","toEditAttributesGroup","RESTRICTED_ATTRIBUTES","AttributesTab","isFilterTypeDropdownOpen","toggleIsFilterTypeDropdownOpen","setData","attributeToDelete","setAttributeToDelete","updatedAttributes","attribute","attributes","executeMove","newIndex","fromIndex","attr","movedAttribute","toAttribute","ToolbarContent","uniqBy","toAddAttribute","nameDragged","items","keys","oldIndex","dragged","JsonEditorTab","isSaving","editor","setEditor","resetCode","handleSave","UserProfileTab","toUserProfile","attributesTab","attributesGroupTab","jsonEditorTab","UserProfileProvider","RealmSettingsHeader","onChange","refreshRealms","useRealms","partialImportOpen","setPartialImportOpen","partialExportOpen","setPartialExportOpen","hasAccess","useAccess","canManageRealm","toDashboard","environment","ViewHeader","helpUrls","DropdownSeparator","RealmSettingsTabs","refreshHeader","convertFormValuesToObject","savedRealm","toRealmSettings","generalTab","loginTab","emailTab","themesTab","keysTab","eventsTab","localizationTab","securityDefensesTab","sessionsTab","tokensTab","clientPoliciesTab","userProfileTab","userRegistrationTab","useClientPoliciesTab","clientPoliciesProfilesTab","clientPoliciesPoliciesTab","Tooltip","RealmSettingsSection","useParams"],"mappings":"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","x_google_ignoreList":[0,1]}