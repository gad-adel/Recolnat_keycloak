{"version":3,"file":"AddRoleMappingModal-uxjjMt5W.js","sources":["../../src/components/role-mapping/queries.ts","../../src/components/role-mapping/RoleMapping.tsx","../../src/components/role-mapping/AddRoleMappingModal.tsx"],"sourcesContent":["import type KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\nimport type MappingsRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/mappingsRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type { ClientScopes } from \"@keycloak/keycloak-admin-client/lib/resources/clientScopes\";\nimport type { Clients } from \"@keycloak/keycloak-admin-client/lib/resources/clients\";\nimport type { Groups } from \"@keycloak/keycloak-admin-client/lib/resources/groups\";\nimport type { Roles } from \"@keycloak/keycloak-admin-client/lib/resources/roles\";\nimport type { Users } from \"@keycloak/keycloak-admin-client/lib/resources/users\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { Row } from \"./RoleMapping\";\n\nexport type ResourcesKey = keyof KeycloakAdminClient;\n\ntype DeleteFunctions =\n  | keyof Pick<Groups, \"delClientRoleMappings\" | \"delRealmRoleMappings\">\n  | keyof Pick<ClientScopes, \"delClientScopeMappings\" | \"delRealmScopeMappings\">\n  | keyof Pick<Roles, \"delCompositeRoles\">;\n\ntype ListEffectiveFunction =\n  | keyof Pick<Groups, \"listRoleMappings\" | \"listAvailableRealmRoleMappings\">\n  | keyof Pick<\n      ClientScopes,\n      | \"listScopeMappings\"\n      | \"listAvailableRealmScopeMappings\"\n      | \"listCompositeClientScopeMappings\"\n    >\n  | keyof Pick<Roles, \"getCompositeRoles\" | \"getCompositeRolesForClient\">\n  | keyof Pick<\n      Users,\n      \"listCompositeClientRoleMappings\" | \"listCompositeRealmRoleMappings\"\n    >;\n\ntype ListAvailableFunction =\n  | keyof Pick<\n      Groups,\n      \"listAvailableClientRoleMappings\" | \"listAvailableRealmRoleMappings\"\n    >\n  | keyof Pick<\n      ClientScopes,\n      \"listAvailableClientScopeMappings\" | \"listAvailableRealmScopeMappings\"\n    >\n  | keyof Pick<Roles, \"find\">\n  | keyof Pick<Clients, \"listRoles\">;\n\ntype FunctionMapping = {\n  delete: DeleteFunctions[];\n  listAvailable: ListAvailableFunction[];\n  listEffective: ListEffectiveFunction[];\n};\n\ntype ResourceMapping = Partial<Record<ResourcesKey, FunctionMapping>>;\nconst groupFunctions: FunctionMapping = {\n  delete: [\"delClientRoleMappings\", \"delRealmRoleMappings\"],\n  listEffective: [\n    \"listRoleMappings\",\n    \"listCompositeRealmRoleMappings\",\n    \"listCompositeClientRoleMappings\",\n  ],\n  listAvailable: [\n    \"listAvailableClientRoleMappings\",\n    \"listAvailableRealmRoleMappings\",\n  ],\n};\n\nconst clientFunctions: FunctionMapping = {\n  delete: [\"delClientScopeMappings\", \"delRealmScopeMappings\"],\n  listEffective: [\n    \"listScopeMappings\",\n    \"listAvailableRealmScopeMappings\",\n    \"listCompositeClientScopeMappings\",\n  ],\n  listAvailable: [\n    \"listAvailableClientScopeMappings\",\n    \"listAvailableRealmScopeMappings\",\n  ],\n};\n\nconst mapping: ResourceMapping = {\n  groups: groupFunctions,\n  users: groupFunctions,\n  clientScopes: clientFunctions,\n  clients: clientFunctions,\n  roles: {\n    delete: [\"delCompositeRoles\", \"delCompositeRoles\"],\n    listEffective: [\n      \"getCompositeRoles\",\n      \"getCompositeRoles\",\n      \"getCompositeRolesForClient\",\n    ],\n    listAvailable: [\"listRoles\", \"find\"],\n  },\n};\n\ntype queryType =\n  | DeleteFunctions\n  | ListAvailableFunction\n  | ListEffectiveFunction;\n\nconst castAdminClient = (resource: ResourcesKey) =>\n  adminClient[resource] as unknown as {\n    [index in queryType]: (...params: any) => Promise<RoleRepresentation[]>;\n  };\n\nconst applyQuery = (\n  type: ResourcesKey,\n  query: queryType,\n  ...params: object[]\n): Promise<RoleRepresentation[]> => castAdminClient(type)[query](...params);\n\nexport const deleteMapping = (type: ResourcesKey, id: string, rows: Row[]) =>\n  rows.map((row) => {\n    const role = { id: row.role.id!, name: row.role.name! };\n    const query = mapping[type]?.delete[row.client ? 0 : 1]!;\n\n    return applyQuery(\n      type,\n      query,\n      {\n        id,\n        clientUniqueId: row.client?.id,\n        client: row.client?.id,\n        roles: [role],\n      },\n      [role],\n    );\n  });\n\nexport const getMapping = async (\n  type: ResourcesKey,\n  id: string,\n): Promise<MappingsRepresentation> => {\n  const query = mapping[type]!.listEffective[0];\n  const result = applyQuery(type, query, { id });\n  if (type !== \"roles\") {\n    return result as MappingsRepresentation;\n  }\n  const roles = await result;\n  const clientRoles = await Promise.all(\n    roles\n      .filter((r) => r.clientRole)\n      .map(async (role) => {\n        const client = await adminClient.clients.findOne({\n          id: role.containerId!,\n        });\n\n        role.containerId = client?.clientId;\n        return { ...client, mappings: [role] };\n      }),\n  );\n\n  return {\n    clientMappings: clientRoles,\n    realmMappings: roles.filter((r) => !r.clientRole),\n  };\n};\n\nexport const getEffectiveRoles = async (\n  type: ResourcesKey,\n  id: string,\n): Promise<Row[]> => {\n  const query = mapping[type]!.listEffective[1];\n  if (type !== \"roles\") {\n    return (await applyQuery(type, query, { id })).map((role) => ({\n      role,\n    }));\n  }\n  const roles = await applyQuery(type, query, { id });\n  const parentRoles = await Promise.all(\n    roles\n      .filter((r) => r.composite)\n      .map((r) => applyQuery(type, query, { id: r.id })),\n  );\n  return [...roles, ...parentRoles.flat()].map((role) => ({ role }));\n};\n\nexport const getAvailableRoles = async (\n  type: ResourcesKey,\n  params: Record<string, string | number>,\n): Promise<Row[]> => {\n  const query = mapping[type]!.listAvailable[1];\n  return (await applyQuery(type, query, params)).map((role) => ({\n    role,\n  }));\n};\n","import type KeycloakAdminClient from \"@keycloak/keycloak-admin-client\";\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport {\n  AlertVariant,\n  Badge,\n  Button,\n  ButtonVariant,\n  Checkbox,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { cellWidth } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { emptyFormatter, upperCaseFormatter } from \"../../util\";\nimport { useAlerts } from \"../alert/Alerts\";\nimport { useConfirmDialog } from \"../confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"../list-empty-state/ListEmptyState\";\nimport { Action, KeycloakDataTable } from \"../table-toolbar/KeycloakDataTable\";\nimport { AddRoleMappingModal } from \"./AddRoleMappingModal\";\nimport { deleteMapping, getEffectiveRoles, getMapping } from \"./queries\";\nimport { getEffectiveClientRoles } from \"./resource\";\n\nimport \"./role-mapping.css\";\n\nexport type CompositeRole = RoleRepresentation & {\n  parent: RoleRepresentation;\n  isInherited?: boolean;\n};\n\nexport type Row = {\n  client?: ClientRepresentation;\n  role: RoleRepresentation | CompositeRole;\n  id?: string; // KeycloakDataTable expects an id for the row\n};\n\nexport const mapRoles = (\n  assignedRoles: Row[],\n  effectiveRoles: Row[],\n  hide: boolean,\n) => [\n  ...(hide\n    ? assignedRoles.map((row) => ({\n        ...row,\n        role: {\n          ...row.role,\n          isInherited: false,\n        },\n      }))\n    : effectiveRoles.map((row) => ({\n        ...row,\n        role: {\n          ...row.role,\n          isInherited:\n            assignedRoles.find((r) => r.role.id === row.role.id) === undefined,\n        },\n      }))),\n];\n\nexport const ServiceRole = ({ role, client }: Row) => (\n  <>\n    {client?.clientId && (\n      <Badge isRead className=\"keycloak-admin--role-mapping__client-name\">\n        {client.clientId}\n      </Badge>\n    )}\n    {role.name}\n  </>\n);\n\nexport type ResourcesKey = keyof KeycloakAdminClient;\n\ntype RoleMappingProps = {\n  name: string;\n  id: string;\n  type: ResourcesKey;\n  isManager?: boolean;\n  save: (rows: Row[]) => Promise<void>;\n};\n\nexport const RoleMapping = ({\n  name,\n  id,\n  type,\n  isManager = true,\n  save,\n}: RoleMappingProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [hide, setHide] = useState(true);\n  const [showAssign, setShowAssign] = useState(false);\n  const [selected, setSelected] = useState<Row[]>([]);\n\n  const assignRoles = async (rows: Row[]) => {\n    await save(rows);\n    refresh();\n  };\n\n  const loader = async () => {\n    let effectiveRoles: Row[] = [];\n    let effectiveClientRoles: Row[] = [];\n    if (!hide) {\n      effectiveRoles = await getEffectiveRoles(type, id);\n\n      effectiveClientRoles = (\n        await getEffectiveClientRoles({\n          type,\n          id,\n        })\n      ).map((e) => ({\n        client: { clientId: e.client, id: e.clientId },\n        role: { id: e.id, name: e.role, description: e.description },\n      }));\n    }\n\n    const roles = await getMapping(type, id);\n    const realmRolesMapping =\n      roles.realmMappings?.map((role) => ({ role })) || [];\n    const clientMapping = Object.values(roles.clientMappings || {})\n      .map((client) =>\n        client.mappings.map((role: RoleRepresentation) => ({\n          client: { clientId: client.client, ...client },\n          role,\n        })),\n      )\n      .flat();\n\n    return [\n      ...mapRoles(\n        [...realmRolesMapping, ...clientMapping],\n        [...effectiveClientRoles, ...effectiveRoles],\n        hide,\n      ),\n    ];\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"removeMappingTitle\",\n    messageKey: t(\"removeMappingConfirm\", { count: selected.length }),\n    continueButtonLabel: \"remove\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await Promise.all(deleteMapping(type, id, selected));\n        addAlert(t(\"clientScopeRemoveSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"clientScopeRemoveError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      {showAssign && (\n        <AddRoleMappingModal\n          id={id}\n          type={type}\n          name={name}\n          onAssign={assignRoles}\n          onClose={() => setShowAssign(false)}\n        />\n      )}\n      <DeleteConfirm />\n      <KeycloakDataTable\n        data-testid=\"assigned-roles\"\n        key={`${id}${key}`}\n        loader={loader}\n        canSelectAll\n        onSelect={(rows) => setSelected(rows)}\n        searchPlaceholderKey=\"searchByName\"\n        ariaLabelKey=\"clientScopeList\"\n        isRowDisabled={(value) =>\n          (value.role as CompositeRole).isInherited || false\n        }\n        toolbarItem={\n          <>\n            <ToolbarItem>\n              <Checkbox\n                label={t(\"hideInheritedRoles\")}\n                id=\"hideInheritedRoles\"\n                data-testid=\"hideInheritedRoles\"\n                isChecked={hide}\n                onChange={(check) => {\n                  setHide(check);\n                  refresh();\n                }}\n              />\n            </ToolbarItem>\n            {isManager && (\n              <>\n                <ToolbarItem>\n                  <Button\n                    data-testid=\"assignRole\"\n                    onClick={() => setShowAssign(true)}\n                  >\n                    {t(\"assignRole\")}\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button\n                    variant=\"link\"\n                    data-testid=\"unAssignRole\"\n                    onClick={toggleDeleteDialog}\n                    isDisabled={selected.length === 0}\n                  >\n                    {t(\"unAssignRole\")}\n                  </Button>\n                </ToolbarItem>\n              </>\n            )}\n          </>\n        }\n        actions={\n          isManager\n            ? [\n                {\n                  title: t(\"unAssignRole\"),\n                  onRowClick: async (role) => {\n                    setSelected([role]);\n                    toggleDeleteDialog();\n                    return false;\n                  },\n                } as Action<Awaited<ReturnType<typeof loader>>[0]>,\n              ]\n            : []\n        }\n        columns={[\n          {\n            name: \"role.name\",\n            displayKey: t(\"name\"),\n            transforms: [cellWidth(30)],\n            cellRenderer: ServiceRole,\n          },\n          {\n            name: \"role.isInherited\",\n            displayKey: t(\"inherent\"),\n            cellFormatters: [upperCaseFormatter(), emptyFormatter()],\n          },\n          {\n            name: \"role.description\",\n            displayKey: t(\"description\"),\n            cellFormatters: [emptyFormatter()],\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(`noRoles-${type}`)}\n            instructions={t(`noRolesInstructions-${type}`)}\n            primaryActionText={t(\"assignRole\")}\n            onPrimaryAction={() => setShowAssign(true)}\n          />\n        }\n      />\n    </>\n  );\n};\n","import {\n  Button,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  Modal,\n  ModalVariant,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAccess } from \"../../context/access/Access\";\nimport useLocaleSort from \"../../utils/useLocaleSort\";\nimport { ListEmptyState } from \"../list-empty-state/ListEmptyState\";\nimport { KeycloakDataTable } from \"../table-toolbar/KeycloakDataTable\";\nimport { ResourcesKey, Row, ServiceRole } from \"./RoleMapping\";\nimport { getAvailableRoles } from \"./queries\";\nimport { getAvailableClientRoles } from \"./resource\";\n\ntype AddRoleMappingModalProps = {\n  id: string;\n  type: ResourcesKey;\n  name?: string;\n  isRadio?: boolean;\n  onAssign: (rows: Row[]) => void;\n  onClose: () => void;\n  isLDAPmapper?: boolean;\n};\n\ntype FilterType = \"roles\" | \"clients\";\n\nexport const AddRoleMappingModal = ({\n  id,\n  name,\n  type,\n  isRadio = false,\n  isLDAPmapper,\n  onAssign,\n  onClose,\n}: AddRoleMappingModalProps) => {\n  const { t } = useTranslation();\n  const { hasAccess } = useAccess();\n  const canViewRealmRoles = hasAccess(\"view-realm\") || hasAccess(\"query-users\");\n\n  const [searchToggle, setSearchToggle] = useState(false);\n\n  const [filterType, setFilterType] = useState<FilterType>(\n    canViewRealmRoles ? \"roles\" : \"clients\",\n  );\n  const [selectedRows, setSelectedRows] = useState<Row[]>([]);\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const localeSort = useLocaleSort();\n  const compareRow = ({ role: { name } }: Row) => name?.toUpperCase();\n\n  const loader = async (\n    first?: number,\n    max?: number,\n    search?: string,\n  ): Promise<Row[]> => {\n    const params: Record<string, string | number> = {\n      first: first!,\n      max: max!,\n    };\n\n    if (search) {\n      params.search = search;\n    }\n\n    const roles = await getAvailableRoles(type, { ...params, id });\n    const sorted = localeSort(roles, compareRow);\n    return sorted.map((row) => {\n      return {\n        role: row.role,\n        id: row.role.id,\n      };\n    });\n  };\n\n  const clientRolesLoader = async (\n    first?: number,\n    max?: number,\n    search?: string,\n  ): Promise<Row[]> => {\n    const roles = await getAvailableClientRoles({\n      id,\n      type,\n      first: first || 0,\n      max: max || 10,\n      search,\n    });\n\n    return localeSort(\n      roles.map((e) => ({\n        client: { clientId: e.client, id: e.clientId },\n        role: { id: e.id, name: e.role, description: e.description },\n        id: e.id,\n      })),\n      ({ client: { clientId }, role: { name } }) => `${clientId}${name}`,\n    );\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.large}\n      title={\n        isLDAPmapper ? t(\"assignRole\") : t(\"assignRolesTo\", { client: name })\n      }\n      isOpen\n      onClose={onClose}\n      actions={[\n        <Button\n          data-testid=\"assign\"\n          key=\"confirm\"\n          isDisabled={selectedRows.length === 0}\n          variant=\"primary\"\n          onClick={() => {\n            onAssign(selectedRows);\n            onClose();\n          }}\n        >\n          {t(\"assign\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <KeycloakDataTable\n        key={key}\n        onSelect={(rows) => setSelectedRows([...rows])}\n        searchPlaceholderKey=\"searchByRoleName\"\n        isPaginated={!(filterType === \"roles\" && type !== \"roles\")}\n        searchTypeComponent={\n          canViewRealmRoles && (\n            <ToolbarItem>\n              <Dropdown\n                onSelect={() => {\n                  setFilterType(filterType === \"roles\" ? \"clients\" : \"roles\");\n                  setSearchToggle(false);\n                  refresh();\n                }}\n                data-testid=\"filter-type-dropdown\"\n                toggle={\n                  <DropdownToggle\n                    onToggle={setSearchToggle}\n                    icon={<FilterIcon />}\n                  >\n                    {filterType === \"roles\"\n                      ? t(\"filterByRoles\")\n                      : t(\"filterByClients\")}\n                  </DropdownToggle>\n                }\n                isOpen={searchToggle}\n                dropdownItems={[\n                  <DropdownItem key=\"filter-type\" data-testid={filterType}>\n                    {filterType === \"roles\"\n                      ? t(\"filterByClients\")\n                      : t(\"filterByRoles\")}\n                  </DropdownItem>,\n                ]}\n              />\n            </ToolbarItem>\n          )\n        }\n        canSelectAll\n        isRadio={isRadio}\n        loader={filterType === \"roles\" ? loader : clientRolesLoader}\n        ariaLabelKey=\"roles\"\n        columns={[\n          {\n            name: \"name\",\n            cellRenderer: ServiceRole,\n          },\n          {\n            name: \"role.description\",\n            displayKey: \"description\",\n          },\n        ]}\n        emptyState={\n          <ListEmptyState\n            message={t(\"noRoles\")}\n            instructions={t(\"noRealmRolesToAssign\")}\n            secondaryActions={[\n              {\n                text: t(\"filterByClients\"),\n                onClick: () => {\n                  setFilterType(\"clients\");\n                  refresh();\n                },\n              },\n            ]}\n          />\n        }\n      />\n    </Modal>\n  );\n};\n"],"names":["groupFunctions","clientFunctions","mapping","castAdminClient","resource","adminClient","applyQuery","type","query","params","deleteMapping","id","rows","row","role","getMapping","result","roles","r","client","getEffectiveRoles","parentRoles","getAvailableRoles","mapRoles","assignedRoles","effectiveRoles","hide","ServiceRole","jsxs","Fragment","Badge","RoleMapping","name","isManager","save","t","useTranslation","addAlert","addError","useAlerts","key","setKey","useState","refresh","setHide","showAssign","setShowAssign","selected","setSelected","assignRoles","loader","effectiveClientRoles","getEffectiveClientRoles","e","realmRolesMapping","clientMapping","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","AlertVariant","error","jsx","AddRoleMappingModal","KeycloakDataTable","value","ToolbarItem","Checkbox","check","Button","cellWidth","upperCaseFormatter","emptyFormatter","ListEmptyState","isRadio","isLDAPmapper","onAssign","onClose","hasAccess","useAccess","canViewRealmRoles","searchToggle","setSearchToggle","filterType","setFilterType","selectedRows","setSelectedRows","localeSort","useLocaleSort","compareRow","first","max","search","clientRolesLoader","getAvailableClientRoles","clientId","Modal","ModalVariant","Dropdown","DropdownToggle","FilterIcon","DropdownItem"],"mappings":"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"}