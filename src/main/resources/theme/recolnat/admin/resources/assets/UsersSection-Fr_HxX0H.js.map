{"version":3,"file":"UsersSection-Fr_HxX0H.js","sources":["../../src/user/details/SearchFilter.tsx","../../src/components/users/UserDataTableAttributeSearchForm.tsx","../../src/components/users/UserDataTableToolbarItems.tsx","../../src/components/users/UserDataTable.tsx","../../src/user/UsersSection.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  Select,\n  SelectOption,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\n\nexport type SearchType = \"default\" | \"attribute\";\n\ntype SearchToolbarProps = SearchDropdownProps;\n\ntype SearchDropdownProps = {\n  searchType: SearchType;\n  onSelect: (value: SearchType) => void;\n};\n\nexport const SearchDropdown = ({\n  searchType,\n  onSelect,\n}: SearchDropdownProps) => {\n  const { t } = useTranslation();\n  const [searchToggle, setSearchToggle] = useState(false);\n\n  const createDropdown = (searchType: SearchType) => (\n    <DropdownItem\n      key={searchType}\n      onClick={() => {\n        onSelect(searchType);\n        setSearchToggle(false);\n      }}\n    >\n      {t(`searchType.${searchType}`)}\n    </DropdownItem>\n  );\n  const options = [createDropdown(\"default\"), createDropdown(\"attribute\")];\n\n  return (\n    <Dropdown\n      className=\"keycloak__users__searchtype\"\n      toggle={\n        <DropdownToggle id=\"toggle-id\" onToggle={setSearchToggle}>\n          <FilterIcon /> {t(`searchType.${searchType}`)}\n        </DropdownToggle>\n      }\n      isOpen={searchToggle}\n      dropdownItems={options}\n    />\n  );\n};\n\nexport const SearchToolbar = ({ searchType, onSelect }: SearchToolbarProps) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <ToolbarItem>\n        <SearchDropdown searchType={searchType} onSelect={onSelect} />\n      </ToolbarItem>\n      <ToolbarItem>\n        <Select\n          className=\"keycloak__users__searchtype\"\n          onToggle={setOpen}\n          isOpen={open}\n          selections={[t(\"default\"), t(\"attribute\")]}\n          onSelect={() => setOpen(false)}\n        >\n          <SelectOption value={\"default\"}>{t(\"default\")}</SelectOption>\n          <SelectOption value={\"attribute\"}>{t(\"attribute\")}</SelectOption>\n        </Select>\n      </ToolbarItem>\n    </>\n  );\n};\n","import type UserProfileConfig from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport {\n  ActionGroup,\n  Alert,\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  InputGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextContent,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { Form } from \"react-router-dom\";\nimport { KeycloakTextInput } from \"../keycloak-text-input/KeycloakTextInput\";\nimport { useTranslation } from \"react-i18next\";\nimport { useForm } from \"react-hook-form\";\nimport { isBundleKey, unWrap } from \"../../user/utils\";\nimport { CheckIcon } from \"@patternfly/react-icons\";\nimport { useAlerts } from \"../alert/Alerts\";\nimport { ReactNode, useState } from \"react\";\nimport { UserAttribute } from \"./UserDataTable\";\n\ntype UserDataTableAttributeSearchFormProps = {\n  activeFilters: UserAttribute[];\n  setActiveFilters: (filters: UserAttribute[]) => void;\n  profile: UserProfileConfig;\n  createAttributeSearchChips: () => ReactNode;\n  searchUserWithAttributes: () => void;\n};\n\nexport function UserDataTableAttributeSearchForm({\n  activeFilters,\n  setActiveFilters,\n  profile,\n  createAttributeSearchChips,\n  searchUserWithAttributes,\n}: UserDataTableAttributeSearchFormProps) {\n  const { t } = useTranslation();\n  const { addAlert } = useAlerts();\n  const [selectAttributeKeyOpen, setSelectAttributeKeyOpen] = useState(false);\n\n  const defaultValues: UserAttribute = {\n    name: \"\",\n    displayName: \"\",\n    value: \"\",\n  };\n\n  const {\n    getValues,\n    register,\n    reset,\n    formState: { errors },\n    setValue,\n    setError,\n    clearErrors,\n  } = useForm<UserAttribute>({\n    mode: \"onChange\",\n    defaultValues,\n  });\n\n  const isAttributeKeyDuplicate = () => {\n    return activeFilters.some((filter) => filter.name === getValues().name);\n  };\n\n  const isAttributeNameValid = () => {\n    let valid = false;\n    if (!getValues().name.length) {\n      setError(\"name\", {\n        type: \"empty\",\n        message: t(\"searchUserByAttributeMissingKeyError\"),\n      });\n    } else if (\n      activeFilters.some((filter) => filter.name === getValues().name)\n    ) {\n      setError(\"name\", {\n        type: \"conflict\",\n        message: t(\"searchUserByAttributeKeyAlreadyInUseError\"),\n      });\n    } else {\n      valid = true;\n    }\n    return valid;\n  };\n\n  const isAttributeValueValid = () => {\n    let valid = false;\n    if (!getValues().value.length) {\n      setError(\"value\", {\n        type: \"empty\",\n        message: t(\"searchUserByAttributeMissingValueError\"),\n      });\n    } else {\n      valid = true;\n    }\n    return valid;\n  };\n\n  const isAttributeValid = () =>\n    isAttributeNameValid() && isAttributeValueValid();\n\n  const addToFilter = () => {\n    if (isAttributeValid()) {\n      setActiveFilters([\n        ...activeFilters,\n        {\n          ...getValues(),\n        },\n      ]);\n      reset();\n    } else {\n      errors.name?.message &&\n        addAlert(errors.name.message, AlertVariant.danger);\n      errors.value?.message &&\n        addAlert(errors.value.message, AlertVariant.danger);\n    }\n  };\n\n  const clearActiveFilters = () => {\n    const filtered = [...activeFilters].filter(\n      (chip) => chip.name !== chip.name,\n    );\n    setActiveFilters(filtered);\n  };\n\n  const createAttributeKeyInputField = () => {\n    if (profile) {\n      return (\n        <Select\n          data-testid=\"search-attribute-name\"\n          variant={SelectVariant.typeahead}\n          onToggle={(isOpen) => setSelectAttributeKeyOpen(isOpen)}\n          selections={getValues().displayName}\n          onSelect={(_, selectedValue) => {\n            setValue(\"displayName\", selectedValue.toString());\n            if (isAttributeKeyDuplicate()) {\n              setError(\"name\", { type: \"conflict\" });\n            } else {\n              clearErrors(\"name\");\n            }\n          }}\n          isOpen={selectAttributeKeyOpen}\n          placeholderText={t(\"selectAttribute\")}\n          validated={errors.name && \"error\"}\n          maxHeight={300}\n          {...register(\"displayName\", {\n            required: true,\n            validate: isAttributeNameValid,\n          })}\n        >\n          {profile.attributes?.map((option) => (\n            <SelectOption\n              key={option.name}\n              value={\n                (isBundleKey(option.displayName)\n                  ? t(unWrap(option.displayName!))\n                  : option.displayName) || option.name\n              }\n              onClick={(e) => {\n                e.stopPropagation();\n                setSelectAttributeKeyOpen(false);\n                setValue(\"name\", option.name!);\n              }}\n            />\n          ))}\n        </Select>\n      );\n    } else {\n      return (\n        <KeycloakTextInput\n          id=\"name\"\n          placeholder={t(\"keyPlaceholder\")}\n          validated={errors.name && \"error\"}\n          onKeyDown={(e) => e.key === \"Enter\" && addToFilter()}\n          {...register(\"name\", {\n            required: true,\n            validate: isAttributeNameValid,\n          })}\n        />\n      );\n    }\n  };\n\n  return (\n    <Form className=\"user-attribute-search-form\">\n      <TextContent className=\"user-attribute-search-form-headline\">\n        <Text component={TextVariants.h2}>{t(\"selectAttributes\")}</Text>\n      </TextContent>\n      <Alert\n        isInline\n        className=\"user-attribute-search-form-alert\"\n        variant=\"info\"\n        title={t(\"searchUserByAttributeDescription\")}\n        component=\"h3\"\n      />\n      <TextContent className=\"user-attribute-search-form-key-value\">\n        <div className=\"user-attribute-search-form-left\">\n          <Text component={TextVariants.h3}>{t(\"key\")}</Text>\n        </div>\n        <div className=\"user-attribute-search-form-right\">\n          <Text component={TextVariants.h3}>{t(\"value\")}</Text>\n        </div>\n      </TextContent>\n      <div className=\"user-attribute-search-form-left\">\n        {createAttributeKeyInputField()}\n      </div>\n      <div className=\"user-attribute-search-form-right\">\n        <InputGroup>\n          <KeycloakTextInput\n            id=\"value\"\n            placeholder={t(\"valuePlaceholder\")}\n            validated={errors.value && \"error\"}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                e.preventDefault();\n                addToFilter();\n              }\n            }}\n            {...register(\"value\", {\n              required: true,\n              validate: isAttributeValueValid,\n            })}\n          />\n          <Button\n            variant=\"control\"\n            icon={<CheckIcon />}\n            onClick={addToFilter}\n            aria-label={t(\"addToFilter\")}\n          />\n        </InputGroup>\n      </div>\n      {createAttributeSearchChips()}\n      <ActionGroup className=\"user-attribute-search-form-action-group\">\n        <Button\n          data-testid=\"search-user-attribute-btn\"\n          variant=\"primary\"\n          type=\"submit\"\n          isDisabled={!activeFilters.length}\n          onClick={searchUserWithAttributes}\n        >\n          {t(\"search\")}\n        </Button>\n        <Button\n          variant={ButtonVariant.link}\n          onClick={() => {\n            reset();\n            clearActiveFilters();\n          }}\n        >\n          {t(\"reset\")}\n        </Button>\n      </ActionGroup>\n    </Form>\n  );\n}\n","import type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type UserProfileConfig from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport {\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  InputGroup,\n  KebabToggle,\n  SearchInput,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { ArrowRightIcon } from \"@patternfly/react-icons\";\nimport { ReactNode, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAccess } from \"../../context/access/Access\";\nimport { SearchDropdown, SearchType } from \"../../user/details/SearchFilter\";\nimport { UserAttribute } from \"./UserDataTable\";\nimport { UserDataTableAttributeSearchForm } from \"./UserDataTableAttributeSearchForm\";\n\ntype UserDataTableToolbarItemsProps = {\n  realm: RealmRepresentation;\n  hasSelectedRows: boolean;\n  toggleDeleteDialog: () => void;\n  toggleUnlockUsersDialog: () => void;\n  goToCreate: () => void;\n  searchType: SearchType;\n  setSearchType: (searchType: SearchType) => void;\n  searchUser: string;\n  setSearchUser: (searchUser: string) => void;\n  activeFilters: UserAttribute[];\n  setActiveFilters: (activeFilters: UserAttribute[]) => void;\n  refresh: () => void;\n  profile: UserProfileConfig;\n  clearAllFilters: () => void;\n  createAttributeSearchChips: () => ReactNode;\n  searchUserWithAttributes: () => void;\n};\n\nexport function UserDataTableToolbarItems({\n  realm,\n  hasSelectedRows,\n  toggleDeleteDialog,\n  toggleUnlockUsersDialog,\n  goToCreate,\n  searchType,\n  setSearchType,\n  searchUser,\n  setSearchUser,\n  activeFilters,\n  setActiveFilters,\n  refresh,\n  profile,\n  clearAllFilters,\n  createAttributeSearchChips,\n  searchUserWithAttributes,\n}: UserDataTableToolbarItemsProps) {\n  const { t } = useTranslation();\n  const [kebabOpen, setKebabOpen] = useState(false);\n  const [searchDropdownOpen, setSearchDropdownOpen] = useState(false);\n\n  const { hasAccess } = useAccess();\n\n  // Only needs query-users access to attempt add/delete of users.\n  // This is because the user could have fine-grained access to users\n  // of a group.  There is no way to know this without searching the\n  // permissions of every group.\n  const isManager = hasAccess(\"query-users\");\n\n  const searchItem = () => {\n    return (\n      <ToolbarItem>\n        <InputGroup>\n          <SearchDropdown\n            searchType={searchType}\n            onSelect={(searchType) => {\n              clearAllFilters();\n              setSearchType(searchType);\n            }}\n          />\n          {searchType === \"default\" && defaultSearchInput()}\n          {searchType === \"attribute\" && attributeSearchInput()}\n        </InputGroup>\n      </ToolbarItem>\n    );\n  };\n\n  const defaultSearchInput = () => {\n    return (\n      <ToolbarItem>\n        <SearchInput\n          placeholder={t(\"searchForUser\")}\n          aria-label={t(\"search\")}\n          value={searchUser}\n          onChange={(_, value) => {\n            setSearchUser(value);\n          }}\n          onSearch={() => {\n            setSearchUser(searchUser);\n            refresh();\n          }}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              setSearchUser(searchUser);\n              refresh();\n            }\n          }}\n          onClear={() => {\n            setSearchUser(\"\");\n          }}\n        />\n      </ToolbarItem>\n    );\n  };\n\n  const attributeSearchInput = () => {\n    return (\n      <>\n        <Dropdown\n          id=\"user-attribute-search-select\"\n          data-testid=\"UserAttributeSearchSelector\"\n          toggle={\n            <DropdownToggle\n              data-testid=\"userAttributeSearchSelectorToggle\"\n              onToggle={(isOpen) => {\n                setSearchDropdownOpen(isOpen);\n              }}\n              className=\"keycloak__user_attribute_search_selector_dropdown__toggle\"\n            >\n              {t(\"selectAttributes\")}\n            </DropdownToggle>\n          }\n          isOpen={searchDropdownOpen}\n        >\n          <UserDataTableAttributeSearchForm\n            activeFilters={activeFilters}\n            setActiveFilters={setActiveFilters}\n            profile={profile}\n            createAttributeSearchChips={createAttributeSearchChips}\n            searchUserWithAttributes={searchUserWithAttributes}\n          />\n        </Dropdown>\n        <Button\n          icon={<ArrowRightIcon />}\n          variant=\"control\"\n          onClick={searchUserWithAttributes}\n          aria-label={t(\"searchAttributes\")}\n        />\n      </>\n    );\n  };\n\n  const bruteForceProtectionToolbarItem = !realm.bruteForceProtected ? (\n    <ToolbarItem>\n      <Button\n        variant={ButtonVariant.link}\n        onClick={toggleDeleteDialog}\n        data-testid=\"delete-user-btn\"\n        isDisabled={hasSelectedRows}\n      >\n        {t(\"deleteUser\")}\n      </Button>\n    </ToolbarItem>\n  ) : (\n    <ToolbarItem>\n      <Dropdown\n        toggle={<KebabToggle onToggle={(open) => setKebabOpen(open)} />}\n        isOpen={kebabOpen}\n        isPlain\n        dropdownItems={[\n          <DropdownItem\n            key=\"deleteUser\"\n            component=\"button\"\n            isDisabled={hasSelectedRows}\n            onClick={() => {\n              toggleDeleteDialog();\n              setKebabOpen(false);\n            }}\n          >\n            {t(\"deleteUser\")}\n          </DropdownItem>,\n\n          <DropdownItem\n            key=\"unlock\"\n            component=\"button\"\n            onClick={() => {\n              toggleUnlockUsersDialog();\n              setKebabOpen(false);\n            }}\n          >\n            {t(\"unlockAllUsers\")}\n          </DropdownItem>,\n        ]}\n      />\n    </ToolbarItem>\n  );\n\n  const actionItems = (\n    <>\n      <ToolbarItem>\n        <Button data-testid=\"add-user\" onClick={goToCreate}>\n          {t(\"addUser\")}\n        </Button>\n      </ToolbarItem>\n      {bruteForceProtectionToolbarItem}\n    </>\n  );\n\n  return (\n    <>\n      {searchItem()}\n      {isManager ? actionItems : null}\n    </>\n  );\n}\n","import type ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport type RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type UserProfileConfig from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Chip,\n  ChipGroup,\n  EmptyState,\n  FlexItem,\n  Label,\n  Text,\n  TextContent,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport {\n  ExclamationCircleIcon,\n  InfoCircleIcon,\n  WarningTriangleIcon,\n} from \"@patternfly/react-icons\";\nimport type { IRowData } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { SearchType } from \"../../user/details/SearchFilter\";\nimport { toAddUser } from \"../../user/routes/AddUser\";\nimport { toUser } from \"../../user/routes/User\";\nimport { emptyFormatter } from \"../../util\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { useAlerts } from \"../alert/Alerts\";\nimport { useConfirmDialog } from \"../confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../list-empty-state/ListEmptyState\";\nimport { BruteUser, findUsers } from \"../role-mapping/resource\";\nimport { KeycloakDataTable } from \"../table-toolbar/KeycloakDataTable\";\nimport { UserDataTableToolbarItems } from \"./UserDataTableToolbarItems\";\n\nexport type UserAttribute = {\n  name: string;\n  displayName: string;\n  value: string;\n};\n\nexport function UserDataTable() {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm: realmName } = useRealm();\n  const navigate = useNavigate();\n  const [userStorage, setUserStorage] = useState<ComponentRepresentation[]>();\n  const [searchUser, setSearchUser] = useState(\"\");\n  const [realm, setRealm] = useState<RealmRepresentation | undefined>();\n  const [selectedRows, setSelectedRows] = useState<UserRepresentation[]>([]);\n  const [searchType, setSearchType] = useState<SearchType>(\"default\");\n  const [activeFilters, setActiveFilters] = useState<UserAttribute[]>([]);\n  const [profile, setProfile] = useState<UserProfileConfig>({});\n  const [query, setQuery] = useState(\"\");\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  useFetch(\n    async () => {\n      const testParams = {\n        type: \"org.keycloak.storage.UserStorageProvider\",\n      };\n\n      try {\n        return await Promise.all([\n          adminClient.components.find(testParams),\n          adminClient.realms.findOne({ realm: realmName }),\n          adminClient.users.getProfile(),\n        ]);\n      } catch {\n        return [[], {}, {}] as [\n          ComponentRepresentation[],\n          RealmRepresentation | undefined,\n          UserProfileConfig,\n        ];\n      }\n    },\n    ([storageProviders, realm, profile]) => {\n      setUserStorage(\n        storageProviders.filter((p) => p.config?.enabled?.[0] === \"true\"),\n      );\n      setRealm(realm);\n      setProfile(profile);\n    },\n    [],\n  );\n\n  const UserDetailLink = (user: UserRepresentation) => (\n    <Link\n      key={user.username}\n      to={toUser({ realm: realmName, id: user.id!, tab: \"settings\" })}\n    >\n      {user.username}\n    </Link>\n  );\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const params: { [name: string]: string | number } = {\n      first: first!,\n      max: max!,\n      q: query!,\n    };\n\n    const searchParam = search || searchUser || \"\";\n    if (searchParam) {\n      params.search = searchParam;\n    }\n\n    if (!listUsers && !searchParam) {\n      return [];\n    }\n\n    try {\n      return await findUsers({\n        briefRepresentation: true,\n        ...params,\n      });\n    } catch (error) {\n      if (userStorage?.length) {\n        addError(\"noUsersFoundErrorStorage\", error);\n      } else {\n        addError(\"noUsersFoundError\", error);\n      }\n      return [];\n    }\n  };\n\n  const [toggleUnlockUsersDialog, UnlockUsersConfirm] = useConfirmDialog({\n    titleKey: \"unlockAllUsers\",\n    messageKey: \"unlockUsersConfirm\",\n    continueButtonLabel: \"unlock\",\n    onConfirm: async () => {\n      try {\n        await adminClient.attackDetection.delAll();\n        refresh();\n        addAlert(t(\"unlockUsersSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"unlockUsersError\", error);\n      }\n    },\n  });\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteConfirmUsers\",\n    messageKey: t(\"deleteConfirmDialog\", { count: selectedRows.length }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        for (const user of selectedRows) {\n          await adminClient.users.del({ id: user.id! });\n        }\n        setSelectedRows([]);\n        clearAllFilters();\n        addAlert(t(\"userDeletedSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"userDeletedError\", error);\n      }\n    },\n  });\n\n  const StatusRow = (user: BruteUser) => {\n    return (\n      <>\n        {!user.enabled && (\n          <Label key={user.id} color=\"red\" icon={<InfoCircleIcon />}>\n            {t(\"disabled\")}\n          </Label>\n        )}\n        {user.bruteForceStatus?.disabled && (\n          <Label key={user.id} color=\"orange\" icon={<WarningTriangleIcon />}>\n            {t(\"temporaryLocked\")}\n          </Label>\n        )}\n        {user.enabled && !user.bruteForceStatus?.disabled && \"—\"}\n      </>\n    );\n  };\n\n  const ValidatedEmail = (user: UserRepresentation) => {\n    return (\n      <>\n        {!user.emailVerified && (\n          <Tooltip\n            key={`email-verified-${user.id}`}\n            content={<>{t(\"notVerified\")}</>}\n          >\n            <ExclamationCircleIcon className=\"keycloak__user-section__email-verified\" />\n          </Tooltip>\n        )}{\" \"}\n        {emptyFormatter()(user.email)}\n      </>\n    );\n  };\n\n  const goToCreate = () => navigate(toAddUser({ realm: realmName }));\n\n  if (!userStorage || !realm) {\n    return <KeycloakSpinner />;\n  }\n\n  //should *only* list users when no user federation is configured\n  const listUsers = !(userStorage.length > 0);\n\n  const clearAllFilters = () => {\n    const filtered = [...activeFilters].filter(\n      (chip) => chip.name !== chip.name,\n    );\n    setActiveFilters(filtered);\n    setSearchUser(\"\");\n    setQuery(\"\");\n    refresh();\n  };\n\n  const createQueryString = (filters: UserAttribute[]) => {\n    return filters.map((filter) => `${filter.name}:${filter.value}`).join(\" \");\n  };\n\n  const searchUserWithAttributes = () => {\n    const attributes = createQueryString(activeFilters);\n    setQuery(attributes);\n    refresh();\n  };\n\n  const createAttributeSearchChips = () => {\n    return (\n      <FlexItem>\n        {activeFilters.length > 0 && (\n          <>\n            {Object.values(activeFilters).map((entry) => {\n              return (\n                <ChipGroup\n                  className=\"pf-u-mt-md pf-u-mr-md\"\n                  key={entry.name}\n                  categoryName={\n                    entry.displayName.length ? entry.displayName : entry.name\n                  }\n                  isClosable\n                  onClick={(event) => {\n                    event.stopPropagation();\n\n                    const filtered = [...activeFilters].filter(\n                      (chip) => chip.name !== entry.name,\n                    );\n                    const attributes = createQueryString(filtered);\n\n                    setActiveFilters(filtered);\n                    setQuery(attributes);\n                    refresh();\n                  }}\n                >\n                  <Chip key={entry.name} isReadOnly>\n                    {entry.value}\n                  </Chip>\n                </ChipGroup>\n              );\n            })}\n          </>\n        )}\n      </FlexItem>\n    );\n  };\n\n  const toolbar = () => {\n    return (\n      <UserDataTableToolbarItems\n        realm={realm}\n        hasSelectedRows={selectedRows.length === 0}\n        toggleDeleteDialog={toggleDeleteDialog}\n        toggleUnlockUsersDialog={toggleUnlockUsersDialog}\n        goToCreate={goToCreate}\n        searchType={searchType}\n        setSearchType={setSearchType}\n        searchUser={searchUser}\n        setSearchUser={setSearchUser}\n        activeFilters={activeFilters}\n        setActiveFilters={setActiveFilters}\n        refresh={refresh}\n        profile={profile}\n        clearAllFilters={clearAllFilters}\n        createAttributeSearchChips={createAttributeSearchChips}\n        searchUserWithAttributes={searchUserWithAttributes}\n      />\n    );\n  };\n\n  const subtoolbar = () => {\n    if (!activeFilters.length) {\n      return;\n    }\n    return (\n      <div className=\"user-attribute-search-form-subtoolbar\">\n        <ToolbarItem>{createAttributeSearchChips()}</ToolbarItem>\n        <ToolbarItem>\n          <Button\n            variant=\"link\"\n            onClick={() => {\n              clearAllFilters();\n            }}\n          >\n            {t(\"clearAllFilters\")}\n          </Button>\n        </ToolbarItem>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <DeleteConfirm />\n      <UnlockUsersConfirm />\n      <KeycloakDataTable\n        isSearching\n        key={key}\n        loader={loader}\n        isPaginated\n        ariaLabelKey=\"titleUsers\"\n        canSelectAll\n        onSelect={(rows: UserRepresentation[]) => setSelectedRows([...rows])}\n        emptyState={\n          !listUsers ? (\n            <>\n              <Toolbar>\n                <ToolbarContent>{toolbar()}</ToolbarContent>\n              </Toolbar>\n              <EmptyState data-testid=\"empty-state\" variant=\"large\">\n                <TextContent className=\"kc-search-users-text\">\n                  <Text>{t(\"searchForUserDescription\")}</Text>\n                </TextContent>\n              </EmptyState>\n            </>\n          ) : (\n            <ListEmptyState\n              message={t(\"noUsersFound\")}\n              instructions={t(\"emptyInstructions\")}\n              primaryActionText={t(\"createNewUser\")}\n              onPrimaryAction={goToCreate}\n            />\n          )\n        }\n        toolbarItem={toolbar()}\n        subToolbar={subtoolbar()}\n        actionResolver={(rowData: IRowData) => {\n          const user: UserRepresentation = rowData.data;\n          if (!user.access?.manage) return [];\n\n          return [\n            {\n              title: t(\"delete\"),\n              onClick: () => {\n                setSelectedRows([user]);\n                toggleDeleteDialog();\n              },\n            },\n          ];\n        }}\n        columns={[\n          {\n            name: \"username\",\n            displayKey: \"username\",\n            cellRenderer: UserDetailLink,\n          },\n          {\n            name: \"email\",\n            displayKey: \"email\",\n            cellRenderer: ValidatedEmail,\n          },\n          {\n            name: \"lastName\",\n            displayKey: \"lastName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"firstName\",\n            displayKey: \"firstName\",\n            cellFormatters: [emptyFormatter()],\n          },\n          {\n            name: \"status\",\n            displayKey: \"status\",\n            cellRenderer: StatusRow,\n          },\n        ]}\n      />\n    </>\n  );\n}\n","import { useTranslation } from \"react-i18next\";\nimport { PageSection, Tab, TabTitleText } from \"@patternfly/react-core\";\n\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport helpUrls from \"../help-urls\";\nimport { PermissionsTab } from \"../components/permission-tab/PermissionTab\";\nimport { UserDataTable } from \"../components/users/UserDataTable\";\nimport { toUsers, UserTab } from \"./routes/Users\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport \"./user-section.css\";\n\nexport default function UsersSection() {\n  const { t } = useTranslation();\n  const { realm: realmName } = useRealm();\n  const isFeatureEnabled = useIsFeatureEnabled();\n\n  const useTab = (tab: UserTab) =>\n    useRoutableTab(\n      toUsers({\n        realm: realmName,\n        tab,\n      }),\n    );\n\n  const listTab = useTab(\"list\");\n  const permissionsTab = useTab(\"permissions\");\n\n  return (\n    <>\n      <ViewHeader\n        titleKey=\"titleUsers\"\n        subKey=\"usersExplain\"\n        helpUrl={helpUrls.usersUrl}\n        divider={false}\n      />\n      <PageSection\n        data-testid=\"users-page\"\n        variant=\"light\"\n        className=\"pf-u-p-0\"\n      >\n        <RoutableTabs\n          data-testid=\"user-tabs\"\n          defaultLocation={toUsers({\n            realm: realmName,\n            tab: \"list\",\n          })}\n          isBox\n          mountOnEnter\n        >\n          <Tab\n            id=\"list\"\n            data-testid=\"listTab\"\n            title={<TabTitleText>{t(\"userList\")}</TabTitleText>}\n            {...listTab}\n          >\n            <UserDataTable />\n          </Tab>\n          {isFeatureEnabled(Feature.AdminFineGrainedAuthz) && (\n            <Tab\n              id=\"permissions\"\n              data-testid=\"permissionsTab\"\n              title={<TabTitleText>{t(\"permissions\")}</TabTitleText>}\n              {...permissionsTab}\n            >\n              <PermissionsTab type=\"users\" />\n            </Tab>\n          )}\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["SearchDropdown","searchType","onSelect","t","useTranslation","searchToggle","setSearchToggle","useState","createDropdown","jsx","DropdownItem","options","Dropdown","jsxs","DropdownToggle","FilterIcon","UserDataTableAttributeSearchForm","activeFilters","setActiveFilters","profile","createAttributeSearchChips","searchUserWithAttributes","addAlert","useAlerts","selectAttributeKeyOpen","setSelectAttributeKeyOpen","defaultValues","getValues","register","reset","errors","setValue","setError","clearErrors","useForm","isAttributeKeyDuplicate","filter","isAttributeNameValid","valid","isAttributeValueValid","isAttributeValid","addToFilter","AlertVariant","clearActiveFilters","filtered","chip","createAttributeKeyInputField","Select","SelectVariant","isOpen","_","selectedValue","option","SelectOption","isBundleKey","unWrap","e","KeycloakTextInput","Form","TextContent","Text","TextVariants","Alert","InputGroup","Button","CheckIcon","ActionGroup","ButtonVariant","UserDataTableToolbarItems","realm","hasSelectedRows","toggleDeleteDialog","toggleUnlockUsersDialog","goToCreate","setSearchType","searchUser","setSearchUser","refresh","clearAllFilters","kebabOpen","setKebabOpen","searchDropdownOpen","setSearchDropdownOpen","hasAccess","useAccess","isManager","searchItem","ToolbarItem","defaultSearchInput","attributeSearchInput","SearchInput","value","Fragment","ArrowRightIcon","bruteForceProtectionToolbarItem","KebabToggle","open","actionItems","UserDataTable","addError","realmName","useRealm","navigate","useNavigate","userStorage","setUserStorage","setRealm","selectedRows","setSelectedRows","setProfile","query","setQuery","key","setKey","useFetch","testParams","adminClient","storageProviders","p","UserDetailLink","user","Link","toUser","loader","first","max","search","params","searchParam","listUsers","findUsers","error","UnlockUsersConfirm","useConfirmDialog","DeleteConfirm","StatusRow","Label","InfoCircleIcon","WarningTriangleIcon","ValidatedEmail","Tooltip","ExclamationCircleIcon","emptyFormatter","toAddUser","KeycloakSpinner","createQueryString","filters","attributes","FlexItem","entry","ChipGroup","event","Chip","toolbar","subtoolbar","KeycloakDataTable","rows","ListEmptyState","Toolbar","ToolbarContent","EmptyState","rowData","UsersSection","isFeatureEnabled","useIsFeatureEnabled","useTab","tab","useRoutableTab","toUsers","listTab","permissionsTab","ViewHeader","helpUrls","PageSection","RoutableTabs","Tab","TabTitleText","Feature","PermissionsTab"],"mappings":"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"}