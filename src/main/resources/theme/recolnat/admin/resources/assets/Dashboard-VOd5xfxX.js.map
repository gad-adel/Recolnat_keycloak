{"version":3,"file":"Dashboard-VOd5xfxX.js","sources":["../../../../libs/keycloak-admin-client/lib/defs/featureRepresentation.js","../../src/dashboard/ProviderInfo.tsx","../../src/dashboard/Dashboard.tsx"],"sourcesContent":["export var FeatureType;\n(function (FeatureType) {\n    FeatureType[\"Default\"] = \"DEFAULT\";\n    FeatureType[\"DisabledByDefault\"] = \"DISABLED_BY_DEFAULT\";\n    FeatureType[\"Preview\"] = \"PREVIEW\";\n    FeatureType[\"PreviewDisabledByDefault\"] = \"PREVIEW_DISABLED_BY_DEFAULT\";\n    FeatureType[\"Experimental\"] = \"EXPERIMENTAL\";\n    FeatureType[\"Deprecated\"] = \"DEPRECATED\";\n})(FeatureType || (FeatureType = {}));\n","import { useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { ExpandableSection, PageSection } from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { TableToolbar } from \"../components/table-toolbar/TableToolbar\";\n\nexport const ProviderInfo = () => {\n  const { t } = useTranslation();\n  const serverInfo = useServerInfo();\n  const [filter, setFilter] = useState(\"\");\n  const [open, setOpen] = useState<string[]>([]);\n\n  const providerInfo = useMemo(\n    () =>\n      Object.entries(serverInfo.providers || []).filter(([key]) =>\n        key.includes(filter),\n      ),\n    [filter],\n  );\n\n  const toggleOpen = (option: string) => {\n    if (open.includes(option)) {\n      setOpen(open.filter((item: string) => item !== option));\n    } else {\n      setOpen([...open, option]);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\">\n      <TableToolbar\n        inputGroupName=\"search\"\n        inputGroupPlaceholder={t(\"search\")}\n        inputGroupOnEnter={setFilter}\n      >\n        <TableComposable variant=\"compact\">\n          <Thead>\n            <Tr>\n              <Th width={20}>{t(\"spi\")}</Th>\n              <Th>{t(\"providers\")}</Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            {providerInfo.map(([name, { providers }]) => (\n              <Tr key={name}>\n                <Td>{name}</Td>\n                <Td>\n                  <ul>\n                    {Object.entries(providers).map(\n                      ([key, { operationalInfo }]) => (\n                        <li key={key}>\n                          {key}\n                          {operationalInfo ? (\n                            <ExpandableSection\n                              key={key}\n                              isExpanded={open.includes(key)}\n                              onToggle={() => toggleOpen(key)}\n                              toggleText={\n                                open.includes(key)\n                                  ? t(\"showLess\")\n                                  : t(\"showMore\")\n                              }\n                            >\n                              <TableComposable borders={false}>\n                                <Tbody>\n                                  {Object.entries(operationalInfo).map(\n                                    ([key, value]) => (\n                                      <Tr key={key}>\n                                        <Td>{key}</Td>\n                                        <Td>{value}</Td>\n                                      </Tr>\n                                    ),\n                                  )}\n                                </Tbody>\n                              </TableComposable>\n                            </ExpandableSection>\n                          ) : null}\n                        </li>\n                      ),\n                    )}\n                  </ul>\n                </Td>\n              </Tr>\n            ))}\n          </Tbody>\n        </TableComposable>\n      </TableToolbar>\n    </PageSection>\n  );\n};\n","import { useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Brand,\n  Card,\n  CardBody,\n  CardTitle,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  EmptyState,\n  EmptyStateBody,\n  Grid,\n  GridItem,\n  Label,\n  List,\n  ListItem,\n  ListVariant,\n  PageSection,\n  Tab,\n  TabTitleText,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\n\nimport FeatureRepresentation, {\n  FeatureType,\n} from \"@keycloak/keycloak-admin-client/lib/defs/featureRepresentation\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../context/server-info/ServerInfoProvider\";\nimport { toUpperCase } from \"../util\";\nimport { HelpItem } from \"ui-shared\";\nimport environment from \"../environment\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport useLocaleSort, { mapByKey } from \"../utils/useLocaleSort\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport { DashboardTab, toDashboard } from \"./routes/Dashboard\";\nimport { ProviderInfo } from \"./ProviderInfo\";\n\nimport \"./dashboard.css\";\n\nconst EmptyDashboard = () => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const brandImage = environment.logo ? environment.logo : \"/icon.svg\";\n\n  return (\n    <PageSection variant=\"light\">\n      <EmptyState variant=\"large\">\n        <Brand\n          src={environment.resourceUrl + brandImage}\n          alt=\"Keycloak icon\"\n          className=\"keycloak__dashboard_icon\"\n        />\n        <Title headingLevel=\"h2\" size=\"3xl\">\n          {t(\"welcome\")}\n        </Title>\n        <Title headingLevel=\"h1\" size=\"4xl\">\n          {realm}\n        </Title>\n        <EmptyStateBody>{t(\"introduction\")}</EmptyStateBody>\n      </EmptyState>\n    </PageSection>\n  );\n};\n\ntype FeatureItemProps = {\n  feature: FeatureRepresentation;\n};\n\nconst FeatureItem = ({ feature }: FeatureItemProps) => {\n  const { t } = useTranslation();\n  return (\n    <ListItem className=\"pf-u-mb-sm\">\n      {feature.name}&nbsp;\n      {feature.type === FeatureType.Experimental && (\n        <Label color=\"orange\">{t(\"experimental\")}</Label>\n      )}\n      {feature.type === FeatureType.Preview && (\n        <Label color=\"blue\">{t(\"preview\")}</Label>\n      )}\n      {feature.type === FeatureType.Default && (\n        <Label color=\"green\">{t(\"supported\")}</Label>\n      )}\n    </ListItem>\n  );\n};\n\nconst Dashboard = () => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const serverInfo = useServerInfo();\n  const localeSort = useLocaleSort();\n\n  const sortedFeatures = useMemo(\n    () => localeSort(serverInfo.features ?? [], mapByKey(\"name\")),\n    [serverInfo.features],\n  );\n\n  const disabledFeatures = useMemo(\n    () => sortedFeatures.filter((f) => !f.enabled) || [],\n    [serverInfo.features],\n  );\n\n  const enabledFeatures = useMemo(\n    () => sortedFeatures.filter((f) => f.enabled) || [],\n    [serverInfo.features],\n  );\n\n  const useTab = (tab: DashboardTab) =>\n    useRoutableTab(\n      toDashboard({\n        realm,\n        tab,\n      }),\n    );\n\n  const infoTab = useTab(\"info\");\n  const providersTab = useTab(\"providers\");\n\n  if (Object.keys(serverInfo).length === 0) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <PageSection variant=\"light\">\n        <TextContent className=\"pf-u-mr-sm\">\n          <Text component=\"h1\">{t(\"realmNameTitle\", { name: realm })}</Text>\n        </TextContent>\n      </PageSection>\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <RoutableTabs\n          data-testid=\"dashboard-tabs\"\n          defaultLocation={toDashboard({\n            realm,\n            tab: \"info\",\n          })}\n          isBox\n          mountOnEnter\n        >\n          <Tab\n            id=\"info\"\n            data-testid=\"infoTab\"\n            title={<TabTitleText>{t(\"serverInfo\")}</TabTitleText>}\n            {...infoTab}\n          >\n            <PageSection variant=\"light\">\n              <Grid hasGutter>\n                <GridItem lg={2} sm={12}>\n                  <Card className=\"keycloak__dashboard_card\">\n                    <CardTitle>{t(\"serverInfo\")}</CardTitle>\n                    <CardBody>\n                      <DescriptionList>\n                        <DescriptionListGroup>\n                          <DescriptionListTerm>\n                            {t(\"version\")}\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            {serverInfo.systemInfo?.version}\n                          </DescriptionListDescription>\n                          <DescriptionListTerm>\n                            {t(\"product\")}\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            {toUpperCase(serverInfo.profileInfo?.name!)}\n                          </DescriptionListDescription>\n                        </DescriptionListGroup>\n                      </DescriptionList>\n                    </CardBody>\n                    <CardTitle>{t(\"memory\")}</CardTitle>\n                    <CardBody>\n                      <DescriptionList>\n                        <DescriptionListGroup>\n                          <DescriptionListTerm>\n                            {t(\"totalMemory\")}\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            {serverInfo.memoryInfo?.totalFormated}\n                          </DescriptionListDescription>\n                          <DescriptionListTerm>\n                            {t(\"freeMemory\")}\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            {serverInfo.memoryInfo?.freeFormated}\n                          </DescriptionListDescription>\n                          <DescriptionListTerm>\n                            {t(\"usedMemory\")}\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            {serverInfo.memoryInfo?.usedFormated}\n                          </DescriptionListDescription>\n                        </DescriptionListGroup>\n                      </DescriptionList>\n                    </CardBody>\n                  </Card>\n                </GridItem>\n                <GridItem lg={10} sm={12}>\n                  <Card className=\"keycloak__dashboard_card\">\n                    <CardTitle>{t(\"profile\")}</CardTitle>\n                    <CardBody>\n                      <DescriptionList>\n                        <DescriptionListGroup>\n                          <DescriptionListTerm>\n                            {t(\"enabledFeatures\")}{\" \"}\n                            <HelpItem\n                              fieldLabelId=\"enabledFeatures\"\n                              helpText={t(\"infoEnabledFeatures\")}\n                            />\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            <List variant={ListVariant.inline}>\n                              {enabledFeatures.map((feature) => (\n                                <FeatureItem\n                                  key={feature.name}\n                                  feature={feature}\n                                />\n                              ))}\n                            </List>\n                          </DescriptionListDescription>\n                        </DescriptionListGroup>\n                        <DescriptionListGroup>\n                          <DescriptionListTerm>\n                            {t(\"disabledFeatures\")}{\" \"}\n                            <HelpItem\n                              fieldLabelId=\"disabledFeatures\"\n                              helpText={t(\"infoDisabledFeatures\")}\n                            />\n                          </DescriptionListTerm>\n                          <DescriptionListDescription>\n                            <List variant={ListVariant.inline}>\n                              {disabledFeatures.map((feature) => (\n                                <FeatureItem\n                                  key={feature.name}\n                                  feature={feature}\n                                />\n                              ))}\n                            </List>\n                          </DescriptionListDescription>\n                        </DescriptionListGroup>\n                      </DescriptionList>\n                    </CardBody>\n                  </Card>\n                </GridItem>\n              </Grid>\n            </PageSection>\n          </Tab>\n          <Tab\n            id=\"providers\"\n            data-testid=\"providersTab\"\n            title={<TabTitleText>{t(\"providerInfo\")}</TabTitleText>}\n            {...providersTab}\n          >\n            <ProviderInfo />\n          </Tab>\n        </RoutableTabs>\n      </PageSection>\n    </>\n  );\n};\n\nexport default function DashboardSection() {\n  const { realm } = useRealm();\n  const isMasterRealm = realm === \"master\";\n  return (\n    <>\n      {!isMasterRealm && <EmptyDashboard />}\n      {isMasterRealm && <Dashboard />}\n    </>\n  );\n}\n"],"names":["FeatureType","ProviderInfo","t","useTranslation","serverInfo","useServerInfo","filter","setFilter","useState","open","setOpen","providerInfo","useMemo","key","toggleOpen","option","item","jsx","PageSection","TableToolbar","jsxs","TableComposable","Thead","Tr","Th","Tbody","name","providers","Td","operationalInfo","ExpandableSection","value","EmptyDashboard","realm","useRealm","brandImage","environment","EmptyState","Brand","Title","EmptyStateBody","FeatureItem","feature","ListItem","Label","Dashboard","localeSort","useLocaleSort","sortedFeatures","mapByKey","disabledFeatures","f","enabledFeatures","useTab","tab","useRoutableTab","toDashboard","infoTab","providersTab","KeycloakSpinner","Fragment","TextContent","Text","RoutableTabs","Tab","TabTitleText","Grid","GridItem","Card","CardTitle","CardBody","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","toUpperCase","HelpItem","List","ListVariant","DashboardSection","isMasterRealm"],"mappings":"i+BAAO,IAAIA,GACV,SAAUA,EAAa,CACpBA,EAAY,QAAa,UACzBA,EAAY,kBAAuB,sBACnCA,EAAY,QAAa,UACzBA,EAAY,yBAA8B,8BAC1CA,EAAY,aAAkB,eAC9BA,EAAY,WAAgB,YAChC,GAAGA,IAAgBA,EAAc,CAAA,EAAG,ECO7B,MAAMC,GAAe,IAAM,CAC1B,KAAA,CAAE,EAAAC,GAAMC,IACRC,EAAaC,IACb,CAACC,EAAQC,CAAS,EAAIC,EAAS,EAAE,EACjC,CAACC,EAAMC,CAAO,EAAIF,EAAmB,CAAE,CAAA,EAEvCG,EAAeC,EACnB,IACE,OAAO,QAAQR,EAAW,WAAa,CAAA,CAAE,EAAE,OAAO,CAAC,CAACS,CAAG,IACrDA,EAAI,SAASP,CAAM,CACrB,EACF,CAACA,CAAM,CAAA,EAGHQ,EAAcC,GAAmB,CACjCN,EAAK,SAASM,CAAM,EACtBL,EAAQD,EAAK,OAAQO,GAAiBA,IAASD,CAAM,CAAC,EAEtDL,EAAQ,CAAC,GAAGD,EAAMM,CAAM,CAAC,CAC3B,EAIA,OAAAE,EAACC,EAAY,CAAA,QAAQ,QACnB,SAAAD,EAACE,GAAA,CACC,eAAe,SACf,sBAAuBjB,EAAE,QAAQ,EACjC,kBAAmBK,EAEnB,SAAAa,EAACC,EAAgB,CAAA,QAAQ,UACvB,SAAA,CAACJ,EAAAK,GAAA,CACC,WAACC,EACC,CAAA,SAAA,CAAAN,EAACO,EAAG,CAAA,MAAO,GAAK,SAAAtB,EAAE,KAAK,EAAE,EACxBe,EAAAO,EAAA,CAAI,SAAEtB,EAAA,WAAW,CAAE,CAAA,CAAA,CAAA,CACtB,CACF,CAAA,EACCe,EAAAQ,EAAA,CACE,SAAad,EAAA,IAAI,CAAC,CAACe,EAAM,CAAE,UAAAC,CAAU,CAAC,IACrCP,EAACG,EACC,CAAA,SAAA,CAAAN,EAACW,GAAI,SAAKF,CAAA,CAAA,IACTE,EACC,CAAA,SAAAX,EAAC,MACE,SAAO,OAAA,QAAQU,CAAS,EAAE,IACzB,CAAC,CAACd,EAAK,CAAE,gBAAAgB,EAAiB,MACvB,KACE,CAAA,SAAA,CAAAhB,EACAgB,EACCZ,EAACa,GAAA,CAEC,WAAYrB,EAAK,SAASI,CAAG,EAC7B,SAAU,IAAMC,EAAWD,CAAG,EAC9B,WACEJ,EAAK,SAASI,CAAG,EACbX,EAAE,UAAU,EACZA,EAAE,UAAU,EAGlB,SAAAe,EAACI,GAAgB,QAAS,GACxB,WAACI,EACE,CAAA,SAAA,OAAO,QAAQI,CAAe,EAAE,IAC/B,CAAC,CAAChB,EAAKkB,CAAK,MACTR,EACC,CAAA,SAAA,CAACN,EAAAW,EAAA,CAAI,SAAAf,CAAI,CAAA,EACTI,EAACW,GAAI,SAAMG,CAAA,CAAA,CAAA,CAAA,EAFJlB,CAGT,GAGN,CACF,CAAA,CAAA,EApBKA,CAAA,EAsBL,IAAA,CAAA,EA1BGA,CA2BT,GAGN,CACF,CAAA,CAAA,GArCOa,CAsCT,CACD,EACH,CAAA,EACF,CAAA,CAEJ,CAAA,CAAA,CAEJ,ECpDMM,GAAiB,IAAM,CACrB,KAAA,CAAE,EAAA9B,GAAMC,IACR,CAAE,MAAA8B,GAAUC,IACZC,EAAaC,EAAY,KAAOA,EAAY,KAAO,YAEzD,SACGlB,EAAY,CAAA,QAAQ,QACnB,SAACE,EAAAiB,GAAA,CAAW,QAAQ,QAClB,SAAA,CAAApB,EAACqB,EAAA,CACC,IAAKF,EAAY,YAAcD,EAC/B,IAAI,gBACJ,UAAU,0BAAA,CACZ,EACAlB,EAACsB,GAAM,aAAa,KAAK,KAAK,MAC3B,SAAArC,EAAE,SAAS,EACd,IACCqC,EAAM,CAAA,aAAa,KAAK,KAAK,MAC3B,SACHN,EAAA,EACChB,EAAAuB,GAAA,CAAgB,SAAEtC,EAAA,cAAc,CAAE,CAAA,CAAA,CACrC,CAAA,CACF,CAAA,CAEJ,EAMMuC,EAAc,CAAC,CAAE,QAAAC,KAAgC,CAC/C,KAAA,CAAE,GAAMvC,IAEZ,OAAAiB,EAACuB,GAAS,CAAA,UAAU,aACjB,SAAA,CAAQD,EAAA,KAAK,IACbA,EAAQ,OAAS1C,EAAY,cAC5BiB,EAAC2B,GAAM,MAAM,SAAU,SAAE,EAAA,cAAc,CAAE,CAAA,EAE1CF,EAAQ,OAAS1C,EAAY,SAC5BiB,EAAC2B,GAAM,MAAM,OAAQ,SAAE,EAAA,SAAS,CAAE,CAAA,EAEnCF,EAAQ,OAAS1C,EAAY,SAC5BiB,EAAC2B,GAAM,MAAM,QAAS,SAAE,EAAA,WAAW,CAAE,CAAA,CAEzC,CAAA,CAAA,CAEJ,EAEMC,GAAY,IAAM,CAChB,KAAA,CAAE,EAAA3C,GAAMC,IACR,CAAE,MAAA8B,GAAUC,IACZ9B,EAAaC,IACbyC,EAAaC,IAEbC,EAAiBpC,EACrB,IAAMkC,EAAW1C,EAAW,UAAY,CAAA,EAAI6C,GAAS,MAAM,CAAC,EAC5D,CAAC7C,EAAW,QAAQ,CAAA,EAGhB8C,EAAmBtC,EACvB,IAAMoC,EAAe,OAAQG,GAAM,CAACA,EAAE,OAAO,GAAK,CAAC,EACnD,CAAC/C,EAAW,QAAQ,CAAA,EAGhBgD,EAAkBxC,EACtB,IAAMoC,EAAe,OAAQG,GAAMA,EAAE,OAAO,GAAK,CAAC,EAClD,CAAC/C,EAAW,QAAQ,CAAA,EAGhBiD,EAAUC,GACdC,GACEC,EAAY,CACV,MAAAvB,EACA,IAAAqB,CAAA,CACD,CAAA,EAGCG,EAAUJ,EAAO,MAAM,EACvBK,EAAeL,EAAO,WAAW,EAEvC,OAAI,OAAO,KAAKjD,CAAU,EAAE,SAAW,IAC7BuD,EAAgB,CAAA,CAAA,EAKtBvC,EAAAwC,EAAA,CAAA,SAAA,CAAA3C,EAACC,GAAY,QAAQ,QACnB,WAAC2C,EAAY,CAAA,UAAU,aACrB,SAAC5C,EAAA6C,EAAA,CAAK,UAAU,KAAM,SAAA5D,EAAE,iBAAkB,CAAE,KAAM+B,CAAO,CAAA,EAAE,EAC7D,CACF,CAAA,EACChB,EAAAC,EAAA,CAAY,QAAQ,QAAQ,UAAU,WACrC,SAAAE,EAAC2C,GAAA,CACC,cAAY,iBACZ,gBAAiBP,EAAY,CAC3B,MAAAvB,EACA,IAAK,MAAA,CACN,EACD,MAAK,GACL,aAAY,GAEZ,SAAA,CAAAhB,EAAC+C,EAAA,CACC,GAAG,OACH,cAAY,UACZ,MAAO/C,EAACgD,EAAc,CAAA,SAAA/D,EAAE,YAAY,EAAE,EACrC,GAAGuD,EAEJ,WAACvC,EAAY,CAAA,QAAQ,QACnB,SAACE,EAAA8C,EAAA,CAAK,UAAS,GACb,SAAA,CAACjD,EAAAkD,EAAA,CAAS,GAAI,EAAG,GAAI,GACnB,SAAC/C,EAAAgD,EAAA,CAAK,UAAU,2BACd,SAAA,CAACnD,EAAAoD,EAAA,CAAW,SAAEnE,EAAA,YAAY,CAAE,CAAA,EAC3Be,EAAAqD,EAAA,CACC,SAACrD,EAAAsD,EAAA,CACC,WAACC,EACC,CAAA,SAAA,CAACvD,EAAAwD,EAAA,CACE,SAAEvE,EAAA,SAAS,CACd,CAAA,EACCe,EAAAyD,EAAA,CACE,SAAWtE,EAAA,YAAY,QAC1B,EACCa,EAAAwD,EAAA,CACE,SAAEvE,EAAA,SAAS,CACd,CAAA,IACCwE,EACE,CAAA,SAAAC,EAAYvE,EAAW,aAAa,IAAK,EAC5C,CAAA,CACF,CAAA,CACF,CAAA,EACF,EACCa,EAAAoD,EAAA,CAAW,SAAEnE,EAAA,QAAQ,CAAE,CAAA,EACvBe,EAAAqD,EAAA,CACC,SAACrD,EAAAsD,EAAA,CACC,WAACC,EACC,CAAA,SAAA,CAACvD,EAAAwD,EAAA,CACE,SAAEvE,EAAA,aAAa,CAClB,CAAA,EACCe,EAAAyD,EAAA,CACE,SAAWtE,EAAA,YAAY,cAC1B,EACCa,EAAAwD,EAAA,CACE,SAAEvE,EAAA,YAAY,CACjB,CAAA,EACCe,EAAAyD,EAAA,CACE,SAAWtE,EAAA,YAAY,aAC1B,EACCa,EAAAwD,EAAA,CACE,SAAEvE,EAAA,YAAY,CACjB,CAAA,EACCe,EAAAyD,EAAA,CACE,SAAWtE,EAAA,YAAY,aAC1B,CAAA,CACF,CAAA,CACF,CAAA,EACF,CAAA,CAAA,CACF,CACF,CAAA,EACAa,EAACkD,GAAS,GAAI,GAAI,GAAI,GACpB,SAAA/C,EAACgD,EAAK,CAAA,UAAU,2BACd,SAAA,CAACnD,EAAAoD,EAAA,CAAW,SAAEnE,EAAA,SAAS,CAAE,CAAA,EACzBe,EAACqD,EACC,CAAA,SAAAlD,EAACmD,EACC,CAAA,SAAA,CAAAnD,EAACoD,EACC,CAAA,SAAA,CAAApD,EAACqD,EACE,CAAA,SAAA,CAAAvE,EAAE,iBAAiB,EAAG,IACvBe,EAAC2D,EAAA,CACC,aAAa,kBACb,SAAU1E,EAAE,qBAAqB,CAAA,CACnC,CAAA,EACF,EACAe,EAACyD,EACC,CAAA,SAAAzD,EAAC4D,EAAK,CAAA,QAASC,EAAY,OACxB,SAAA1B,EAAgB,IAAKV,GACpBzB,EAACwB,EAAA,CAEC,QAAAC,CAAA,EADKA,EAAQ,IAAA,CAGhB,EACH,CACF,CAAA,CAAA,EACF,IACC8B,EACC,CAAA,SAAA,CAAApD,EAACqD,EACE,CAAA,SAAA,CAAAvE,EAAE,kBAAkB,EAAG,IACxBe,EAAC2D,EAAA,CACC,aAAa,mBACb,SAAU1E,EAAE,sBAAsB,CAAA,CACpC,CAAA,EACF,EACAe,EAACyD,EACC,CAAA,SAAAzD,EAAC4D,EAAK,CAAA,QAASC,EAAY,OACxB,SAAA5B,EAAiB,IAAKR,GACrBzB,EAACwB,EAAA,CAEC,QAAAC,CAAA,EADKA,EAAQ,IAAA,CAGhB,EACH,CACF,CAAA,CAAA,EACF,CAAA,CAAA,CACF,CACF,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAAA,CAAA,CACF,CACF,CAAA,CAAA,CACF,EACAzB,EAAC+C,EAAA,CACC,GAAG,YACH,cAAY,eACZ,MAAO/C,EAACgD,EAAc,CAAA,SAAA/D,EAAE,cAAc,EAAE,EACvC,GAAGwD,EAEJ,WAACzD,GAAa,EAAA,CAAA,CAChB,CAAA,CAAA,CAAA,EAEJ,CACF,CAAA,CAAA,CAEJ,EAEA,SAAwB8E,IAAmB,CACnC,KAAA,CAAE,MAAA9C,GAAUC,IACZ8C,EAAgB/C,IAAU,SAChC,OAEKb,EAAAwC,EAAA,CAAA,SAAA,CAAC,CAAAoB,KAAkBhD,GAAe,EAAA,EAClCgD,KAAkBnC,GAAU,EAAA,CAC/B,CAAA,CAAA,CAEJ"}