{"version":3,"file":"CreateUser-e0FYYz_z.js","sources":["../../src/user/CreateUser.tsx"],"sourcesContent":["import type GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport type { UserProfileMetadata } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport { AlertVariant, PageSection } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport { useFetch } from \"../utils/useFetch\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport { UserForm } from \"./UserForm\";\nimport { isUserProfileError, setUserProfileServerError } from \"ui-shared\";\nimport { UserFormFields, toUserRepresentation } from \"./form-state\";\nimport { toUser } from \"./routes/User\";\n\nimport \"./user-section.css\";\n\nexport default function CreateUser() {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const navigate = useNavigate();\n  const { realm: realmName } = useRealm();\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const form = useForm<UserFormFields>({ mode: \"onChange\" });\n  const [addedGroups, setAddedGroups] = useState<GroupRepresentation[]>([]);\n  const [realm, setRealm] = useState<RealmRepresentation>();\n  const [userProfileMetadata, setUserProfileMetadata] =\n    useState<UserProfileMetadata>();\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.realms.findOne({ realm: realmName }),\n        adminClient.users.getProfileMetadata({ realm: realmName }),\n      ]),\n    ([realm, userProfileMetadata]) => {\n      if (!realm) {\n        throw new Error(t(\"notFound\"));\n      }\n\n      setRealm(realm);\n\n      const isUserProfileEnabled =\n        isFeatureEnabled(Feature.DeclarativeUserProfile) &&\n        realm.attributes?.userProfileEnabled === \"true\";\n\n      setUserProfileMetadata(\n        isUserProfileEnabled ? userProfileMetadata : undefined,\n      );\n    },\n    [],\n  );\n\n  const save = async (data: UserFormFields) => {\n    try {\n      const createdUser = await adminClient.users.create({\n        ...toUserRepresentation(data),\n        groups: addedGroups.map((group) => group.path!),\n        enabled: true,\n      });\n\n      addAlert(t(\"userCreated\"), AlertVariant.success);\n      navigate(\n        toUser({ id: createdUser.id, realm: realmName, tab: \"settings\" }),\n      );\n    } catch (error) {\n      if (isUserProfileError(error)) {\n        setUserProfileServerError(error, form.setError, (key, param) =>\n          t(key as string, { ...param }),\n        );\n      } else {\n        addError(\"userCreateError\", error);\n      }\n    }\n  };\n\n  if (!realm) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <ViewHeader\n        titleKey={t(\"createUser\")}\n        className=\"kc-username-view-header\"\n      />\n      <PageSection variant=\"light\">\n        <UserForm\n          form={form}\n          realm={realm}\n          userProfileMetadata={userProfileMetadata}\n          onGroupsUpdate={setAddedGroups}\n          save={save}\n        />\n      </PageSection>\n    </>\n  );\n}\n"],"names":["CreateUser","t","useTranslation","addAlert","addError","useAlerts","navigate","useNavigate","realmName","useRealm","isFeatureEnabled","useIsFeatureEnabled","form","useForm","addedGroups","setAddedGroups","useState","realm","setRealm","userProfileMetadata","setUserProfileMetadata","useFetch","adminClient","isUserProfileEnabled","Feature","save","data","createdUser","toUserRepresentation","group","AlertVariant","toUser","error","isUserProfileError","setUserProfileServerError","key","param","jsxs","Fragment","jsx","ViewHeader","PageSection","UserForm","KeycloakSpinner"],"mappings":"sjCAuBA,SAAwBA,IAAa,CAC7B,KAAA,CAAE,EAAAC,GAAMC,IACR,CAAE,SAAAC,EAAU,SAAAC,CAAS,EAAIC,EAAU,EACnCC,EAAWC,IACX,CAAE,MAAOC,CAAU,EAAIC,EAAS,EAChCC,EAAmBC,IACnBC,EAAOC,EAAwB,CAAE,KAAM,UAAY,CAAA,EACnD,CAACC,EAAaC,CAAc,EAAIC,EAAgC,CAAE,CAAA,EAClE,CAACC,EAAOC,CAAQ,EAAIF,EAA8B,EAClD,CAACG,EAAqBC,CAAsB,EAChDJ,EAA8B,EAEhCK,EACE,IACE,QAAQ,IAAI,CACVC,EAAY,OAAO,QAAQ,CAAE,MAAOd,EAAW,EAC/Cc,EAAY,MAAM,mBAAmB,CAAE,MAAOd,EAAW,CAAA,CAC1D,EACH,CAAC,CAACS,EAAOE,CAAmB,IAAM,CAChC,GAAI,CAACF,EACH,MAAM,IAAI,MAAMhB,EAAE,UAAU,CAAC,EAG/BiB,EAASD,CAAK,EAEd,MAAMM,EACJb,EAAiBc,EAAQ,sBAAsB,GAC/CP,EAAM,YAAY,qBAAuB,OAE3CG,EACEG,EAAuBJ,EAAsB,MAAA,CAEjD,EACA,CAAC,CAAA,EAGG,MAAAM,EAAO,MAAOC,GAAyB,CACvC,GAAA,CACF,MAAMC,EAAc,MAAML,EAAY,MAAM,OAAO,CACjD,GAAGM,EAAqBF,CAAI,EAC5B,OAAQZ,EAAY,IAAKe,GAAUA,EAAM,IAAK,EAC9C,QAAS,EAAA,CACV,EAED1B,EAASF,EAAE,aAAa,EAAG6B,EAAa,OAAO,EAC/CxB,EACEyB,EAAO,CAAE,GAAIJ,EAAY,GAAI,MAAOnB,EAAW,IAAK,WAAY,CAAA,QAE3DwB,EAAO,CACVC,EAAmBD,CAAK,EAC1BE,EAA0BF,EAAOpB,EAAK,SAAU,CAACuB,EAAKC,IACpDnC,EAAEkC,EAAe,CAAE,GAAGC,EAAO,CAAA,EAG/BhC,EAAS,kBAAmB4B,CAAK,CAErC,CAAA,EAGF,OAAKf,EAMDoB,EAAAC,EAAA,CAAA,SAAA,CAAAC,EAACC,EAAA,CACC,SAAUvC,EAAE,YAAY,EACxB,UAAU,yBAAA,CACZ,EACAsC,EAACE,EAAY,CAAA,QAAQ,QACnB,SAAAF,EAACG,EAAA,CACC,KAAA9B,EACA,MAAAK,EACA,oBAAAE,EACA,eAAgBJ,EAChB,KAAAU,CAAA,CAAA,EAEJ,CACF,CAAA,CAAA,IAlBQkB,EAAgB,CAAA,CAAA,CAoB5B"}