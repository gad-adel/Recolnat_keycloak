{"version":3,"file":"ClientDetails-WHh2ucx3.js","sources":["../../../../node_modules/.pnpm/@patternfly+react-styles@4.92.8/node_modules/@patternfly/react-styles/css/components/CodeBlock/code-block.mjs","../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlock.js","../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/CodeBlock/CodeBlockAction.js","../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/Panel/PanelHeader.js","../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/Text/TextList.js","../../../../node_modules/.pnpm/@patternfly+react-core@4.278.0_react-dom@18.2.0_react@18.2.0/node_modules/@patternfly/react-core/dist/esm/components/Text/TextListItem.js","../../src/components/download-dialog/DownloadDialog.tsx","../../src/clients/advanced/TokenLifespan.tsx","../../src/clients/advanced/AdvancedSettings.tsx","../../src/clients/advanced/AuthenticationOverrides.tsx","../../src/components/time-selector/TimeSelectorForm.tsx","../../src/clients/advanced/AddHostDialog.tsx","../../src/clients/advanced/ClusteringPanel.tsx","../../src/clients/advanced/ApplicationUrls.tsx","../../src/clients/advanced/FineGrainOpenIdConnect.tsx","../../src/clients/advanced/FineGrainSamlEndpointConfig.tsx","../../src/clients/advanced/OpenIdConnectCompatibilityModes.tsx","../../src/clients/advanced/RevocationPanel.tsx","../../src/clients/AdvancedTab.tsx","../../src/clients/ClientSessions.tsx","../../src/clients/add/AccessSettings.tsx","../../src/clients/add/LoginSettingsPanel.tsx","../../src/clients/add/LogoutPanel.tsx","../../src/clients/add/SamlConfig.tsx","../../src/clients/add/SamlSignature.tsx","../../src/clients/ClientSettings.tsx","../../src/clients/authorization/KeyBasedAttributeInput.tsx","../../src/clients/authorization/AuthorizationDataModal.tsx","../../src/clients/authorization/AuthorizationEvaluateResourcePolicies.tsx","../../src/clients/authorization/AuthorizationEvaluateResource.tsx","../../src/clients/authorization/evaluate/Results.tsx","../../src/clients/authorization/AuthorizationEvaluate.tsx","../../src/clients/authorization/AuthorizationExport.tsx","../../src/clients/authorization/DetailDescription.tsx","../../src/clients/authorization/EmptyPermissionsState.tsx","../../src/clients/authorization/MoreLabel.tsx","../../src/clients/authorization/SearchDropdown.tsx","../../src/clients/authorization/Permissions.tsx","../../src/clients/authorization/Policies.tsx","../../src/clients/authorization/DetailCell.tsx","../../src/clients/authorization/Resources.tsx","../../src/clients/authorization/Scopes.tsx","../../src/clients/authorization/ImportDialog.tsx","../../src/clients/authorization/Settings.tsx","../../src/utils/useQueryPermission.ts","../../src/clients/scopes/CopyToClipboardButton.tsx","../../src/clients/credentials/ClientSecret.tsx","../../src/clients/credentials/SignedJWT.tsx","../../src/clients/credentials/X509.tsx","../../src/clients/credentials/Credentials.tsx","../../src/clients/keys/Certificate.tsx","../../src/clients/keys/StoreSettings.tsx","../../src/clients/keys/GenerateKeyDialog.tsx","../../src/clients/keys/ImportKeyDialog.tsx","../../src/clients/keys/Keys.tsx","../../src/clients/keys/ExportSamlKeyDialog.tsx","../../src/clients/keys/SamlKeysDialog.tsx","../../src/clients/keys/SamlImportKeyDialog.tsx","../../src/clients/keys/SamlKeys.tsx","../../src/clients/scopes/ClientScopes.tsx","../../src/clients/scopes/GeneratedCodeTab.tsx","../../src/clients/scopes/EvaluateScopes.tsx","../../src/clients/service-account/ServiceAccount.tsx","../../src/clients/ClientDetails.tsx"],"sourcesContent":["import './code-block.css';\nexport default {\n  \"codeBlock\": \"pf-c-code-block\",\n  \"codeBlockActions\": \"pf-c-code-block__actions\",\n  \"codeBlockCode\": \"pf-c-code-block__code\",\n  \"codeBlockContent\": \"pf-c-code-block__content\",\n  \"codeBlockHeader\": \"pf-c-code-block__header\",\n  \"codeBlockPre\": \"pf-c-code-block__pre\"\n};","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/CodeBlock/code-block';\nimport { css } from '@patternfly/react-styles';\nexport const CodeBlock = (_a) => {\n    var { children = null, className, actions = null } = _a, props = __rest(_a, [\"children\", \"className\", \"actions\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.codeBlock, className) }, props),\n        React.createElement(\"div\", { className: css(styles.codeBlockHeader) },\n            React.createElement(\"div\", { className: css(styles.codeBlockActions) }, actions && actions)),\n        React.createElement(\"div\", { className: css(styles.codeBlockContent) }, children)));\n};\nCodeBlock.displayName = 'CodeBlock';\n//# sourceMappingURL=CodeBlock.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nexport const CodeBlockAction = (_a) => {\n    var { children = null, className } = _a, props = __rest(_a, [\"children\", \"className\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css('pf-c-code-block__actions-item', className) }, props), children));\n};\nCodeBlockAction.displayName = 'CodeBlockAction';\n//# sourceMappingURL=CodeBlockAction.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Panel/panel';\nimport { css } from '@patternfly/react-styles';\nexport const PanelHeader = (_a) => {\n    var { className, children } = _a, props = __rest(_a, [\"className\", \"children\"]);\n    return (React.createElement(\"div\", Object.assign({ className: css(styles.panelHeader, className) }, props), children));\n};\nPanelHeader.displayName = 'PanelHeader';\n//# sourceMappingURL=PanelHeader.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport styles from '@patternfly/react-styles/css/components/Content/content';\nimport { css } from '@patternfly/react-styles';\nexport var TextListVariants;\n(function (TextListVariants) {\n    TextListVariants[\"ul\"] = \"ul\";\n    TextListVariants[\"ol\"] = \"ol\";\n    TextListVariants[\"dl\"] = \"dl\";\n})(TextListVariants || (TextListVariants = {}));\nexport const TextList = (_a) => {\n    var { children = null, className = '', component = TextListVariants.ul, isPlain = false } = _a, props = __rest(_a, [\"children\", \"className\", \"component\", \"isPlain\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: css(isPlain && styles.modifiers.plain, className) }), children));\n};\nTextList.displayName = 'TextList';\n//# sourceMappingURL=TextList.js.map","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { css } from '@patternfly/react-styles';\nexport var TextListItemVariants;\n(function (TextListItemVariants) {\n    TextListItemVariants[\"li\"] = \"li\";\n    TextListItemVariants[\"dt\"] = \"dt\";\n    TextListItemVariants[\"dd\"] = \"dd\";\n})(TextListItemVariants || (TextListItemVariants = {}));\nexport const TextListItem = (_a) => {\n    var { children = null, className = '', component = TextListItemVariants.li } = _a, props = __rest(_a, [\"children\", \"className\", \"component\"]);\n    const Component = component;\n    return (React.createElement(Component, Object.assign({}, props, { className: css(className) }), children));\n};\nTextListItem.displayName = 'TextListItem';\n//# sourceMappingURL=TextListItem.js.map","import { fetchWithError } from \"@keycloak/keycloak-admin-client\";\nimport {\n  Form,\n  FormGroup,\n  ModalVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Stack,\n  StackItem,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem, useHelp } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { addTrailingSlash, prettyPrintJSON } from \"../../util\";\nimport { getAuthorizationHeaders } from \"../../utils/getAuthorizationHeaders\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { ConfirmDialogModal } from \"../confirm-dialog/ConfirmDialog\";\nimport { KeycloakTextArea } from \"../keycloak-text-area/KeycloakTextArea\";\n\ntype DownloadDialogProps = {\n  id: string;\n  protocol?: string;\n  open: boolean;\n  toggleDialog: () => void;\n};\n\nexport const DownloadDialog = ({\n  id,\n  open,\n  toggleDialog,\n  protocol = \"openid-connect\",\n}: DownloadDialogProps) => {\n  const { realm } = useRealm();\n  const { t } = useTranslation();\n  const { enabled } = useHelp();\n  const serverInfo = useServerInfo();\n\n  const configFormats = serverInfo.clientInstallations![protocol];\n  const [selected, setSelected] = useState(\n    configFormats[configFormats.length - 1].id,\n  );\n  const [snippet, setSnippet] = useState<string | ArrayBuffer>();\n  const [openType, setOpenType] = useState(false);\n\n  const selectedConfig = useMemo(\n    () => configFormats.find((config) => config.id === selected) ?? null,\n    [selected],\n  );\n\n  const sanitizeSnippet = (snippet: string) =>\n    snippet.replace(\n      /<PrivateKeyPem>.*<\\/PrivateKeyPem>/gs,\n      `<PrivateKeyPem>${t(\"privateKeyMask\")}</PrivateKeyPem>`,\n    );\n\n  useFetch(\n    async () => {\n      if (selectedConfig?.mediaType === \"application/zip\") {\n        const response = await fetchWithError(\n          `${addTrailingSlash(\n            adminClient.baseUrl,\n          )}admin/realms/${realm}/clients/${id}/installation/providers/${selected}`,\n          {\n            method: \"GET\",\n            headers: getAuthorizationHeaders(\n              await adminClient.getAccessToken(),\n            ),\n          },\n        );\n\n        return response.arrayBuffer();\n      } else {\n        const snippet = await adminClient.clients.getInstallationProviders({\n          id,\n          providerId: selected,\n        });\n        if (typeof snippet === \"string\") {\n          return sanitizeSnippet(snippet);\n        } else {\n          return prettyPrintJSON(snippet);\n        }\n      }\n    },\n    (snippet) => setSnippet(snippet),\n    [id, selected],\n  );\n\n  // Clear snippet when selected config changes, this prevents old snippets from being displayed during fetch.\n  useEffect(() => setSnippet(\"\"), [id, selected]);\n\n  return (\n    <ConfirmDialogModal\n      titleKey={t(\"downloadAdaptorTitle\")}\n      continueButtonLabel={t(\"download\")}\n      onConfirm={() => {\n        saveAs(\n          new Blob([snippet!], { type: selectedConfig?.mediaType }),\n          selectedConfig?.filename,\n        );\n      }}\n      open={open}\n      toggleDialog={toggleDialog}\n      variant={ModalVariant.medium}\n    >\n      <Form>\n        <Stack hasGutter>\n          <StackItem>\n            <FormGroup\n              fieldId=\"type\"\n              label={t(\"formatOption\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"downloadType\")}\n                  fieldLabelId=\"formatOption\"\n                />\n              }\n            >\n              <Select\n                toggleId=\"type\"\n                isOpen={openType}\n                onToggle={(isExpanded) => setOpenType(isExpanded)}\n                variant={SelectVariant.single}\n                value={selected}\n                selections={selected}\n                onSelect={(_, value) => {\n                  setSelected(value.toString());\n                  setOpenType(false);\n                }}\n                aria-label=\"Select Input\"\n                menuAppendTo={() => document.body}\n              >\n                {configFormats.map((configFormat) => (\n                  <SelectOption\n                    key={configFormat.id}\n                    value={configFormat.id}\n                    isSelected={selected === configFormat.id}\n                    description={enabled ? configFormat.helpText : undefined}\n                  >\n                    {configFormat.displayType}\n                  </SelectOption>\n                ))}\n              </Select>\n            </FormGroup>\n          </StackItem>\n          {!selectedConfig?.downloadOnly && (\n            <StackItem isFilled>\n              <FormGroup\n                fieldId=\"details\"\n                label={t(\"details\")}\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"detailsHelp\")}\n                    fieldLabelId=\"details\"\n                  />\n                }\n              >\n                <KeycloakTextArea\n                  id=\"details\"\n                  readOnly\n                  rows={12}\n                  resizeOrientation=\"vertical\"\n                  value={snippet && typeof snippet === \"string\" ? snippet : \"\"}\n                  aria-label=\"text area example\"\n                />\n              </FormGroup>\n            </StackItem>\n          )}\n        </Stack>\n      </Form>\n    </ConfirmDialogModal>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport {\n  TimeSelector,\n  Unit,\n} from \"../../components/time-selector/TimeSelector\";\n\ntype TokenLifespanProps = {\n  id: string;\n  name: string;\n  defaultValue?: number;\n  units?: Unit[];\n};\n\nconst inherited = \"tokenLifespan.inherited\";\nconst expires = \"tokenLifespan.expires\";\n\nexport const TokenLifespan = ({\n  id,\n  name,\n  defaultValue,\n  units,\n}: TokenLifespanProps) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n\n  const [focused, setFocused] = useState(false);\n  const onFocus = () => setFocused(true);\n  const onBlur = () => setFocused(false);\n\n  const { control } = useFormContext();\n  const isExpireSet = (value: string | number) =>\n    typeof value === \"number\" ||\n    (typeof value === \"string\" && value !== \"\") ||\n    focused;\n\n  return (\n    <FormGroup\n      label={t(id)}\n      fieldId={id}\n      labelIcon={<HelpItem helpText={t(`${id}Help`)} fieldLabelId={id} />}\n    >\n      <Controller\n        name={name}\n        defaultValue=\"\"\n        control={control}\n        render={({ field }) => (\n          <Split hasGutter>\n            <SplitItem>\n              <Select\n                variant={SelectVariant.single}\n                onToggle={setOpen}\n                isOpen={open}\n                onSelect={(_, value) => {\n                  field.onChange(value);\n                  setOpen(false);\n                }}\n                selections={[\n                  isExpireSet(field.value) ? t(expires) : t(inherited),\n                ]}\n              >\n                <SelectOption value=\"\">{t(inherited)}</SelectOption>\n                <SelectOption value={60}>{t(expires)}</SelectOption>\n              </Select>\n            </SplitItem>\n            <SplitItem>\n              <TimeSelector\n                validated={\n                  isExpireSet(field.value) && field.value! < 1\n                    ? \"warning\"\n                    : \"default\"\n                }\n                units={units}\n                value={field.value === \"\" ? defaultValue : field.value}\n                onChange={field.onChange}\n                onFocus={onFocus}\n                onBlur={onBlur}\n                min={1}\n                isDisabled={!isExpireSet(field.value)}\n              />\n            </SplitItem>\n          </Split>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import RealmRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/realmRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { KeyValueInput } from \"../../components/key-value-form/KeyValueInput\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\nimport { TimeSelector } from \"../../components/time-selector/TimeSelector\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { FormFields } from \"../ClientDetails\";\nimport { TokenLifespan } from \"./TokenLifespan\";\n\nimport useIsFeatureEnabled, { Feature } from \"../../utils/useIsFeatureEnabled\";\n\ntype AdvancedSettingsProps = {\n  save: () => void;\n  reset: () => void;\n  protocol?: string;\n  hasConfigureAccess?: boolean;\n};\n\nexport const AdvancedSettings = ({\n  save,\n  reset,\n  protocol,\n  hasConfigureAccess,\n}: AdvancedSettingsProps) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n\n  const [realm, setRealm] = useState<RealmRepresentation>();\n  const { realm: realmName } = useRealm();\n\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const isDPoPEnabled = isFeatureEnabled(Feature.DPoP);\n\n  useFetch(\n    () => adminClient.realms.findOne({ realm: realmName }),\n    setRealm,\n    [],\n  );\n\n  const { control } = useFormContext();\n  return (\n    <FormAccess\n      role=\"manage-realm\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      {protocol !== \"openid-connect\" && (\n        <FormGroup\n          label={t(\"assertionLifespan\")}\n          fieldId=\"assertionLifespan\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"assertionLifespanHelp\")}\n              fieldLabelId=\"assertionLifespan\"\n            />\n          }\n        >\n          <Controller\n            name={convertAttributeNameToForm<FormFields>(\n              \"attributes.saml.assertion.lifespan\",\n            )}\n            defaultValue=\"\"\n            control={control}\n            render={({ field }) => (\n              <TimeSelector\n                units={[\"minute\", \"day\", \"hour\"]}\n                value={field.value}\n                onChange={field.onChange}\n              />\n            )}\n          />\n        </FormGroup>\n      )}\n      {protocol === \"openid-connect\" && (\n        <>\n          <TokenLifespan\n            id=\"accessTokenLifespan\"\n            name={convertAttributeNameToForm(\n              \"attributes.access.token.lifespan\",\n            )}\n            defaultValue={realm?.accessTokenLifespan}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          <TokenLifespan\n            id=\"clientSessionIdle\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.session.idle.timeout\",\n            )}\n            defaultValue={realm?.clientSessionIdleTimeout}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          <TokenLifespan\n            id=\"clientSessionMax\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.session.max.lifespan\",\n            )}\n            defaultValue={realm?.clientSessionMaxLifespan}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          <TokenLifespan\n            id=\"clientOfflineSessionIdle\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.offline.session.idle.timeout\",\n            )}\n            defaultValue={realm?.offlineSessionIdleTimeout}\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          <TokenLifespan\n            id=\"clientOfflineSessionMax\"\n            name={convertAttributeNameToForm(\n              \"attributes.client.offline.session.max.lifespan\",\n            )}\n            defaultValue={\n              realm?.offlineSessionMaxLifespanEnabled\n                ? realm.offlineSessionMaxLifespan\n                : undefined\n            }\n            units={[\"minute\", \"day\", \"hour\"]}\n          />\n\n          <FormGroup\n            label={t(\"oAuthMutual\")}\n            fieldId=\"oAuthMutual\"\n            hasNoPaddingTop\n            labelIcon={\n              <HelpItem\n                helpText={t(\"oAuthMutualHelp\")}\n                fieldLabelId=\"oAuthMutual\"\n              />\n            }\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.tls.client.certificate.bound.access.tokens\",\n              )}\n              defaultValue={false}\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"oAuthMutual-switch\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(\"\" + value)}\n                  aria-label={t(\"oAuthMutual\")}\n                />\n              )}\n            />\n          </FormGroup>\n          {isDPoPEnabled && (\n            <FormGroup\n              label={t(\"oAuthDPoP\")}\n              fieldId=\"oAuthDPoP\"\n              hasNoPaddingTop\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"oAuthDPoPHelp\")}\n                  fieldLabelId=\"oAuthDPoP\"\n                />\n              }\n            >\n              <Controller\n                name={convertAttributeNameToForm<FormFields>(\n                  \"attributes.dpop.bound.access.tokens\",\n                )}\n                defaultValue={false}\n                control={control}\n                render={({ field }) => (\n                  <Switch\n                    id=\"oAuthDPoP-switch\"\n                    label={t(\"on\")}\n                    labelOff={t(\"off\")}\n                    isChecked={field.value === \"true\"}\n                    onChange={(value) => field.onChange(\"\" + value)}\n                    aria-label={t(\"oAuthDPoP\")}\n                  />\n                )}\n              />\n            </FormGroup>\n          )}\n          <FormGroup\n            label={t(\"keyForCodeExchange\")}\n            fieldId=\"keyForCodeExchange\"\n            hasNoPaddingTop\n            labelIcon={\n              <HelpItem\n                helpText={t(\"keyForCodeExchangeHelp\")}\n                fieldLabelId=\"keyForCodeExchange\"\n              />\n            }\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.pkce.code.challenge.method\",\n              )}\n              defaultValue=\"\"\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"keyForCodeExchange\"\n                  variant={SelectVariant.single}\n                  onToggle={setOpen}\n                  isOpen={open}\n                  onSelect={(_, value) => {\n                    field.onChange(value);\n                    setOpen(false);\n                  }}\n                  selections={[field.value || t(\"choose\")]}\n                >\n                  {[\"\", \"S256\", \"plain\"].map((v) => (\n                    <SelectOption key={v} value={v}>\n                      {v || t(\"choose\")}\n                    </SelectOption>\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"pushedAuthorizationRequestRequired\")}\n            fieldId=\"pushedAuthorizationRequestRequired\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"pushedAuthorizationRequestRequiredHelp\")}\n                fieldLabelId=\"pushedAuthorizationRequestRequired\"\n              />\n            }\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.require.pushed.authorization.requests\",\n              )}\n              defaultValue=\"false\"\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"pushedAuthorizationRequestRequired\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(value.toString())}\n                  aria-label={t(\"pushedAuthorizationRequestRequired\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"acrToLoAMapping\")}\n            fieldId=\"acrToLoAMapping\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"acrToLoAMappingHelp\")}\n                fieldLabelId=\"acrToLoAMapping\"\n              />\n            }\n          >\n            <KeyValueInput\n              name={convertAttributeNameToForm(\"attributes.acr.loa.map\")}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"defaultACRValues\")}\n            fieldId=\"defaultACRValues\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"defaultACRValuesHelp\")}\n                fieldLabelId=\"defaultACRValues\"\n              />\n            }\n          >\n            <MultiLineInput\n              id=\"defaultACRValues\"\n              aria-label=\"defaultACRValues\"\n              name={convertAttributeNameToForm(\"attributes.default.acr.values\")}\n              stringify\n            />\n          </FormGroup>\n        </>\n      )}\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCAdvancedSave\"\n        >\n          {t(\"save\")}\n        </Button>\n        <Button variant=\"link\" onClick={reset} data-testid=\"OIDCAdvancedRevert\">\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { sortBy } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useFetch } from \"../../utils/useFetch\";\n\ntype AuthenticationOverridesProps = {\n  save: () => void;\n  reset: () => void;\n  protocol?: string;\n  hasConfigureAccess?: boolean;\n};\n\nexport const AuthenticationOverrides = ({\n  protocol,\n  save,\n  reset,\n  hasConfigureAccess,\n}: AuthenticationOverridesProps) => {\n  const { t } = useTranslation();\n  const [flows, setFlows] = useState<JSX.Element[]>([]);\n  const [browserFlowOpen, setBrowserFlowOpen] = useState(false);\n  const [directGrantOpen, setDirectGrantOpen] = useState(false);\n\n  const { control } = useFormContext();\n\n  useFetch(\n    () => adminClient.authenticationManagement.getFlows(),\n    (flows) => {\n      let filteredFlows = [\n        ...flows.filter((flow) => flow.providerId !== \"client-flow\"),\n      ];\n      filteredFlows = sortBy(filteredFlows, [(f) => f.alias]);\n      setFlows([\n        <SelectOption key=\"empty\" value=\"\">\n          {t(\"choose\")}\n        </SelectOption>,\n        ...filteredFlows.map((flow) => (\n          <SelectOption key={flow.id} value={flow.id}>\n            {flow.alias}\n          </SelectOption>\n        )),\n      ]);\n    },\n    [],\n  );\n\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <FormGroup\n        label={t(\"browserFlow\")}\n        fieldId=\"browserFlow\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"browserFlowHelp\")}\n            fieldLabelId=\"browserFlow\"\n          />\n        }\n      >\n        <Controller\n          name=\"authenticationFlowBindingOverrides.browser\"\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"browserFlow\"\n              variant={SelectVariant.single}\n              onToggle={setBrowserFlowOpen}\n              isOpen={browserFlowOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setBrowserFlowOpen(false);\n              }}\n              selections={[field.value]}\n            >\n              {flows}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      {protocol === \"openid-connect\" && (\n        <FormGroup\n          label={t(\"directGrant\")}\n          fieldId=\"directGrant\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"directGrantHelp\")}\n              fieldLabelId=\"directGrant\"\n            />\n          }\n        >\n          <Controller\n            name=\"authenticationFlowBindingOverrides.direct_grant\"\n            defaultValue=\"\"\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"directGrant\"\n                variant={SelectVariant.single}\n                onToggle={setDirectGrantOpen}\n                isOpen={directGrantOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value);\n                  setDirectGrantOpen(false);\n                }}\n                selections={[field.value]}\n              >\n                {flows}\n              </Select>\n            )}\n          />\n        </FormGroup>\n      )}\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCAuthFlowOverrideSave\"\n        >\n          {t(\"save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          onClick={reset}\n          data-testid=\"OIDCAuthFlowOverrideRevert\"\n        >\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import { useController } from \"react-hook-form\";\nimport { TimeSelector, TimeSelectorProps } from \"./TimeSelector\";\n\ntype TimeSelectorFormProps = TimeSelectorProps & {\n  name: string;\n};\n\nexport const TimeSelectorForm = (props: TimeSelectorFormProps) => {\n  const { field } = useController(props);\n\n  return <TimeSelector {...props} {...field} />;\n};\n","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n} from \"@patternfly/react-core\";\nimport { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\ntype FormFields = {\n  node: string;\n};\n\ntype AddHostDialogProps = {\n  clientId: string;\n  isOpen: boolean;\n  onAdded: (host: string) => void;\n  onClose: () => void;\n};\n\nexport const AddHostDialog = ({\n  clientId: id,\n  isOpen,\n  onAdded,\n  onClose,\n}: AddHostDialogProps) => {\n  const { t } = useTranslation();\n  const {\n    register,\n    handleSubmit,\n    formState: { isDirty, isValid },\n  } = useForm<FormFields>();\n  const { addAlert, addError } = useAlerts();\n\n  async function onSubmit({ node }: FormFields) {\n    try {\n      await adminClient.clients.addClusterNode({\n        id,\n        node,\n      });\n      onAdded(node);\n      addAlert(t(\"addedNodeSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"addedNodeFail\", error);\n    }\n\n    onClose();\n  }\n\n  return (\n    <Modal\n      title={t(\"addNode\")}\n      isOpen={isOpen}\n      onClose={onClose}\n      variant=\"small\"\n      actions={[\n        <Button\n          key=\"confirm\"\n          id=\"add-node-confirm\"\n          type=\"submit\"\n          form=\"add-host-form\"\n          isDisabled={!isDirty || !isValid}\n        >\n          {t(\"save\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          id=\"add-node-cancel\"\n          variant={ButtonVariant.link}\n          onClick={onClose}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form id=\"add-host-form\" onSubmit={handleSubmit(onSubmit)} isHorizontal>\n        <FormGroup label={t(\"nodeHost\")} fieldId=\"nodeHost\" isRequired>\n          <KeycloakTextInput\n            id=\"nodeHost\"\n            {...register(\"node\", { required: true })}\n            isRequired\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  ExpandableSection,\n  FormGroup,\n  Split,\n  SplitItem,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { TimeSelectorForm } from \"../../components/time-selector/TimeSelectorForm\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../../utils/useFormatDate\";\nimport { AddHostDialog } from \".././advanced/AddHostDialog\";\nimport { AdvancedProps, parseResult } from \"../AdvancedTab\";\n\ntype Node = {\n  host: string;\n  registration: string;\n};\n\nexport const ClusteringPanel = ({\n  save,\n  client: { id, registeredNodes, access },\n}: AdvancedProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const formatDate = useFormatDate();\n\n  const [nodes, setNodes] = useState(registeredNodes || {});\n  const [expanded, setExpanded] = useState(false);\n  const [selectedNode, setSelectedNode] = useState(\"\");\n  const [addNodeOpen, setAddNodeOpen] = useState(false);\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(new Date().getTime());\n\n  const testCluster = async () => {\n    const result = await adminClient.clients.testNodesAvailable({ id: id! });\n    parseResult(result, \"testCluster\", addAlert, t);\n  };\n\n  const [toggleDeleteNodeConfirm, DeleteNodeConfirm] = useConfirmDialog({\n    titleKey: \"deleteNode\",\n    messageKey: t(\"deleteNodeBody\", {\n      node: selectedNode,\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.deleteClusterNode({\n          id: id!,\n          node: selectedNode,\n        });\n        setNodes({\n          ...Object.keys(nodes).reduce((object: any, key) => {\n            if (key !== selectedNode) {\n              object[key] = nodes[key];\n            }\n            return object;\n          }, {}),\n        });\n        refresh();\n        addAlert(t(\"deleteNodeSuccess\"), AlertVariant.success);\n      } catch (error) {\n        addError(\"deleteNodeFail\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <FormAccess\n        role=\"manage-clients\"\n        fineGrainedAccess={access?.configure}\n        isHorizontal\n      >\n        <FormGroup\n          label={t(\"nodeReRegistrationTimeout\")}\n          fieldId=\"kc-node-reregistration-timeout\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"nodeReRegistrationTimeoutHelp\")}\n              fieldLabelId=\"nodeReRegistrationTimeout\"\n            />\n          }\n        >\n          <Split hasGutter>\n            <SplitItem>\n              <TimeSelectorForm name=\"nodeReRegistrationTimeout\" />\n            </SplitItem>\n            <SplitItem>\n              <Button variant={ButtonVariant.secondary} onClick={() => save()}>\n                {t(\"save\")}\n              </Button>\n            </SplitItem>\n          </Split>\n        </FormGroup>\n      </FormAccess>\n      <>\n        <DeleteNodeConfirm />\n        <AddHostDialog\n          clientId={id!}\n          isOpen={addNodeOpen}\n          onAdded={(node) => {\n            nodes[node] = Date.now() / 1000;\n            refresh();\n          }}\n          onClose={() => setAddNodeOpen(false)}\n        />\n        <ExpandableSection\n          toggleText={t(\"registeredClusterNodes\")}\n          onToggle={setExpanded}\n          isExpanded={expanded}\n        >\n          <KeycloakDataTable\n            key={key}\n            ariaLabelKey=\"registeredClusterNodes\"\n            loader={() =>\n              Promise.resolve<Node[]>(\n                Object.entries(nodes || {}).map((entry) => {\n                  return { host: entry[0], registration: entry[1] };\n                }),\n              )\n            }\n            toolbarItem={\n              <>\n                <ToolbarItem>\n                  <Button\n                    id=\"testClusterAvailability\"\n                    onClick={testCluster}\n                    variant={ButtonVariant.secondary}\n                    isDisabled={Object.keys(nodes).length === 0}\n                  >\n                    {t(\"testClusterAvailability\")}\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button\n                    id=\"registerNodeManually\"\n                    onClick={() => setAddNodeOpen(true)}\n                    variant={ButtonVariant.tertiary}\n                  >\n                    {t(\"registerNodeManually\")}\n                  </Button>\n                </ToolbarItem>\n              </>\n            }\n            actions={[\n              {\n                title: t(\"delete\"),\n                onRowClick: (node) => {\n                  setSelectedNode(node.host);\n                  toggleDeleteNodeConfirm();\n                },\n              } as Action<Node>,\n            ]}\n            columns={[\n              {\n                name: \"host\",\n                displayKey: \"nodeHost\",\n              },\n              {\n                name: \"registration\",\n                displayKey: \"lastRegistration\",\n                cellFormatters: [\n                  (value) =>\n                    value\n                      ? formatDate(\n                          new Date(parseInt(value.toString()) * 1000),\n                          FORMAT_DATE_AND_TIME,\n                        )\n                      : \"\",\n                ],\n              },\n            ]}\n            emptyState={\n              <ListEmptyState\n                message={t(\"noNodes\")}\n                instructions={t(\"noNodesInstructions\")}\n                primaryActionText={t(\"registerNodeManually\")}\n                onPrimaryAction={() => setAddNodeOpen(true)}\n              />\n            }\n          />\n        </ExpandableSection>\n      </>\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { TextControl } from \"ui-shared\";\n\ntype ApplicationUrlsProps = {\n  isDisabled?: boolean;\n};\n\nexport const ApplicationUrls = (props: ApplicationUrlsProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <TextControl\n        name=\"attributes.logoUri\"\n        label={t(\"logoUrl\")}\n        labelIcon={t(\"logoUrlHelp\")}\n        type=\"url\"\n        {...props}\n      />\n      <TextControl\n        name=\"attributes.policyUri\"\n        label={t(\"policyUrl\")}\n        labelIcon={t(\"policyUrlHelp\")}\n        type=\"url\"\n        {...props}\n      />\n      <TextControl\n        name=\"attributes.tosUri\"\n        label={t(\"termsOfServiceUrl\")}\n        labelIcon={t(\"termsOfServiceUrlHelp\")}\n        type=\"url\"\n        {...props}\n      />\n    </>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { MultiLineInput } from \"../../components/multi-line-input/MultiLineInput\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm, sortProviders } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport { ApplicationUrls } from \"./ApplicationUrls\";\n\ntype FineGrainOpenIdConnectProps = {\n  save: () => void;\n  reset: () => void;\n  hasConfigureAccess?: boolean;\n};\n\nexport const FineGrainOpenIdConnect = ({\n  save,\n  reset,\n  hasConfigureAccess,\n}: FineGrainOpenIdConnectProps) => {\n  const { t } = useTranslation();\n  const providers = useServerInfo().providers;\n  const clientSignatureProviders = providers?.clientSignature.providers;\n  const contentEncryptionProviders = providers?.contentencryption.providers;\n  const cekManagementProviders = providers?.cekmanagement.providers;\n  const signatureProviders = providers?.signature.providers;\n  const [accessTokenOpen, setAccessTokenOpen] = useState(false);\n  const [idTokenOpen, setIdTokenOpen] = useState(false);\n  const [idTokenKeyManagementOpen, setIdTokenKeyManagementOpen] =\n    useState(false);\n  const [idTokenContentOpen, setIdTokenContentOpen] = useState(false);\n  const [userInfoSignedResponseOpen, setUserInfoSignedResponseOpen] =\n    useState(false);\n  const [requestObjectSignatureOpen, setRequestObjectSignatureOpen] =\n    useState(false);\n  const [requestObjectRequiredOpen, setRequestObjectRequiredOpen] =\n    useState(false);\n  const [requestObjectEncryptionOpen, setRequestObjectEncryptionOpen] =\n    useState(false);\n  const [requestObjectEncodingOpen, setRequestObjectEncodingOpen] =\n    useState(false);\n  const [authorizationSignedOpen, setAuthorizationSignedOpen] = useState(false);\n  const [authorizationEncryptedOpen, setAuthorizationEncryptedOpen] =\n    useState(false);\n  const [\n    authorizationEncryptedResponseOpen,\n    setAuthorizationEncryptedResponseOpen,\n  ] = useState(false);\n\n  const [\n    userInfoResponseEncryptionKeyManagementOpen,\n    setUserInfoResponseEncryptionKeyManagementOpen,\n  ] = useState(false);\n\n  const [\n    userInfoResponseEncryptionContentEncryptionOpen,\n    setUserInfoResponseEncryptionContentEncryptionOpen,\n  ] = useState(false);\n\n  const { control } = useFormContext();\n\n  const keyOptions = [\n    <SelectOption key=\"empty\" value=\"\">\n      {t(\"choose\")}\n    </SelectOption>,\n    ...sortProviders(clientSignatureProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n  const cekManagementOptions = [\n    <SelectOption key=\"empty\" value=\"\">\n      {t(\"choose\")}\n    </SelectOption>,\n    ...sortProviders(cekManagementProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n  const signatureOptions = [\n    <SelectOption key=\"unsigned\" value=\"\">\n      {t(\"unsigned\")}\n    </SelectOption>,\n    ...sortProviders(signatureProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n  const contentOptions = [\n    <SelectOption key=\"empty\" value=\"\">\n      {t(\"choose\")}\n    </SelectOption>,\n    ...sortProviders(contentEncryptionProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n\n  const requestObjectOptions = [\n    <SelectOption key=\"any\" value=\"any\">\n      {t(\"any\")}\n    </SelectOption>,\n    <SelectOption key=\"none\" value=\"none\">\n      {t(\"none\")}\n    </SelectOption>,\n    ...sortProviders(clientSignatureProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n\n  const requestObjectEncryptionOptions = [\n    <SelectOption key=\"any\" value=\"any\">\n      {t(\"any\")}\n    </SelectOption>,\n    ...sortProviders(cekManagementProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n\n  const requestObjectEncodingOptions = [\n    <SelectOption key=\"any\" value=\"any\">\n      {t(\"any\")}\n    </SelectOption>,\n    ...sortProviders(contentEncryptionProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n\n  const authorizationSignedResponseOptions = [\n    <SelectOption key=\"empty\" value=\"\">\n      {t(\"choose\")}\n    </SelectOption>,\n    ...sortProviders(signatureProviders!).map((p) => (\n      <SelectOption key={p} value={p} />\n    )),\n  ];\n\n  const requestObjectRequiredOptions = [\n    \"not required\",\n    \"request or request_uri\",\n    \"request only\",\n    \"request_uri only\",\n  ].map((p) => (\n    <SelectOption key={p} value={p}>\n      {t(`requestObject.${p}`)}\n    </SelectOption>\n  ));\n\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <ApplicationUrls />\n      <FormGroup\n        label={t(\"accessTokenSignatureAlgorithm\")}\n        fieldId=\"accessTokenSignatureAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"accessTokenSignatureAlgorithmHelp\")}\n            fieldLabelId=\"accessTokenSignatureAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.access.token.signed.response.alg\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"accessTokenSignatureAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setAccessTokenOpen}\n              isOpen={accessTokenOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setAccessTokenOpen(false);\n              }}\n              selections={field.value}\n            >\n              {keyOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"idTokenSignatureAlgorithm\")}\n        fieldId=\"kc-id-token-signature\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"idTokenSignatureAlgorithmHelp\")}\n            fieldLabelId=\"idTokenSignatureAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.id.token.signed.response.alg\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"idTokenSignatureAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setIdTokenOpen}\n              isOpen={idTokenOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setIdTokenOpen(false);\n              }}\n              selections={field.value}\n            >\n              {keyOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"idTokenEncryptionKeyManagementAlgorithm\")}\n        fieldId=\"idTokenEncryptionKeyManagementAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"idTokenEncryptionKeyManagementAlgorithmHelp\")}\n            fieldLabelId=\"idTokenEncryptionKeyManagementAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.id.token.encrypted.response.alg\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"idTokenEncryptionKeyManagementAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setIdTokenKeyManagementOpen}\n              isOpen={idTokenKeyManagementOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setIdTokenKeyManagementOpen(false);\n              }}\n              selections={field.value}\n            >\n              {cekManagementOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"idTokenEncryptionContentEncryptionAlgorithm\")}\n        fieldId=\"idTokenEncryptionContentEncryptionAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"idTokenEncryptionContentEncryptionAlgorithmHelp\")}\n            fieldLabelId=\"idTokenEncryptionContentEncryptionAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.id.token.encrypted.response.enc\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"idTokenEncryptionContentEncryptionAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setIdTokenContentOpen}\n              isOpen={idTokenContentOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setIdTokenContentOpen(false);\n              }}\n              selections={field.value}\n            >\n              {contentOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"userInfoSignedResponseAlgorithm\")}\n        fieldId=\"userInfoSignedResponseAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"userInfoSignedResponseAlgorithmHelp\")}\n            fieldLabelId=\"userInfoSignedResponseAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.user.info.response.signature.alg\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"userInfoSignedResponseAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setUserInfoSignedResponseOpen}\n              isOpen={userInfoSignedResponseOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setUserInfoSignedResponseOpen(false);\n              }}\n              selections={field.value}\n            >\n              {signatureOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"userInfoResponseEncryptionKeyManagementAlgorithm\")}\n        fieldId=\"userInfoResponseEncryptionKeyManagementAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"userInfoResponseEncryptionKeyManagementAlgorithmHelp\")}\n            fieldLabelId=\"userInfoResponseEncryptionKeyManagementAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.user.info.encrypted.response.alg\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"userInfoResponseEncryptionKeyManagementAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setUserInfoResponseEncryptionKeyManagementOpen}\n              isOpen={userInfoResponseEncryptionKeyManagementOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setUserInfoResponseEncryptionKeyManagementOpen(false);\n              }}\n              selections={field.value}\n            >\n              {cekManagementOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"userInfoResponseEncryptionContentEncryptionAlgorithm\")}\n        fieldId=\"userInfoResponseEncryptionContentEncryptionAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\n              \"userInfoResponseEncryptionContentEncryptionAlgorithmHelp\",\n            )}\n            fieldLabelId=\"userInfoResponseEncryptionContentEncryptionAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.user.info.encrypted.response.enc\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"userInfoResponseEncryptionContentEncryptionAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setUserInfoResponseEncryptionContentEncryptionOpen}\n              isOpen={userInfoResponseEncryptionContentEncryptionOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setUserInfoResponseEncryptionContentEncryptionOpen(false);\n              }}\n              selections={field.value}\n            >\n              {contentOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"requestObjectSignatureAlgorithm\")}\n        fieldId=\"requestObjectSignatureAlgorithm\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"requestObjectSignatureAlgorithmHelp\")}\n            fieldLabelId=\"requestObjectSignatureAlgorithm\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.request.object.signature.alg\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"requestObjectSignatureAlgorithm\"\n              variant={SelectVariant.single}\n              onToggle={setRequestObjectSignatureOpen}\n              isOpen={requestObjectSignatureOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setRequestObjectSignatureOpen(false);\n              }}\n              selections={field.value}\n            >\n              {requestObjectOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"requestObjectEncryption\")}\n        fieldId=\"requestObjectEncryption\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"requestObjectEncryptionHelp\")}\n            fieldLabelId=\"requestObjectEncryption\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.request.object.encryption.alg\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"requestObjectEncryption\"\n              variant={SelectVariant.single}\n              onToggle={setRequestObjectEncryptionOpen}\n              isOpen={requestObjectEncryptionOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setRequestObjectEncryptionOpen(false);\n              }}\n              selections={field.value}\n            >\n              {requestObjectEncryptionOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"requestObjectEncoding\")}\n        fieldId=\"requestObjectEncoding\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"requestObjectEncodingHelp\")}\n            fieldLabelId=\"requestObjectEncoding\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.request.object.encryption.enc\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"requestObjectEncoding\"\n              variant={SelectVariant.single}\n              onToggle={setRequestObjectEncodingOpen}\n              isOpen={requestObjectEncodingOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setRequestObjectEncodingOpen(false);\n              }}\n              selections={field.value}\n            >\n              {requestObjectEncodingOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"requestObjectRequired\")}\n        fieldId=\"requestObjectRequired\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"requestObjectRequiredHelp\")}\n            fieldLabelId=\"requestObjectRequired\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.request.object.required\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"requestObjectRequired\"\n              variant={SelectVariant.single}\n              onToggle={setRequestObjectRequiredOpen}\n              isOpen={requestObjectRequiredOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setRequestObjectRequiredOpen(false);\n              }}\n              selections={field.value}\n            >\n              {requestObjectRequiredOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"validRequestURIs\")}\n        fieldId=\"validRequestURIs\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"validRequestURIsHelp\")}\n            fieldLabelId=\"validRequestURIs\"\n          />\n        }\n      >\n        <MultiLineInput\n          name={convertAttributeNameToForm(\"attributes.request.uris\")}\n          aria-label={t(\"validRequestURIs\")}\n          addButtonLabel=\"addRequestUri\"\n          stringify\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"authorizationSignedResponseAlg\")}\n        fieldId=\"authorizationSignedResponseAlg\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"authorizationSignedResponseAlgHelp\")}\n            fieldLabelId=\"authorizationSignedResponseAlg\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.authorization.signed.response.alg\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"authorizationSignedResponseAlg\"\n              variant={SelectVariant.single}\n              onToggle={setAuthorizationSignedOpen}\n              isOpen={authorizationSignedOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setAuthorizationSignedOpen(false);\n              }}\n              selections={field.value}\n            >\n              {authorizationSignedResponseOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"authorizationEncryptedResponseAlg\")}\n        fieldId=\"authorizationEncryptedResponseAlg\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"authorizationEncryptedResponseAlgHelp\")}\n            fieldLabelId=\"authorizationEncryptedResponseAlg\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.authorization.encrypted.response.alg\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"authorizationEncryptedResponseAlg\"\n              variant={SelectVariant.single}\n              onToggle={setAuthorizationEncryptedOpen}\n              isOpen={authorizationEncryptedOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setAuthorizationEncryptedOpen(false);\n              }}\n              selections={field.value}\n            >\n              {cekManagementOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"authorizationEncryptedResponseEnc\")}\n        fieldId=\"authorizationEncryptedResponseEnc\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"authorizationEncryptedResponseEncHelp\")}\n            fieldLabelId=\"authorizationEncryptedResponseEnc\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.authorization.encrypted.response.enc\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"authorizationEncryptedResponseEnc\"\n              variant={SelectVariant.single}\n              onToggle={setAuthorizationEncryptedResponseOpen}\n              isOpen={authorizationEncryptedResponseOpen}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setAuthorizationEncryptedResponseOpen(false);\n              }}\n              selections={field.value}\n            >\n              {contentOptions}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <ActionGroup>\n        <Button variant=\"secondary\" id=\"fineGrainSave\" onClick={save}>\n          {t(\"save\")}\n        </Button>\n        <Button id=\"fineGrainRevert\" variant=\"link\" onClick={reset}>\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import { ActionGroup, Button } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { TextControl } from \"ui-shared\";\nimport { ApplicationUrls } from \"./ApplicationUrls\";\n\ntype FineGrainSamlEndpointConfigProps = {\n  save: () => void;\n  reset: () => void;\n};\n\nexport const FineGrainSamlEndpointConfig = ({\n  save,\n  reset,\n}: FineGrainSamlEndpointConfigProps) => {\n  const { t } = useTranslation();\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <ApplicationUrls />\n      <TextControl\n        name=\"attributes.saml_assertion_consumer_url_post\"\n        label={t(\"assertionConsumerServicePostBindingURL\")}\n        labelIcon={t(\"assertionConsumerServicePostBindingURLHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_assertion_consumer_url_redirect\"\n        label={t(\"assertionConsumerServiceRedirectBindingURL\")}\n        labelIcon={t(\"assertionConsumerServiceRedirectBindingURLHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_single_logout_service_url_post\"\n        label={t(\"logoutServicePostBindingURL\")}\n        labelIcon={t(\"logoutServicePostBindingURLHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_single_logout_service_url_redirect\"\n        label={t(\"logoutServiceRedirectBindingURL\")}\n        labelIcon={t(\"logoutServiceRedirectBindingURLHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_single_logout_service_url_soap\"\n        label={t(\"logoutServiceSoapBindingUrl\")}\n        labelIcon={t(\"logoutServiceSoapBindingUrlHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_single_logout_service_url_artifact\"\n        label={t(\"logoutServiceArtifactBindingUrl\")}\n        labelIcon={t(\"logoutServiceArtifactBindingUrlHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_artifact_binding_url\"\n        label={t(\"artifactBindingUrl\")}\n        labelIcon={t(\"artifactBindingUrlHelp\")}\n        type=\"url\"\n      />\n      <TextControl\n        name=\"attributes.saml_artifact_resolution_service_url\"\n        label={t(\"artifactResolutionService\")}\n        labelIcon={t(\"artifactResolutionServiceHelp\")}\n        type=\"url\"\n      />\n\n      <ActionGroup>\n        <Button variant=\"tertiary\" onClick={save} data-testid=\"fineGrainSave\">\n          {t(\"save\")}\n        </Button>\n        <Button variant=\"link\" onClick={reset} data-testid=\"fineGrainRevert\">\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import { ActionGroup, Button, FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\ntype OpenIdConnectCompatibilityModesProps = {\n  save: () => void;\n  reset: () => void;\n  hasConfigureAccess?: boolean;\n};\n\nexport const OpenIdConnectCompatibilityModes = ({\n  save,\n  reset,\n  hasConfigureAccess,\n}: OpenIdConnectCompatibilityModesProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      fineGrainedAccess={hasConfigureAccess}\n      isHorizontal\n    >\n      <FormGroup\n        label={t(\"excludeSessionStateFromAuthenticationResponse\")}\n        fieldId=\"excludeSessionStateFromAuthenticationResponse\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"excludeSessionStateFromAuthenticationResponseHelp\")}\n            fieldLabelId=\"excludeSessionStateFromAuthenticationResponse\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.exclude.session.state.from.auth.response\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"excludeSessionStateFromAuthenticationResponse-switch\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"excludeSessionStateFromAuthenticationResponse\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"excludeIssuerFromAuthenticationResponse\")}\n        fieldId=\"excludeIssuerFromAuthenticationResponse\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"excludeIssuerFromAuthenticationResponseHelp\")}\n            fieldLabelId=\"excludeIssuerFromAuthenticationResponse\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.exclude.issuer.from.auth.response\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"excludeIssuerFromAuthenticationResponse-switch\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"excludeIssuerFromAuthenticationResponse\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useRefreshTokens\")}\n        fieldId=\"useRefreshTokens\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"useRefreshTokensHelp\")}\n            fieldLabelId=\"useRefreshTokens\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.use.refresh.tokens\",\n          )}\n          defaultValue=\"true\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useRefreshTokens\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"useRefreshTokens\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useRefreshTokenForClientCredentialsGrant\")}\n        fieldId=\"useRefreshTokenForClientCredentialsGrant\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"useRefreshTokenForClientCredentialsGrantHelp\")}\n            fieldLabelId=\"useRefreshTokenForClientCredentialsGrant\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.client_credentials.use_refresh_token\",\n          )}\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useRefreshTokenForClientCredentialsGrant\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"useRefreshTokenForClientCredentialsGrant\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"useLowerCaseBearerType\")}\n        fieldId=\"useLowerCaseBearerType\"\n        hasNoPaddingTop\n        labelIcon={\n          <HelpItem\n            helpText={t(\"useLowerCaseBearerTypeHelp\")}\n            fieldLabelId=\"useLowerCaseBearerType\"\n          />\n        }\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.token.response.type.bearer.lower-case\",\n          )}\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"useLowerCaseBearerType\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"useLowerCaseBearerType\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <ActionGroup>\n        <Button\n          variant=\"secondary\"\n          onClick={save}\n          data-testid=\"OIDCCompatabilitySave\"\n        >\n          {t(\"save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          onClick={reset}\n          data-testid=\"OIDCCompatabilityRevert\"\n        >\n          {t(\"revert\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n","import {\n  ActionGroup,\n  Button,\n  FormGroup,\n  InputGroup,\n  Text,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { useEffect, useRef } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useFormatDate, { FORMAT_DATE_AND_TIME } from \"../../utils/useFormatDate\";\nimport { AdvancedProps, parseResult } from \"../AdvancedTab\";\nimport { toClient } from \"../routes/Client\";\n\nexport const RevocationPanel = ({\n  save,\n  client: { id, adminUrl, access },\n}: AdvancedProps) => {\n  const revocationFieldName = \"notBefore\";\n  const pushRevocationButtonRef = useRef<HTMLElement>();\n\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const { addAlert } = useAlerts();\n  const formatDate = useFormatDate();\n\n  const { getValues, setValue, register } = useFormContext();\n\n  const setNotBefore = (time: number, messageKey: string) => {\n    setValue(revocationFieldName, time);\n    save({ messageKey });\n  };\n\n  useEffect(() => {\n    register(revocationFieldName);\n  }, [register]);\n\n  const getNotBeforeValue = () => {\n    const date = getValues(revocationFieldName);\n    if (date > 0) {\n      return formatDate(new Date(date * 1000), FORMAT_DATE_AND_TIME);\n    } else {\n      return t(\"none\");\n    }\n  };\n\n  const push = async () => {\n    const result = await adminClient.clients.pushRevocation({\n      id: id!,\n    });\n    parseResult(result, \"notBeforePush\", addAlert, t);\n  };\n\n  return (\n    <>\n      <Text className=\"pf-u-pb-lg\">\n        <Trans i18nKey=\"notBeforeIntro\">\n          In order to successfully push setup url on\n          <Link to={toClient({ realm, clientId: id!, tab: \"settings\" })}>\n            {t(\"settings\")}\n          </Link>\n          tab\n        </Trans>\n      </Text>\n      <FormAccess\n        role=\"manage-clients\"\n        fineGrainedAccess={access?.configure}\n        isHorizontal\n      >\n        <FormGroup\n          label={t(\"notBefore\")}\n          fieldId=\"kc-not-before\"\n          labelIcon={\n            <HelpItem helpText={t(\"notBeforeHelp\")} fieldLabelId=\"notBefore\" />\n          }\n        >\n          <InputGroup>\n            <KeycloakTextInput\n              type=\"text\"\n              id=\"kc-not-before\"\n              name=\"notBefore\"\n              isReadOnly\n              value={getNotBeforeValue()}\n            />\n            <Button\n              id=\"setToNow\"\n              variant=\"control\"\n              onClick={() => {\n                setNotBefore(Date.now() / 1000, \"notBeforeSetToNow\");\n              }}\n            >\n              {t(\"setToNow\")}\n            </Button>\n            <Button\n              id=\"clear\"\n              variant=\"control\"\n              onClick={() => {\n                setNotBefore(0, \"notBeforeNowClear\");\n              }}\n            >\n              {t(\"clear\")}\n            </Button>\n          </InputGroup>\n        </FormGroup>\n        <ActionGroup>\n          {!adminUrl && (\n            <Tooltip\n              reference={pushRevocationButtonRef}\n              content={t(\"notBeforeTooltip\")}\n            />\n          )}\n          <Button\n            id=\"push\"\n            variant=\"secondary\"\n            onClick={push}\n            isAriaDisabled={!adminUrl}\n            ref={pushRevocationButtonRef}\n          >\n            {t(\"push\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type GlobalRequestResult from \"@keycloak/keycloak-admin-client/lib/defs/globalRequestResult\";\nimport { AlertVariant, PageSection, Text } from \"@patternfly/react-core\";\nimport type { TFunction } from \"i18next\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { ScrollForm } from \"ui-shared\";\nimport type { AddAlertFunction } from \"../components/alert/Alerts\";\nimport { convertAttributeNameToForm, toUpperCase } from \"../util\";\nimport type { FormFields, SaveOptions } from \"./ClientDetails\";\nimport { AdvancedSettings } from \"./advanced/AdvancedSettings\";\nimport { AuthenticationOverrides } from \"./advanced/AuthenticationOverrides\";\nimport { ClusteringPanel } from \"./advanced/ClusteringPanel\";\nimport { FineGrainOpenIdConnect } from \"./advanced/FineGrainOpenIdConnect\";\nimport { FineGrainSamlEndpointConfig } from \"./advanced/FineGrainSamlEndpointConfig\";\nimport { OpenIdConnectCompatibilityModes } from \"./advanced/OpenIdConnectCompatibilityModes\";\nimport { RevocationPanel } from \"./advanced/RevocationPanel\";\n\nexport const parseResult = (\n  result: GlobalRequestResult,\n  prefixKey: string,\n  addAlert: AddAlertFunction,\n  t: TFunction,\n) => {\n  const successCount = result.successRequests?.length || 0;\n  const failedCount = result.failedRequests?.length || 0;\n\n  if (successCount === 0 && failedCount === 0) {\n    addAlert(t(\"noAdminUrlSet\"), AlertVariant.warning);\n  } else if (failedCount > 0) {\n    addAlert(\n      t(prefixKey + \"Success\", { successNodes: result.successRequests }),\n      AlertVariant.success,\n    );\n    addAlert(\n      t(prefixKey + \"Fail\", { failedNodes: result.failedRequests }),\n      AlertVariant.danger,\n    );\n  } else {\n    addAlert(\n      t(prefixKey + \"Success\", { successNodes: result.successRequests }),\n      AlertVariant.success,\n    );\n  }\n};\n\nexport type AdvancedProps = {\n  save: (options?: SaveOptions) => void;\n  client: ClientRepresentation;\n};\n\nexport const AdvancedTab = ({ save, client }: AdvancedProps) => {\n  const { t } = useTranslation();\n  const openIdConnect = \"openid-connect\";\n\n  const { setValue } = useFormContext();\n  const {\n    publicClient,\n    attributes,\n    protocol,\n    authenticationFlowBindingOverrides,\n  } = client;\n\n  const resetFields = (names: string[]) => {\n    for (const name of names) {\n      setValue(\n        convertAttributeNameToForm<FormFields>(`attributes.${name}`),\n        attributes?.[name] || \"\",\n      );\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-py-0\">\n      <ScrollForm\n        label={t(\"jumpToSection\")}\n        sections={[\n          {\n            title: t(\"revocation\"),\n            isHidden: protocol !== openIdConnect,\n            panel: <RevocationPanel client={client} save={save} />,\n          },\n          {\n            title: t(\"clustering\"),\n            isHidden: !publicClient,\n            panel: <ClusteringPanel client={client} save={save} />,\n          },\n          {\n            title: t(\"fineGrainOpenIdConnectConfiguration\"),\n            isHidden: protocol !== openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-u-pb-lg\">\n                  {t(\"fineGrainOpenIdConnectConfigurationHelp\")}\n                </Text>\n                <FineGrainOpenIdConnect\n                  save={save}\n                  reset={() => {\n                    resetFields([\n                      \"logoUri\",\n                      \"policyUri\",\n                      \"tosUri\",\n                      \"access.token.signed.response.alg\",\n                      \"id.token.signed.response.alg\",\n                      \"id.token.encrypted.response.alg\",\n                      \"id.token.encrypted.response.enc\",\n                      \"user.info.response.signature.alg\",\n                      \"user.info.encrypted.response.alg\",\n                      \"user.info.encrypted.response.enc\",\n                      \"request.object.signature.alg\",\n                      \"request.object.encryption.alg\",\n                      \"request.object.encryption.enc\",\n                      \"request.object.required\",\n                      \"request.uris\",\n                      \"authorization.signed.response.alg\",\n                      \"authorization.encrypted.response.alg\",\n                      \"authorization.encrypted.response.enc\",\n                    ]);\n                  }}\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"openIdConnectCompatibilityModes\"),\n            isHidden: protocol !== openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-u-pb-lg\">\n                  {t(\"openIdConnectCompatibilityModesHelp\")}\n                </Text>\n                <OpenIdConnectCompatibilityModes\n                  save={() => save()}\n                  reset={() =>\n                    resetFields([\n                      \"exclude.session.state.from.auth.response\",\n                      \"use.refresh.tokens\",\n                      \"client_credentials.use_refresh_token\",\n                      \"token.response.type.bearer.lower-case\",\n                    ])\n                  }\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"fineGrainSamlEndpointConfig\"),\n            isHidden: protocol === openIdConnect,\n            panel: (\n              <>\n                <Text className=\"pf-u-pb-lg\">\n                  {t(\"fineGrainSamlEndpointConfigHelp\")}\n                </Text>\n                <FineGrainSamlEndpointConfig\n                  save={() => save()}\n                  reset={() =>\n                    resetFields([\n                      \"logoUri\",\n                      \"policyUri\",\n                      \"tosUri\",\n                      \"saml_assertion_consumer_url_post\",\n                      \"saml_assertion_consumer_url_redirect\",\n                      \"saml_single_logout_service_url_post\",\n                      \"saml_single_logout_service_url_redirect\",\n                      \"saml_single_logout_service_url_artifact\",\n                      \"saml_artifact_binding_url\",\n                      \"saml_artifact_resolution_service_url\",\n                    ])\n                  }\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"advancedSettings\"),\n            panel: (\n              <>\n                <Text className=\"pf-u-pb-lg\">\n                  {t(\"advancedSettings\" + toUpperCase(protocol || \"\"))}\n                </Text>\n                <AdvancedSettings\n                  protocol={protocol}\n                  save={() => save()}\n                  reset={() => {\n                    resetFields([\n                      \"saml.assertion.lifespan\",\n                      \"access.token.lifespan\",\n                      \"tls.client.certificate.bound.access.tokens\",\n                      \"pkce.code.challenge.method\",\n                    ]);\n                  }}\n                />\n              </>\n            ),\n          },\n          {\n            title: t(\"authenticationOverrides\"),\n            panel: (\n              <>\n                <Text className=\"pf-u-pb-lg\">\n                  {t(\"authenticationOverridesHelp\")}\n                </Text>\n                <AuthenticationOverrides\n                  protocol={protocol}\n                  save={() => save()}\n                  reset={() => {\n                    setValue(\n                      \"authenticationFlowBindingOverrides.browser\",\n                      authenticationFlowBindingOverrides?.browser,\n                    );\n                    setValue(\n                      \"authenticationFlowBindingOverrides.direct_grant\",\n                      authenticationFlowBindingOverrides?.direct_grant,\n                    );\n                  }}\n                />\n              </>\n            ),\n          },\n        ]}\n        borders\n      />\n    </PageSection>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type UserSessionRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userSessionRepresentation\";\nimport { PageSection } from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { adminClient } from \"../admin-client\";\nimport type { LoaderFunction } from \"../components/table-toolbar/KeycloakDataTable\";\nimport SessionsTable from \"../sessions/SessionsTable\";\n\ntype ClientSessionsProps = {\n  client: ClientRepresentation;\n};\n\nexport const ClientSessions = ({ client }: ClientSessionsProps) => {\n  const { t } = useTranslation();\n\n  const loader: LoaderFunction<UserSessionRepresentation> = async (\n    first,\n    max,\n  ) => {\n    const mapSessionsToType =\n      (type: string) => (sessions: UserSessionRepresentation[]) =>\n        sessions.map((session) => ({\n          type,\n          ...session,\n        }));\n\n    const allSessions = await Promise.all([\n      adminClient.clients\n        .listSessions({ id: client.id!, first, max })\n        .then(mapSessionsToType(t(\"sessionsType.regularSSO\"))),\n      adminClient.clients\n        .listOfflineSessions({\n          id: client.id!,\n          first,\n          max,\n        })\n        .then(mapSessionsToType(t(\"sessionsType.offline\"))),\n    ]);\n\n    return allSessions.flat();\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <SessionsTable\n        loader={loader}\n        hiddenColumns={[\"clients\"]}\n        emptyInstructions={t(\"noSessionsForClient\")}\n      />\n    </PageSection>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { FixedButtonsGroup } from \"../../components/form/FixedButtonGroup\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { FormFields } from \"../ClientDetails\";\nimport type { ClientSettingsProps } from \"../ClientSettings\";\nimport { LoginSettings } from \"./LoginSettings\";\n\nexport const AccessSettings = ({\n  client,\n  save,\n  reset,\n}: ClientSettingsProps) => {\n  const { t } = useTranslation();\n  const { register, watch } = useFormContext<FormFields>();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || client.access?.configure;\n\n  const protocol = watch(\"protocol\");\n\n  return (\n    <FormAccess\n      isHorizontal\n      fineGrainedAccess={client.access?.configure}\n      role=\"manage-clients\"\n    >\n      {!client.bearerOnly && <LoginSettings protocol={protocol} />}\n      {protocol !== \"saml\" && (\n        <FormGroup\n          label={t(\"adminURL\")}\n          fieldId=\"kc-admin-url\"\n          labelIcon={\n            <HelpItem helpText={t(\"adminURLHelp\")} fieldLabelId=\"adminURL\" />\n          }\n        >\n          <KeycloakTextInput\n            id=\"kc-admin-url\"\n            type=\"url\"\n            {...register(\"adminUrl\")}\n          />\n        </FormGroup>\n      )}\n      {client.bearerOnly && (\n        <FixedButtonsGroup\n          name=\"settings\"\n          save={save}\n          reset={reset}\n          isActive={!isManager}\n        />\n      )}\n    </FormAccess>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\nexport const LoginSettingsPanel = ({ access }: { access?: boolean }) => {\n  const { t } = useTranslation();\n  const { register, control, watch } = useFormContext<FormFields>();\n\n  const [loginThemeOpen, setLoginThemeOpen] = useState(false);\n  const loginThemes = useServerInfo().themes![\"login\"];\n  const consentRequired = watch(\"consentRequired\");\n  const displayOnConsentScreen: string = watch(\n    convertAttributeNameToForm<FormFields>(\n      \"attributes.display.on.consent.screen\",\n    ),\n  );\n\n  return (\n    <FormAccess isHorizontal fineGrainedAccess={access} role=\"manage-clients\">\n      <FormGroup\n        label={t(\"loginTheme\")}\n        labelIcon={\n          <HelpItem helpText={t(\"loginThemeHelp\")} fieldLabelId=\"loginTheme\" />\n        }\n        fieldId=\"loginTheme\"\n      >\n        <Controller\n          name=\"attributes.login_theme\"\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"loginTheme\"\n              onToggle={setLoginThemeOpen}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setLoginThemeOpen(false);\n              }}\n              selections={field.value || t(\"choose\")}\n              variant={SelectVariant.single}\n              aria-label={t(\"loginTheme\")}\n              isOpen={loginThemeOpen}\n            >\n              {[\n                <SelectOption key=\"empty\" value=\"\">\n                  {t(\"choose\")}\n                </SelectOption>,\n                ...loginThemes.map((theme) => (\n                  <SelectOption\n                    selected={theme.name === field.value}\n                    key={theme.name}\n                    value={theme.name}\n                  />\n                )),\n              ]}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"consentRequired\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"consentRequiredHelp\")}\n            fieldLabelId=\"consentRequired\"\n          />\n        }\n        fieldId=\"kc-consent\"\n        hasNoPaddingTop\n      >\n        <Controller\n          name=\"consentRequired\"\n          defaultValue={false}\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"kc-consent-switch\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value}\n              onChange={field.onChange}\n              aria-label={t(\"consentRequired\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"displayOnClient\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"displayOnClientHelp\")}\n            fieldLabelId=\"displayOnClient\"\n          />\n        }\n        fieldId=\"kc-display-on-client\"\n        hasNoPaddingTop\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.display.on.consent.screen\",\n          )}\n          defaultValue={false}\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"kc-display-on-client-switch\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(\"\" + value)}\n              isDisabled={!consentRequired}\n              aria-label={t(\"displayOnClient\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"consentScreenText\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"consentScreenTextHelp\")}\n            fieldLabelId=\"consentScreenText\"\n          />\n        }\n        fieldId=\"kc-consent-screen-text\"\n      >\n        <KeycloakTextArea\n          id=\"kc-consent-screen-text\"\n          {...register(\n            convertAttributeNameToForm<FormFields>(\n              \"attributes.consent.screen.text\",\n            ),\n          )}\n          isDisabled={!(consentRequired && displayOnConsentScreen === \"true\")}\n        />\n      </FormGroup>\n    </FormAccess>\n  );\n};\n","import { FormGroup, Switch, ValidatedOptions } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { FixedButtonsGroup } from \"../../components/form/FixedButtonGroup\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { beerify, convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport type { ClientSettingsProps } from \"../ClientSettings\";\n\nconst validateUrl = (uri: string | undefined, error: string) =>\n  ((uri?.startsWith(\"https://\") || uri?.startsWith(\"http://\")) &&\n    !uri.includes(\"*\")) ||\n  uri === \"\" ||\n  error;\n\nexport const LogoutPanel = ({\n  save,\n  reset,\n  client: { access },\n}: ClientSettingsProps) => {\n  const { t } = useTranslation();\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext<FormFields>();\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || access?.configure;\n\n  const protocol = watch(\"protocol\");\n  const frontchannelLogout = watch(\"frontchannelLogout\");\n\n  return (\n    <FormAccess\n      isHorizontal\n      fineGrainedAccess={access?.configure}\n      role=\"manage-clients\"\n    >\n      <FormGroup\n        label={t(\"frontchannelLogout\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"frontchannelLogoutHelp\")}\n            fieldLabelId=\"frontchannelLogout\"\n          />\n        }\n        fieldId=\"kc-frontchannelLogout\"\n        hasNoPaddingTop\n      >\n        <Controller\n          name=\"frontchannelLogout\"\n          defaultValue={true}\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"kc-frontchannelLogout-switch\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value}\n              onChange={field.onChange}\n              aria-label={t(\"frontchannelLogout\")}\n            />\n          )}\n        />\n      </FormGroup>\n      {protocol === \"openid-connect\" && frontchannelLogout && (\n        <FormGroup\n          label={t(\"frontchannelLogoutUrl\")}\n          fieldId=\"frontchannelLogoutUrl\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"frontchannelLogoutUrlHelp\")}\n              fieldLabelId=\"frontchannelLogoutUrl\"\n            />\n          }\n          helperTextInvalid={\n            errors.attributes?.[beerify(\"frontchannel.logout.url\")]\n              ?.message as string\n          }\n          validated={\n            errors.attributes?.[beerify(\"frontchannel.logout.url\")]?.message\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n        >\n          <KeycloakTextInput\n            id=\"frontchannelLogoutUrl\"\n            type=\"url\"\n            {...register(\n              convertAttributeNameToForm<FormFields>(\n                \"attributes.frontchannel.logout.url\",\n              ),\n              {\n                validate: (uri) =>\n                  validateUrl(uri, t(\"frontchannelUrlInvalid\").toString()),\n              },\n            )}\n            validated={\n              errors.attributes?.[beerify(\"frontchannel.logout.url\")]?.message\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n          />\n        </FormGroup>\n      )}\n      {protocol === \"openid-connect\" && (\n        <>\n          <FormGroup\n            label={t(\"backchannelLogoutUrl\")}\n            fieldId=\"backchannelLogoutUrl\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"backchannelLogoutUrlHelp\")}\n                fieldLabelId=\"backchannelLogoutUrl\"\n              />\n            }\n            helperTextInvalid={\n              errors.attributes?.[beerify(\"backchannel.logout.url\")]\n                ?.message as string\n            }\n            validated={\n              errors.attributes?.[beerify(\"backchannel.logout.url\")]?.message\n                ? ValidatedOptions.error\n                : ValidatedOptions.default\n            }\n          >\n            <KeycloakTextInput\n              id=\"backchannelLogoutUrl\"\n              type=\"url\"\n              {...register(\n                convertAttributeNameToForm<FormFields>(\n                  \"attributes.backchannel.logout.url\",\n                ),\n                {\n                  validate: (uri) =>\n                    validateUrl(uri, t(\"backchannelUrlInvalid\").toString()),\n                },\n              )}\n              validated={\n                errors.attributes?.[beerify(\"backchannel.logout.url\")]?.message\n                  ? ValidatedOptions.error\n                  : ValidatedOptions.default\n              }\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"backchannelLogoutSessionRequired\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"backchannelLogoutSessionRequiredHelp\")}\n                fieldLabelId=\"backchannelLogoutSessionRequired\"\n              />\n            }\n            fieldId=\"backchannelLogoutSessionRequired\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.backchannel.logout.session.required\",\n              )}\n              defaultValue=\"true\"\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"backchannelLogoutSessionRequired\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(value.toString())}\n                  aria-label={t(\"backchannelLogoutSessionRequired\")}\n                />\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"backchannelLogoutRevokeOfflineSessions\")}\n            labelIcon={\n              <HelpItem\n                helpText={t(\"backchannelLogoutRevokeOfflineSessionsHelp\")}\n                fieldLabelId=\"backchannelLogoutRevokeOfflineSessions\"\n              />\n            }\n            fieldId=\"backchannelLogoutRevokeOfflineSessions\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.backchannel.logout.revoke.offline.tokens\",\n              )}\n              defaultValue=\"false\"\n              control={control}\n              render={({ field }) => (\n                <Switch\n                  id=\"backchannelLogoutRevokeOfflineSessions\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => field.onChange(value.toString())}\n                  aria-label={t(\"backchannelLogoutRevokeOfflineSessions\")}\n                />\n              )}\n            />\n          </FormGroup>\n        </>\n      )}\n      <FixedButtonsGroup\n        name=\"settings\"\n        save={save}\n        reset={reset}\n        isActive={isManager}\n      />\n    </FormAccess>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, Path, PathValue, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\ntype ToggleProps = {\n  name: PathValue<FormFields, Path<FormFields>>;\n  label: string;\n};\nexport const Toggle = ({ name, label }: ToggleProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext<FormFields>();\n\n  return (\n    <FormGroup\n      hasNoPaddingTop\n      label={t(label)}\n      fieldId={label}\n      labelIcon={<HelpItem helpText={t(`${label}Help`)} fieldLabelId={label} />}\n    >\n      <Controller\n        name={name}\n        defaultValue=\"false\"\n        control={control}\n        render={({ field }) => (\n          <Switch\n            id={name!}\n            data-testid={label}\n            label={t(\"on\")}\n            labelOff={t(\"off\")}\n            isChecked={field.value === \"true\"}\n            onChange={(value) => field.onChange(value.toString())}\n            aria-label={t(label)}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n\nexport const SamlConfig = () => {\n  const { t } = useTranslation();\n  const { control } = useFormContext<FormFields>();\n\n  const [nameFormatOpen, setNameFormatOpen] = useState(false);\n  return (\n    <FormAccess\n      isHorizontal\n      role=\"manage-clients\"\n      className=\"keycloak__capability-config__form\"\n    >\n      <FormGroup\n        label={t(\"nameIdFormat\")}\n        fieldId=\"nameIdFormat\"\n        labelIcon={\n          <HelpItem\n            helpText={t(\"nameIdFormatHelp\")}\n            fieldLabelId=\"nameIdFormat\"\n          />\n        }\n      >\n        <Controller\n          name=\"attributes.saml_name_id_format\"\n          defaultValue=\"username\"\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"samlNameIdFormat\"\n              onToggle={setNameFormatOpen}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setNameFormatOpen(false);\n              }}\n              selections={field.value}\n              variant={SelectVariant.single}\n              aria-label={t(\"nameIdFormat\")}\n              isOpen={nameFormatOpen}\n            >\n              {[\"username\", \"email\", \"transient\", \"persistent\"].map((name) => (\n                <SelectOption\n                  selected={name === field.value}\n                  key={name}\n                  value={name}\n                />\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      <Toggle\n        name=\"attributes.saml_force_name_id_format\"\n        label=\"forceNameIdFormat\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.force.post.binding\")}\n        label=\"forcePostBinding\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.artifact.binding\")}\n        label=\"forceArtifactBinding\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.authnstatement\")}\n        label=\"includeAuthnStatement\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\n          \"attributes.saml.onetimeuse.condition\",\n        )}\n        label=\"includeOneTimeUseCondition\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\n          \"attributes.saml.server.signature.keyinfo.ext\",\n        )}\n        label=\"optimizeLookup\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.allow.ecp.flow\")}\n        label=\"allowEcpFlow\"\n      />\n    </FormAccess>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\nimport { Toggle } from \"./SamlConfig\";\n\nconst SIGNATURE_ALGORITHMS = [\n  \"RSA_SHA1\",\n  \"RSA_SHA256\",\n  \"RSA_SHA256_MGF1\",\n  \"RSA_SHA512\",\n  \"RSA_SHA512_MGF1\",\n  \"DSA_SHA1\",\n] as const;\n\nconst KEYNAME_TRANSFORMER = [\"NONE\", \"KEY_ID\", \"CERT_SUBJECT\"] as const;\n\nconst CANONICALIZATION = [\n  { name: \"EXCLUSIVE\", value: \"http://www.w3.org/2001/10/xml-exc-c14n#\" },\n  {\n    name: \"EXCLUSIVE_WITH_COMMENTS\",\n    value: \"http://www.w3.org/2001/10/xml-exc-c14n#WithComments\",\n  },\n  {\n    name: \"INCLUSIVE\",\n    value: \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315\",\n  },\n  {\n    name: \"INCLUSIVE_WITH_COMMENTS\",\n    value: \"http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments\",\n  },\n] as const;\n\nexport const SamlSignature = () => {\n  const { t } = useTranslation();\n  const [algOpen, setAlgOpen] = useState(false);\n  const [keyOpen, setKeyOpen] = useState(false);\n  const [canOpen, setCanOpen] = useState(false);\n\n  const { control, watch } = useFormContext<FormFields>();\n\n  const signDocs = watch(\n    convertAttributeNameToForm<FormFields>(\"attributes.saml.server.signature\"),\n  );\n  const signAssertion = watch(\n    convertAttributeNameToForm<FormFields>(\n      \"attributes.saml.assertion.signature\",\n    ),\n  );\n\n  return (\n    <FormAccess\n      isHorizontal\n      role=\"manage-clients\"\n      className=\"keycloak__capability-config__form\"\n    >\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.server.signature\")}\n        label=\"signDocuments\"\n      />\n      <Toggle\n        name={convertAttributeNameToForm(\"attributes.saml.assertion.signature\")}\n        label=\"signAssertions\"\n      />\n      {(signDocs === \"true\" || signAssertion === \"true\") && (\n        <>\n          <FormGroup\n            label={t(\"signatureAlgorithm\")}\n            fieldId=\"signatureAlgorithm\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"signatureAlgorithmHelp\")}\n                fieldLabelId=\"signatureAlgorithm\"\n              />\n            }\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.saml.signature.algorithm\",\n              )}\n              defaultValue={SIGNATURE_ALGORITHMS[0]}\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"signatureAlgorithm\"\n                  onToggle={setAlgOpen}\n                  onSelect={(_, value) => {\n                    field.onChange(value.toString());\n                    setAlgOpen(false);\n                  }}\n                  selections={field.value}\n                  variant={SelectVariant.single}\n                  aria-label={t(\"signatureAlgorithm\")}\n                  isOpen={algOpen}\n                >\n                  {SIGNATURE_ALGORITHMS.map((algorithm) => (\n                    <SelectOption\n                      selected={algorithm === field.value}\n                      key={algorithm}\n                      value={algorithm}\n                    />\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"signatureKeyName\")}\n            fieldId=\"signatureKeyName\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"signatureKeyNameHelp\")}\n                fieldLabelId=\"signatureKeyName\"\n              />\n            }\n          >\n            <Controller\n              name={convertAttributeNameToForm<FormFields>(\n                \"attributes.saml.server.signature.keyinfo.xmlSigKeyInfoKeyNameTransformer\",\n              )}\n              defaultValue={KEYNAME_TRANSFORMER[0]}\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"signatureKeyName\"\n                  onToggle={setKeyOpen}\n                  onSelect={(_, value) => {\n                    field.onChange(value.toString());\n                    setKeyOpen(false);\n                  }}\n                  selections={field.value}\n                  variant={SelectVariant.single}\n                  aria-label={t(\"signatureKeyName\")}\n                  isOpen={keyOpen}\n                >\n                  {KEYNAME_TRANSFORMER.map((key) => (\n                    <SelectOption\n                      selected={key === field.value}\n                      key={key}\n                      value={key}\n                    />\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n          <FormGroup\n            label={t(\"canonicalization\")}\n            fieldId=\"canonicalization\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"canonicalizationHelp\")}\n                fieldLabelId=\"canonicalization\"\n              />\n            }\n          >\n            <Controller\n              name=\"attributes.saml_signature_canonicalization_method\"\n              defaultValue={CANONICALIZATION[0].value}\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"canonicalization\"\n                  onToggle={setCanOpen}\n                  onSelect={(_, value) => {\n                    field.onChange(value.toString());\n                    setCanOpen(false);\n                  }}\n                  selections={\n                    CANONICALIZATION.find((can) => can.value === field.value)\n                      ?.name\n                  }\n                  variant={SelectVariant.single}\n                  aria-label={t(\"canonicalization\")}\n                  isOpen={canOpen}\n                >\n                  {CANONICALIZATION.map((can) => (\n                    <SelectOption\n                      selected={can.value === field.value}\n                      key={can.name}\n                      value={can.value}\n                    >\n                      {can.name}\n                    </SelectOption>\n                  ))}\n                </Select>\n              )}\n            />\n          </FormGroup>\n        </>\n      )}\n    </FormAccess>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport { Form } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { ScrollForm } from \"ui-shared\";\nimport { ClientDescription } from \"./ClientDescription\";\nimport { FormFields } from \"./ClientDetails\";\nimport { AccessSettings } from \"./add/AccessSettings\";\nimport { CapabilityConfig } from \"./add/CapabilityConfig\";\nimport { LoginSettingsPanel } from \"./add/LoginSettingsPanel\";\nimport { LogoutPanel } from \"./add/LogoutPanel\";\nimport { SamlConfig } from \"./add/SamlConfig\";\nimport { SamlSignature } from \"./add/SamlSignature\";\n\nexport type ClientSettingsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n  reset: () => void;\n};\n\nexport const ClientSettings = (props: ClientSettingsProps) => {\n  const { t } = useTranslation();\n\n  const { watch } = useFormContext<FormFields>();\n  const protocol = watch(\"protocol\");\n\n  const { client } = props;\n\n  return (\n    <ScrollForm\n      label={t(\"jumpToSection\")}\n      className=\"pf-u-px-lg pf-u-pb-lg\"\n      sections={[\n        {\n          title: t(\"generalSettings\"),\n          panel: (\n            <Form isHorizontal>\n              <ClientDescription\n                protocol={client.protocol}\n                hasConfigureAccess={client.access?.configure}\n              />\n            </Form>\n          ),\n        },\n        {\n          title: t(\"accessSettings\"),\n          panel: <AccessSettings {...props} />,\n        },\n        {\n          title: t(\"samlCapabilityConfig\"),\n          isHidden: protocol !== \"saml\" || client.bearerOnly,\n          panel: <SamlConfig />,\n        },\n        {\n          title: t(\"signatureAndEncryption\"),\n          isHidden: protocol !== \"saml\" || client.bearerOnly,\n          panel: <SamlSignature />,\n        },\n        {\n          title: t(\"capabilityConfig\"),\n          isHidden: protocol !== \"openid-connect\" || client.bearerOnly,\n          panel: <CapabilityConfig />,\n        },\n        {\n          title: t(\"loginSettings\"),\n          isHidden: client.bearerOnly,\n          panel: <LoginSettingsPanel access={client.access?.configure} />,\n        },\n        {\n          title: t(\"logoutSettings\"),\n          isHidden: client.bearerOnly,\n          panel: <LogoutPanel {...props} />,\n        },\n      ]}\n    />\n  );\n};\n","import { useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Controller, useFieldArray, useFormContext } from \"react-hook-form\";\nimport {\n  Button,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { MinusCircleIcon, PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { camelCase } from \"lodash-es\";\n\nimport type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport { defaultContextAttributes } from \"../utils\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\nimport \"./key-based-attribute-input.css\";\n\nexport type AttributeType = {\n  key?: string;\n  name: string;\n  custom?: boolean;\n  values?: {\n    [key: string]: string;\n  }[];\n};\n\ntype AttributeInputProps = {\n  name: string;\n  selectableValues?: AttributeType[];\n  resources?: ResourceRepresentation[];\n};\n\ntype ValueInputProps = {\n  name: string;\n  rowIndex: number;\n  attribute: any;\n  selectableValues?: AttributeType[];\n  resources?: ResourceRepresentation[];\n};\n\nconst ValueInput = ({\n  name,\n  rowIndex,\n  attribute,\n  selectableValues,\n  resources,\n}: ValueInputProps) => {\n  const { t } = useTranslation();\n  const { control, register, getValues } = useFormContext();\n  const [isValueOpenArray, setIsValueOpenArray] = useState([false]);\n\n  const toggleValueSelect = (rowIndex: number, open: boolean) => {\n    const arr = [...isValueOpenArray];\n    arr[rowIndex] = open;\n    setIsValueOpenArray(arr);\n  };\n\n  const attributeValues = useMemo(() => {\n    let values: AttributeType[] | undefined = [];\n\n    if (selectableValues) {\n      values = defaultContextAttributes.find(\n        (attr) => attr.key === getValues().context?.[rowIndex]?.key,\n      )?.values;\n    }\n\n    return values;\n  }, [getValues]);\n\n  const renderSelectOptionType = () => {\n    const scopeValues = resources?.find(\n      (resource) => resource.name === getValues().resources?.[rowIndex]?.key,\n    )?.scopes;\n\n    if (attributeValues?.length && !resources) {\n      return attributeValues.map((attr) => (\n        <SelectOption key={attr.key} value={attr.key}>\n          {attr.name}\n        </SelectOption>\n      ));\n    } else if (scopeValues?.length) {\n      return scopeValues.map((scope) => (\n        <SelectOption key={scope.name} value={scope.name}>\n          {scope.name}\n        </SelectOption>\n      ));\n    }\n  };\n\n  const getMessageBundleKey = (attributeName: string) =>\n    camelCase(attributeName).replace(/\\W/g, \"\");\n\n  return (\n    <Td>\n      {resources || attributeValues?.length ? (\n        <Controller\n          name={`${name}.${rowIndex}.value`}\n          defaultValue={[]}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId={`${attribute.id}-value`}\n              className=\"kc-attribute-value-selectable\"\n              name={`${name}.${rowIndex}.value`}\n              chipGroupProps={{\n                numChips: 1,\n                expandedText: t(\"hide\"),\n                collapsedText: t(\"showRemaining\"),\n              }}\n              onToggle={(open) => toggleValueSelect(rowIndex, open)}\n              isOpen={isValueOpenArray[rowIndex]}\n              variant={SelectVariant.typeahead}\n              typeAheadAriaLabel={t(\"selectOrTypeAKey\")}\n              placeholderText={t(\"selectOrTypeAKey\")}\n              selections={field.value}\n              onSelect={(_, v) => {\n                field.onChange(v);\n\n                toggleValueSelect(rowIndex, false);\n              }}\n            >\n              {renderSelectOptionType()}\n            </Select>\n          )}\n        />\n      ) : (\n        <KeycloakTextInput\n          id={`${getMessageBundleKey(attribute.key)}-value`}\n          className=\"value-input\"\n          defaultValue={attribute.value}\n          data-testid=\"attribute-value-input\"\n          aria-label={t(\"value\")}\n          {...register(`${name}.${rowIndex}.value`)}\n        />\n      )}\n    </Td>\n  );\n};\n\nexport const KeyBasedAttributeInput = ({\n  name,\n  selectableValues,\n  resources,\n}: AttributeInputProps) => {\n  const { t } = useTranslation();\n  const { control, watch } = useFormContext();\n  const { fields, append, remove } = useFieldArray({\n    control: control,\n    name,\n  });\n\n  const [isKeyOpenArray, setIsKeyOpenArray] = useState([false]);\n  const toggleKeySelect = (rowIndex: number, open: boolean) => {\n    const arr = [...isKeyOpenArray];\n    arr[rowIndex] = open;\n    setIsKeyOpenArray(arr);\n  };\n\n  useEffect(() => {\n    if (!fields.length) {\n      append({ key: \"\", value: \"\" }, { shouldFocus: false });\n    }\n  }, [fields]);\n\n  const watchLastValue = watch(`${name}.${fields.length - 1}.value`, \"\");\n\n  return (\n    <TableComposable\n      className=\"kc-attributes__table\"\n      aria-label=\"Role attribute keys and values\"\n      variant=\"compact\"\n    >\n      <Thead>\n        <Tr>\n          <Th width={40}>{t(\"key\")}</Th>\n          <Th width={40}>{t(\"value\")}</Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {fields.map((attribute, rowIndex) => (\n          <Tr key={attribute.id} data-testid=\"attribute-row\">\n            <Td>\n              <Controller\n                name={`${name}.${rowIndex}.key`}\n                defaultValue=\"\"\n                control={control}\n                render={({ field }) => (\n                  <Select\n                    toggleId={`${name}.${rowIndex}.key`}\n                    className=\"kc-attribute-key-selectable\"\n                    name={`${name}.${rowIndex}.key`}\n                    onToggle={(open) => toggleKeySelect(rowIndex, open)}\n                    isOpen={isKeyOpenArray[rowIndex]}\n                    variant={SelectVariant.typeahead}\n                    typeAheadAriaLabel={t(\"selectOrTypeAKey\")}\n                    placeholderText={t(\"selectOrTypeAKey\")}\n                    selections={field.value}\n                    onSelect={(_, v) => {\n                      field.onChange(v.toString());\n\n                      toggleKeySelect(rowIndex, false);\n                    }}\n                  >\n                    {selectableValues?.map((attribute) => (\n                      <SelectOption\n                        selected={attribute.name === field.value}\n                        key={attribute.key}\n                        value={resources ? attribute.name : attribute.key}\n                      >\n                        {attribute.name}\n                      </SelectOption>\n                    ))}\n                  </Select>\n                )}\n              />\n            </Td>\n            <ValueInput\n              name={name}\n              attribute={attribute}\n              rowIndex={rowIndex}\n              selectableValues={selectableValues}\n              resources={resources}\n            />\n            <Td>\n              <Button\n                id={`${name}-minus-button-${rowIndex}`}\n                variant=\"link\"\n                className=\"kc-attributes__minus-icon\"\n                onClick={() => remove(rowIndex)}\n                aria-label={t(\"remove\")}\n              >\n                <MinusCircleIcon />\n              </Button>\n            </Td>\n          </Tr>\n        ))}\n        <Tr>\n          <Td>\n            <Button\n              aria-label={t(\"addAttribute\")}\n              id={`${name}-plus-icon`}\n              variant=\"link\"\n              className=\"kc-attributes__plus-icon\"\n              onClick={() => {\n                append({ key: \"\", value: \"\" });\n                setIsKeyOpenArray([...isKeyOpenArray, false]);\n              }}\n              icon={<PlusCircleIcon />}\n              isDisabled={!watchLastValue}\n              data-testid=\"attribute-add-row\"\n            >\n              {t(\"addAttribute\")}\n            </Button>\n          </Td>\n        </Tr>\n      </Tbody>\n    </TableComposable>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport {\n  Button,\n  Modal,\n  ModalVariant,\n  TextContent,\n  Text,\n  TextVariants,\n} from \"@patternfly/react-core\";\n\nimport type AccessTokenRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/accessTokenRepresentation\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\nimport useToggle from \"../../utils/useToggle\";\nimport { prettyPrintJSON } from \"../../util\";\n\ntype AuthorizationDataModalProps = {\n  data: AccessTokenRepresentation;\n};\n\nexport const AuthorizationDataModal = ({\n  data,\n}: AuthorizationDataModalProps) => {\n  const { t } = useTranslation();\n  const [show, toggle] = useToggle();\n\n  return (\n    <>\n      <Button\n        data-testid=\"authorization-revert\"\n        onClick={toggle}\n        variant=\"secondary\"\n      >\n        {t(\"showAuthData\")}\n      </Button>\n      <Modal\n        variant={ModalVariant.medium}\n        isOpen={show}\n        aria-label={t(\"authData\")}\n        header={\n          <TextContent>\n            <Text component={TextVariants.h1}>{t(\"authData\")}</Text>\n            <Text>{t(\"authDataDescription\")}</Text>\n          </TextContent>\n        }\n        onClose={toggle}\n        actions={[\n          <Button\n            data-testid=\"cancel\"\n            id=\"modal-cancel\"\n            key=\"cancel\"\n            onClick={toggle}\n          >\n            {t(\"cancel\")}\n          </Button>,\n        ]}\n      >\n        <KeycloakTextArea readOnly rows={20} value={prettyPrintJSON(data)} />\n      </Modal>\n    </>\n  );\n};\n","import type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport { DecisionEffect } from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport type PolicyResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyResultRepresentation\";\nimport {\n  capitalize,\n  DescriptionList,\n  TextContent,\n  TextList,\n  TextListItem,\n} from \"@patternfly/react-core\";\nimport { ExpandableRowContent, Tbody, Td, Tr } from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useParams } from \"../../utils/useParams\";\nimport type { ClientParams } from \"../routes/Client\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\n\ntype Props = {\n  idx: number;\n  rowIndex: number;\n  outerPolicy: PolicyResultRepresentation;\n  resource: EvaluationResultRepresentation;\n};\n\nexport const AuthorizationEvaluateResourcePolicies = ({\n  idx,\n  rowIndex,\n  outerPolicy,\n  resource,\n}: Props) => {\n  const [expanded, setExpanded] = useState<boolean>(false);\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const { clientId } = useParams<ClientParams>();\n\n  return (\n    <Tbody key={idx} isExpanded={expanded}>\n      <Tr>\n        <Td\n          expand={{\n            rowIndex,\n            isExpanded: expanded,\n            onToggle: () => setExpanded((prev) => !prev),\n          }}\n        />\n        <Td data-testid={`name-column-${resource.resource}`}>\n          <Link\n            to={toPermissionDetails({\n              realm,\n              id: clientId,\n              permissionType: outerPolicy.policy?.type!,\n              permissionId: outerPolicy.policy?.id!,\n            })}\n          >\n            {outerPolicy.policy?.name}\n          </Link>\n        </Td>\n        <Td id={outerPolicy.status?.toLowerCase()}>\n          {t(outerPolicy.status?.toLowerCase() as string)}\n        </Td>\n        <Td>{t(`${outerPolicy.policy?.decisionStrategy?.toLowerCase()}`)}</Td>\n        <Td>\n          {outerPolicy.status === DecisionEffect.Permit\n            ? resource.policies?.[rowIndex]?.scopes?.join(\", \")\n            : \"-\"}\n        </Td>\n        <Td>\n          {outerPolicy.status === DecisionEffect.Deny &&\n          resource.policies?.[rowIndex]?.scopes?.length\n            ? resource.policies[rowIndex].scopes?.join(\", \")\n            : \"-\"}\n        </Td>\n      </Tr>\n      <Tr key={`child-${resource.resource}`} isExpanded={expanded}>\n        <Td />\n        <Td colSpan={5}>\n          {expanded && (\n            <ExpandableRowContent>\n              <DescriptionList\n                isHorizontal\n                className=\"keycloak_resource_details\"\n              >\n                <TextContent>\n                  <TextList>\n                    {outerPolicy.associatedPolicies?.map((item) => (\n                      <TextListItem key=\"policyDetails\">\n                        <Link\n                          to={toPolicyDetails({\n                            realm,\n                            id: clientId,\n                            policyType: item.policy?.type!,\n                            policyId: item.policy?.id!,\n                          })}\n                        >\n                          {item.policy?.name}\n                        </Link>\n\n                        {t(\"votedToStatus\", {\n                          status: capitalize(item.status as string),\n                        })}\n                      </TextListItem>\n                    ))}\n                  </TextList>\n                </TextContent>\n              </DescriptionList>\n            </ExpandableRowContent>\n          )}\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n","import { useState } from \"react\";\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { DescriptionList } from \"@patternfly/react-core/dist/esm/components\";\nimport { useTranslation } from \"react-i18next\";\nimport { AuthorizationEvaluateResourcePolicies } from \"./AuthorizationEvaluateResourcePolicies\";\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyResultRepresentation\";\n\ntype Props = {\n  rowIndex: number;\n  resource: EvaluationResultRepresentation;\n  evaluateResults: any;\n};\n\nexport const AuthorizationEvaluateResource = ({\n  rowIndex,\n  resource,\n  evaluateResults,\n}: Props) => {\n  const [expanded, setExpanded] = useState<boolean>(false);\n  const { t } = useTranslation();\n\n  return (\n    <Tbody isExpanded={expanded}>\n      <Tr>\n        <Td\n          expand={{\n            rowIndex,\n            isExpanded: expanded,\n            onToggle: () => setExpanded((prev) => !prev),\n          }}\n        />\n        <Td data-testid={`name-column-${resource.resource}`}>\n          {resource.resource?.name}\n        </Td>\n        <Td id={resource.status?.toLowerCase()}>\n          {t(`${resource.status?.toLowerCase()}`)}\n        </Td>\n        <Td>\n          {resource.allowedScopes?.length\n            ? resource.allowedScopes.map((item) => item.name)\n            : \"-\"}\n        </Td>\n      </Tr>\n      <Tr key={`child-${resource.resource}`} isExpanded={expanded}>\n        <Td />\n        <Td colSpan={5}>\n          <ExpandableRowContent>\n            {expanded && (\n              <DescriptionList\n                isHorizontal\n                className=\"keycloak_resource_details\"\n              >\n                <TableComposable aria-label={t(\"evaluationResults\")}>\n                  <Thead>\n                    <Tr>\n                      <Th aria-hidden=\"true\" />\n                      <Th>{t(\"permission\")}</Th>\n                      <Th>{t(\"results\")}</Th>\n                      <Th>{t(\"decisionStrategy\")}</Th>\n                      <Th>{t(\"grantedScopes\")}</Th>\n                      <Th>{t(\"deniedScopes\")}</Th>\n                      <Th aria-hidden=\"true\" />\n                    </Tr>\n                  </Thead>\n                  {Object.values(evaluateResults[rowIndex].policies).map(\n                    (outerPolicy, idx) => (\n                      <AuthorizationEvaluateResourcePolicies\n                        key={idx}\n                        idx={idx}\n                        rowIndex={rowIndex}\n                        outerPolicy={outerPolicy as PolicyResultRepresentation}\n                        resource={resource}\n                      />\n                    ),\n                  )}\n                </TableComposable>\n              </DescriptionList>\n            )}\n          </ExpandableRowContent>\n        </Td>\n      </Tr>\n    </Tbody>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  Divider,\n  Form,\n  InputGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  TextInput,\n  Toolbar,\n  ToolbarGroup,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport { TableComposable, Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { KeyboardEvent, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyEvaluationResponse from \"@keycloak/keycloak-admin-client/lib/defs/policyEvaluationResponse\";\nimport { FixedButtonsGroup } from \"../../../components/form/FixedButtonGroup\";\nimport { ListEmptyState } from \"../../../components/list-empty-state/ListEmptyState\";\nimport useToggle from \"../../../utils/useToggle\";\nimport { AuthorizationDataModal } from \"../AuthorizationDataModal\";\nimport { AuthorizationEvaluateResource } from \"../AuthorizationEvaluateResource\";\n\ntype ResultProps = {\n  evaluateResult: PolicyEvaluationResponse;\n  refresh: () => void;\n  back: () => void;\n};\n\nenum ResultsFilter {\n  All = \"ALL\",\n  StatusDenied = \"STATUS_DENIED\",\n  StatusPermitted = \"STATUS_PERMITTED\",\n}\n\nfunction filterResults(\n  results: EvaluationResultRepresentation[],\n  filter: ResultsFilter,\n) {\n  switch (filter) {\n    case ResultsFilter.StatusPermitted:\n      return results.filter(({ status }) => status === \"PERMIT\");\n    case ResultsFilter.StatusDenied:\n      return results.filter(({ status }) => status === \"DENY\");\n    default:\n      return results;\n  }\n}\n\nexport const Results = ({ evaluateResult, refresh, back }: ResultProps) => {\n  const { t } = useTranslation();\n\n  const [filterDropdownOpen, toggleFilterDropdown] = useToggle();\n\n  const [filter, setFilter] = useState(ResultsFilter.All);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  const confirmSearchQuery = () => {\n    setSearchQuery(searchInput);\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      confirmSearchQuery();\n    }\n  };\n\n  const filteredResources = useMemo(\n    () =>\n      filterResults(evaluateResult.results!, filter).filter(\n        ({ resource }) => resource?.name?.includes(searchQuery) ?? false,\n      ),\n    [evaluateResult.results, filter, searchQuery],\n  );\n\n  const noEvaluatedData = evaluateResult.results!.length === 0;\n  const noFilteredData = filteredResources.length === 0;\n\n  return (\n    <PageSection>\n      <Toolbar>\n        <ToolbarGroup className=\"providers-toolbar\">\n          <ToolbarItem>\n            <InputGroup>\n              <TextInput\n                name={\"inputGroupName\"}\n                id={\"inputGroupName\"}\n                type=\"search\"\n                aria-label={t(\"search\")}\n                placeholder={t(\"search\")}\n                onChange={setSearchInput}\n                onKeyDown={handleKeyDown}\n              />\n              <Button\n                variant={ButtonVariant.control}\n                aria-label={t(\"search\")}\n                onClick={() => confirmSearchQuery()}\n              >\n                <SearchIcon />\n              </Button>\n            </InputGroup>\n          </ToolbarItem>\n          <ToolbarItem>\n            <Select\n              width={300}\n              data-testid=\"filter-type-select\"\n              isOpen={filterDropdownOpen}\n              className=\"kc-filter-type-select\"\n              variant={SelectVariant.single}\n              onToggle={toggleFilterDropdown}\n              onSelect={(_, value) => {\n                setFilter(value as ResultsFilter);\n                toggleFilterDropdown();\n                refresh();\n              }}\n              selections={filter}\n            >\n              <SelectOption\n                data-testid=\"all-results-option\"\n                value={ResultsFilter.All}\n                isPlaceholder\n              >\n                {t(\"allResults\")}\n              </SelectOption>\n              <SelectOption\n                data-testid=\"result-permit-option\"\n                value={ResultsFilter.StatusPermitted}\n              >\n                {t(\"resultPermit\")}\n              </SelectOption>\n              <SelectOption\n                data-testid=\"result-deny-option\"\n                value={ResultsFilter.StatusDenied}\n              >\n                {t(\"resultDeny\")}\n              </SelectOption>\n            </Select>\n          </ToolbarItem>\n        </ToolbarGroup>\n      </Toolbar>\n      {!noFilteredData && (\n        <TableComposable aria-label={t(\"evaluationResults\")}>\n          <Thead>\n            <Tr>\n              <Th aria-hidden=\"true\" />\n              <Th>{t(\"resource\")}</Th>\n              <Th>{t(\"overallResults\")}</Th>\n              <Th>{t(\"scopes\")}</Th>\n              <Th aria-hidden=\"true\" />\n            </Tr>\n          </Thead>\n          {filteredResources.map((resource, rowIndex) => (\n            <AuthorizationEvaluateResource\n              key={rowIndex}\n              rowIndex={rowIndex}\n              resource={resource}\n              evaluateResults={evaluateResult.results}\n            />\n          ))}\n        </TableComposable>\n      )}\n      {(noFilteredData || noEvaluatedData) && (\n        <>\n          <Divider />\n          <ListEmptyState\n            isSearchVariant\n            message={t(\"noSearchResults\")}\n            instructions={t(\"noSearchResultsInstructions\")}\n          />\n        </>\n      )}\n      <Form>\n        <FixedButtonsGroup name=\"authorization\">\n          <Button data-testid=\"authorization-eval\" id=\"back-btn\" onClick={back}>\n            {t(\"back\")}\n          </Button>{\" \"}\n          <Button\n            data-testid=\"authorization-reevaluate\"\n            id=\"reevaluate-btn\"\n            variant=\"secondary\"\n            onClick={refresh}\n          >\n            {t(\"reevaluate\")}\n          </Button>{\" \"}\n          <AuthorizationDataModal data={evaluateResult.rpt!} />\n        </FixedButtonsGroup>\n      </Form>\n    </PageSection>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type EvaluationResultRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/evaluationResultRepresentation\";\nimport type PolicyEvaluationResponse from \"@keycloak/keycloak-admin-client/lib/defs/policyEvaluationResponse\";\nimport type ResourceEvaluation from \"@keycloak/keycloak-admin-client/lib/defs/resourceEvaluation\";\nimport type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type ScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/scopeRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  ExpandableSection,\n  FormGroup,\n  PageSection,\n  Panel,\n  PanelHeader,\n  PanelMainBody,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  Title,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { ForbiddenSection } from \"../../ForbiddenSection\";\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { ClientSelect } from \"../../components/client/ClientSelect\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport {\n  KeyValueType,\n  keyValueToArray,\n} from \"../../components/key-value-form/key-value-convert\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { UserSelect } from \"../../components/users/UserSelect\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { FormFields } from \"../ClientDetails\";\nimport { defaultContextAttributes } from \"../utils\";\nimport { KeyBasedAttributeInput } from \"./KeyBasedAttributeInput\";\nimport { Results } from \"./evaluate/Results\";\n\ninterface EvaluateFormInputs\n  extends Omit<ResourceEvaluation, \"context\" | \"resources\"> {\n  alias: string;\n  authScopes: string[];\n  context: {\n    attributes: Record<string, string>[];\n  };\n  resources?: Record<string, string>[];\n  client: FormFields;\n  user: string[];\n}\n\nexport type AttributeType = {\n  key: string;\n  name: string;\n  custom?: boolean;\n  values?: {\n    [key: string]: string;\n  }[];\n};\n\ntype ClientSettingsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n};\n\nexport type AttributeForm = Omit<\n  EvaluateFormInputs,\n  \"context\" | \"resources\"\n> & {\n  context: {\n    attributes?: KeyValueType[];\n  };\n  resources?: KeyValueType[];\n};\n\ntype Props = ClientSettingsProps & EvaluationResultRepresentation;\n\nexport const AuthorizationEvaluate = (props: Props) => {\n  const { hasAccess } = useAccess();\n\n  if (!hasAccess(\"view-users\")) {\n    return <ForbiddenSection permissionNeeded=\"view-users\" />;\n  }\n\n  return <AuthorizationEvaluateContent {...props} />;\n};\n\nconst AuthorizationEvaluateContent = ({ client }: Props) => {\n  const form = useForm<EvaluateFormInputs>({ mode: \"onChange\" });\n  const {\n    control,\n    register,\n    reset,\n    trigger,\n    formState: { isValid, errors },\n  } = form;\n  const { t } = useTranslation();\n  const { addError } = useAlerts();\n  const realm = useRealm();\n\n  const [scopesDropdownOpen, setScopesDropdownOpen] = useState(false);\n\n  const [roleDropdownOpen, setRoleDropdownOpen] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [applyToResourceType, setApplyToResourceType] = useState(false);\n  const [resources, setResources] = useState<ResourceRepresentation[]>([]);\n  const [scopes, setScopes] = useState<ScopeRepresentation[]>([]);\n  const [evaluateResult, setEvaluateResult] =\n    useState<PolicyEvaluationResponse>();\n\n  const [clientRoles, setClientRoles] = useState<RoleRepresentation[]>([]);\n\n  useFetch(\n    () => adminClient.roles.find(),\n    (roles) => {\n      setClientRoles(roles);\n    },\n    [],\n  );\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.clients.listResources({\n          id: client.id!,\n        }),\n        adminClient.clients.listAllScopes({\n          id: client.id!,\n        }),\n      ]),\n    ([resources, scopes]) => {\n      setResources(resources);\n      setScopes(scopes);\n    },\n    [],\n  );\n\n  const evaluate = async () => {\n    if (!(await trigger())) {\n      return;\n    }\n    const formValues = form.getValues();\n    const keys = keyValueToArray(formValues.resources as KeyValueType[]);\n    const resEval: ResourceEvaluation = {\n      roleIds: formValues.roleIds ?? [],\n      clientId: formValues.client.id!,\n      userId: formValues.user![0],\n      resources: resources\n        .filter((resource) => Object.keys(keys).includes(resource.name!))\n        .map((r) => ({\n          ...r,\n          scopes: r.scopes?.filter((s) =>\n            Object.values(keys)\n              .flatMap((v) => v)\n              .includes(s.name!),\n          ),\n        })),\n      entitlements: false,\n      context: {\n        attributes: Object.fromEntries(\n          formValues.context.attributes\n            .filter((item) => item.key || item.value !== \"\")\n            .map(({ key, value }) => [key, value]),\n        ),\n      },\n    };\n\n    try {\n      const evaluation = await adminClient.clients.evaluateResource(\n        { id: client.id!, realm: realm.realm },\n        resEval,\n      );\n\n      setEvaluateResult(evaluation);\n    } catch (error) {\n      addError(\"evaluateError\", error);\n    }\n  };\n\n  const user = useWatch({ control, name: \"user\", defaultValue: [] });\n  const roles = useWatch({ control, name: \"roleIds\", defaultValue: [] });\n\n  if (evaluateResult) {\n    return (\n      <Results\n        evaluateResult={evaluateResult}\n        refresh={evaluate}\n        back={() => setEvaluateResult(undefined)}\n      />\n    );\n  }\n\n  return (\n    <PageSection>\n      <FormProvider {...form}>\n        <Panel>\n          <PanelHeader>\n            <Title headingLevel=\"h2\">{t(\"identityInformation\")}</Title>\n          </PanelHeader>\n          <PanelMainBody>\n            <FormAccess isHorizontal role=\"view-clients\">\n              <ClientSelect\n                name=\"client\"\n                label=\"client\"\n                helpText={\"clientHelp\"}\n                defaultValue={client.clientId}\n              />\n              <UserSelect\n                name=\"user\"\n                label=\"users\"\n                helpText={t(\"selectUser\")}\n                defaultValue={[]}\n                variant={SelectVariant.typeahead}\n                isRequired={roles?.length === 0}\n              />\n              <FormGroup\n                label={t(\"roles\")}\n                labelIcon={\n                  <HelpItem helpText={t(\"rolesHelp\")} fieldLabelId=\"roles\" />\n                }\n                fieldId=\"realmRole\"\n                validated={errors.roleIds ? \"error\" : \"default\"}\n                helperTextInvalid={t(\"required\")}\n                isRequired={user.length === 0}\n              >\n                <Controller\n                  name=\"roleIds\"\n                  control={control}\n                  defaultValue={[]}\n                  rules={{\n                    validate: (value) =>\n                      (value || \"\").length > 0 || user.length > 0,\n                  }}\n                  render={({ field }) => (\n                    <Select\n                      placeholderText={t(\"selectARole\")}\n                      variant={SelectVariant.typeaheadMulti}\n                      toggleId=\"role\"\n                      onToggle={setRoleDropdownOpen}\n                      selections={field.value}\n                      onSelect={(_, v) => {\n                        const option = v.toString();\n                        if (field.value?.includes(option)) {\n                          field.onChange(\n                            field.value.filter(\n                              (item: string) => item !== option,\n                            ),\n                          );\n                        } else {\n                          field.onChange([...(field.value || []), option]);\n                        }\n                        setRoleDropdownOpen(false);\n                      }}\n                      onClear={(event) => {\n                        event.stopPropagation();\n                        field.onChange([]);\n                      }}\n                      aria-label={t(\"realmRole\")}\n                      isOpen={roleDropdownOpen}\n                    >\n                      {clientRoles.map((role) => (\n                        <SelectOption\n                          selected={role.name === field.value}\n                          key={role.name}\n                          value={role.name}\n                        />\n                      ))}\n                    </Select>\n                  )}\n                />\n              </FormGroup>\n            </FormAccess>\n          </PanelMainBody>\n        </Panel>\n        <Panel>\n          <PanelHeader>\n            <Title headingLevel=\"h2\">{t(\"identityInformation\")}</Title>\n          </PanelHeader>\n          <PanelMainBody>\n            <FormAccess isHorizontal role=\"view-clients\">\n              <FormGroup\n                label={t(\"applyToResourceType\")}\n                fieldId=\"applyToResourceType\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"applyToResourceTypeHelp\")}\n                    fieldLabelId=\"applyToResourceType\"\n                  />\n                }\n              >\n                <Switch\n                  id=\"applyToResource-switch\"\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={applyToResourceType}\n                  onChange={setApplyToResourceType}\n                  aria-label={t(\"applyToResourceType\")}\n                />\n              </FormGroup>\n\n              {!applyToResourceType ? (\n                <FormGroup\n                  label={t(\"resourcesAndScopes\")}\n                  id=\"resourcesAndScopes\"\n                  labelIcon={\n                    <HelpItem\n                      helpText={t(\"contextualAttributesHelp\")}\n                      fieldLabelId={`resourcesAndScopes`}\n                    />\n                  }\n                  fieldId=\"resourcesAndScopes\"\n                >\n                  <KeyBasedAttributeInput\n                    selectableValues={resources.map<AttributeType>((item) => ({\n                      name: item.name!,\n                      key: item._id!,\n                    }))}\n                    resources={resources}\n                    name=\"resources\"\n                  />\n                </FormGroup>\n              ) : (\n                <>\n                  <FormGroup\n                    label={t(\"resourceType\")}\n                    isRequired\n                    labelIcon={\n                      <HelpItem\n                        helpText={t(\"resourceTypeHelp\")}\n                        fieldLabelId=\"resourceType\"\n                      />\n                    }\n                    fieldId=\"client\"\n                    validated={errors.alias ? \"error\" : \"default\"}\n                    helperTextInvalid={t(\"required\")}\n                  >\n                    <KeycloakTextInput\n                      id=\"alias\"\n                      aria-label=\"resource-type\"\n                      data-testid=\"alias\"\n                      {...register(\"alias\", { required: true })}\n                    />\n                  </FormGroup>\n                  <FormGroup\n                    label={t(\"authScopes\")}\n                    labelIcon={\n                      <HelpItem\n                        helpText={t(\"scopesSelect\")}\n                        fieldLabelId=\"client\"\n                      />\n                    }\n                    fieldId=\"authScopes\"\n                  >\n                    <Controller\n                      name=\"authScopes\"\n                      defaultValue={[]}\n                      control={control}\n                      render={({ field }) => (\n                        <Select\n                          toggleId=\"authScopes\"\n                          onToggle={setScopesDropdownOpen}\n                          onSelect={(_, v) => {\n                            const option = v.toString();\n                            if (field.value.includes(option)) {\n                              field.onChange(\n                                field.value.filter(\n                                  (item: string) => item !== option,\n                                ),\n                              );\n                            } else {\n                              field.onChange([...field.value, option]);\n                            }\n                            setScopesDropdownOpen(false);\n                          }}\n                          selections={field.value}\n                          variant={SelectVariant.typeaheadMulti}\n                          typeAheadAriaLabel={t(\"authScopes\")}\n                          isOpen={scopesDropdownOpen}\n                        >\n                          {scopes.map((scope) => (\n                            <SelectOption\n                              selected={field.value.includes(scope.name!)}\n                              key={scope.id}\n                              value={scope.name}\n                            />\n                          ))}\n                        </Select>\n                      )}\n                    />\n                  </FormGroup>\n                </>\n              )}\n              <ExpandableSection\n                toggleText={t(\"contextualInfo\")}\n                onToggle={() => setIsExpanded(!isExpanded)}\n                isExpanded={isExpanded}\n              >\n                <FormGroup\n                  label={t(\"contextualAttributes\")}\n                  id=\"contextualAttributes\"\n                  labelIcon={\n                    <HelpItem\n                      helpText={t(\"contextualAttributesHelp\")}\n                      fieldLabelId={`contextualAttributes`}\n                    />\n                  }\n                  helperTextInvalid={t(\"required\")}\n                  fieldId=\"contextualAttributes\"\n                >\n                  <KeyBasedAttributeInput\n                    selectableValues={defaultContextAttributes}\n                    name=\"context.attributes\"\n                  />\n                </FormGroup>\n              </ExpandableSection>\n            </FormAccess>\n          </PanelMainBody>\n        </Panel>\n        <ActionGroup>\n          <Button\n            data-testid=\"authorization-eval\"\n            id=\"authorization-eval\"\n            className=\"pf-u-mr-md\"\n            isDisabled={!isValid}\n            onClick={() => evaluate()}\n          >\n            {t(\"evaluate\")}\n          </Button>\n          <Button\n            data-testid=\"authorization-revert\"\n            id=\"authorization-revert\"\n            className=\"pf-u-mr-md\"\n            variant=\"link\"\n            onClick={() => reset()}\n          >\n            {t(\"revert\")}\n          </Button>\n        </ActionGroup>\n      </FormProvider>\n    </PageSection>\n  );\n};\n","import type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  FormGroup,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { prettyPrintJSON } from \"../../util\";\nimport { useParams } from \"../../utils/useParams\";\nimport type { ClientParams } from \"../routes/Client\";\n\nexport const AuthorizationExport = () => {\n  const { t } = useTranslation();\n  const { clientId } = useParams<ClientParams>();\n  const { addAlert, addError } = useAlerts();\n\n  const [code, setCode] = useState<string>();\n  const [authorizationDetails, setAuthorizationDetails] =\n    useState<ResourceServerRepresentation>();\n\n  useFetch(\n    () =>\n      adminClient.clients.exportResource({\n        id: clientId,\n      }),\n\n    (authDetails) => {\n      setCode(JSON.stringify(authDetails, null, 2));\n      setAuthorizationDetails(authDetails);\n    },\n    [],\n  );\n\n  const exportAuthDetails = () => {\n    try {\n      saveAs(\n        new Blob([prettyPrintJSON(authorizationDetails)], {\n          type: \"application/json\",\n        }),\n        \"test-authz-config.json\",\n      );\n      addAlert(t(\"exportAuthDetailsSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"exportAuthDetailsError\", error);\n    }\n  };\n\n  if (!code) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection>\n      <FormAccess\n        isHorizontal\n        role=\"manage-authorization\"\n        className=\"pf-u-mt-lg\"\n      >\n        <FormGroup\n          label={t(\"authDetails\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"authDetailsHelp\")}\n              fieldLabelId=\"authDetails\"\n            />\n          }\n          fieldId=\"client\"\n        >\n          <KeycloakTextArea\n            id=\"authorizationDetails\"\n            readOnly\n            resizeOrientation=\"vertical\"\n            value={code}\n            aria-label={t(\"authDetails\")}\n            rows={10}\n          />\n        </FormGroup>\n        <ActionGroup>\n          <Button\n            data-testid=\"authorization-export-download\"\n            onClick={() => exportAuthDetails()}\n          >\n            {t(\"download\")}\n          </Button>\n          <Button\n            data-testid=\"authorization-export-copy\"\n            variant=\"secondary\"\n            onClick={async () => {\n              try {\n                await navigator.clipboard.writeText(code!);\n                addAlert(t(\"copied\"), AlertVariant.success);\n              } catch (error) {\n                addError(t(\"copyError\"), error);\n              }\n            }}\n          >\n            {t(\"copy\")}\n          </Button>\n        </ActionGroup>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import {\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, Path } from \"react-router-dom\";\n\ntype DetailDescriptionProps<T> = {\n  name: string;\n  array?: string[] | T[];\n  convert?: (obj: T) => string;\n};\n\nexport function DetailDescription<T>(props: DetailDescriptionProps<T>) {\n  return <DetailDescriptionLink {...props} />;\n}\n\ntype DetailDescriptionLinkProps<T> = DetailDescriptionProps<T> & {\n  link?: (element: T) => Partial<Path>;\n};\n\nexport function DetailDescriptionLink<T>({\n  name,\n  array,\n  convert,\n  link,\n}: DetailDescriptionLinkProps<T>) {\n  const { t } = useTranslation();\n  return (\n    <DescriptionListGroup>\n      <DescriptionListTerm>{t(name)}</DescriptionListTerm>\n      <DescriptionListDescription>\n        {array?.map((element) => {\n          const value =\n            typeof element === \"string\" ? element : convert!(element);\n          return link ? (\n            <Link key={value} to={link(element as T)} className=\"pf-u-pr-sm\">\n              {value}\n            </Link>\n          ) : (\n            <span key={value} className=\"pf-u-pr-sm\">\n              {value}\n            </span>\n          );\n        })}\n        {array?.length === 0 && <i>{t(\"none\")}</i>}\n      </DescriptionListDescription>\n    </DescriptionListGroup>\n  );\n}\n","import { useNavigate } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Title,\n  EmptyStateBody,\n  Button,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\n\nimport { PermissionType, toNewPermission } from \"../routes/NewPermission\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toUpperCase } from \"../../util\";\n\ntype EmptyButtonProps = {\n  permissionType: PermissionType;\n  disabled?: boolean;\n  clientId: string;\n};\n\nconst EmptyButton = ({\n  permissionType,\n  disabled = false,\n  clientId,\n}: EmptyButtonProps) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n  return (\n    <Button\n      data-testid={`create-${permissionType}`}\n      className={\n        disabled ? \"keycloak__permissions__empty_state \" : \"\" + \"pf-u-m-sm\"\n      }\n      variant=\"secondary\"\n      onClick={() =>\n        !disabled &&\n        navigate(toNewPermission({ realm, id: clientId, permissionType }))\n      }\n    >\n      {t(`create${toUpperCase(permissionType)}BasedPermission`)}\n    </Button>\n  );\n};\n\nconst TooltipEmptyButton = ({\n  permissionType,\n  disabled,\n  ...props\n}: EmptyButtonProps) => {\n  const { t } = useTranslation();\n  return disabled ? (\n    <Tooltip content={t(`no${toUpperCase(permissionType)}CreateHint`)}>\n      <EmptyButton\n        {...props}\n        disabled={disabled}\n        permissionType={permissionType}\n      />\n    </Tooltip>\n  ) : (\n    <EmptyButton\n      {...props}\n      disabled={disabled}\n      permissionType={permissionType}\n    />\n  );\n};\n\ntype EmptyPermissionsStateProps = {\n  clientId: string;\n  isResourceEnabled?: boolean;\n  isScopeEnabled?: boolean;\n};\n\nexport const EmptyPermissionsState = ({\n  clientId,\n  isResourceEnabled,\n  isScopeEnabled,\n}: EmptyPermissionsStateProps) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState data-testid=\"empty-state\" variant=\"large\">\n      <EmptyStateIcon icon={PlusCircleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        {t(\"emptyPermissions\")}\n      </Title>\n      <EmptyStateBody>{t(\"emptyPermissionInstructions\")}</EmptyStateBody>\n      <TooltipEmptyButton\n        permissionType=\"resource\"\n        disabled={isResourceEnabled}\n        clientId={clientId}\n      />\n      <br />\n      <TooltipEmptyButton\n        permissionType=\"scope\"\n        disabled={isScopeEnabled}\n        clientId={clientId}\n      />\n    </EmptyState>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Label } from \"@patternfly/react-core\";\n\ntype MoreLabelProps = {\n  array: unknown[] | undefined;\n};\n\nexport const MoreLabel = ({ array }: MoreLabelProps) => {\n  const { t } = useTranslation();\n\n  if (!array || array.length <= 1) {\n    return null;\n  }\n  return <Label color=\"blue\">{t(\"more\", { count: array.length - 1 })}</Label>;\n};\n","import type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  Dropdown,\n  DropdownToggle,\n  Form,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useEffect } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport useToggle from \"../../utils/useToggle\";\n\nimport \"./search-dropdown.css\";\n\nexport type SearchForm = {\n  name?: string;\n  resource?: string;\n  scope?: string;\n  type?: string;\n  uri?: string;\n  owner?: string;\n};\n\ntype SearchDropdownProps = {\n  types?: PolicyProviderRepresentation[] | PolicyProviderRepresentation[];\n  search: SearchForm;\n  onSearch: (form: SearchForm) => void;\n  isResource?: boolean;\n};\n\nexport const SearchDropdown = ({\n  types,\n  search,\n  onSearch,\n  isResource = false,\n}: SearchDropdownProps) => {\n  const { t } = useTranslation();\n  const {\n    register,\n    control,\n    reset,\n    formState: { isDirty },\n    handleSubmit,\n  } = useForm<SearchForm>({ mode: \"onChange\" });\n\n  const [open, toggle] = useToggle();\n  const [typeOpen, toggleType] = useToggle();\n\n  const submit = (form: SearchForm) => {\n    toggle();\n    onSearch(form);\n  };\n\n  useEffect(() => reset(search), [search]);\n\n  const typeOptions = (value?: string) => [\n    <SelectOption key=\"empty\" value=\"\">\n      {t(\"allTypes\")}\n    </SelectOption>,\n    ...(types || []).map((type) => (\n      <SelectOption\n        selected={type.type === value}\n        key={type.type}\n        value={type.type}\n      >\n        {type.name}\n      </SelectOption>\n    )),\n  ];\n\n  return (\n    <Dropdown\n      data-testid=\"searchdropdown_dorpdown\"\n      className=\"pf-u-ml-md\"\n      toggle={\n        <DropdownToggle\n          onToggle={toggle}\n          className=\"keycloak__client_authentication__searchdropdown\"\n        >\n          {t(\"searchForPermission\")}\n        </DropdownToggle>\n      }\n      isOpen={open}\n    >\n      <Form\n        isHorizontal\n        className=\"keycloak__client_authentication__searchdropdown_form\"\n        onSubmit={handleSubmit(submit)}\n      >\n        <FormGroup label={t(\"name\")} fieldId=\"name\">\n          <KeycloakTextInput\n            id=\"name\"\n            data-testid=\"searchdropdown_name\"\n            {...register(\"name\")}\n          />\n        </FormGroup>\n        {isResource && (\n          <>\n            <FormGroup label={t(\"type\")} fieldId=\"type\">\n              <KeycloakTextInput\n                id=\"type\"\n                data-testid=\"searchdropdown_type\"\n                {...register(\"type\")}\n              />\n            </FormGroup>\n            <FormGroup label={t(\"uris\")} fieldId=\"uri\">\n              <KeycloakTextInput\n                id=\"uri\"\n                data-testid=\"searchdropdown_uri\"\n                {...register(\"uri\")}\n              />\n            </FormGroup>\n            <FormGroup label={t(\"owner\")} fieldId=\"owner\">\n              <KeycloakTextInput\n                id=\"owner\"\n                data-testid=\"searchdropdown_owner\"\n                {...register(\"owner\")}\n              />\n            </FormGroup>\n          </>\n        )}\n        {!isResource && (\n          <FormGroup label={t(\"resource\")} fieldId=\"resource\">\n            <KeycloakTextInput\n              id=\"resource\"\n              data-testid=\"searchdropdown_resource\"\n              {...register(\"resource\")}\n            />\n          </FormGroup>\n        )}\n        <FormGroup label={t(\"scope\")} fieldId=\"scope\">\n          <KeycloakTextInput\n            id=\"scope\"\n            data-testid=\"searchdropdown_scope\"\n            {...register(\"scope\")}\n          />\n        </FormGroup>\n        {!isResource && (\n          <FormGroup label={t(\"type\")} fieldId=\"type\">\n            <Controller\n              name=\"type\"\n              defaultValue=\"\"\n              control={control}\n              render={({ field }) => (\n                <Select\n                  toggleId=\"type\"\n                  onToggle={toggleType}\n                  onSelect={(event, value) => {\n                    event.stopPropagation();\n                    field.onChange(value);\n                    toggleType();\n                  }}\n                  selections={field.value || t(\"allTypes\")}\n                  variant={SelectVariant.single}\n                  aria-label={t(\"type\")}\n                  isOpen={typeOpen}\n                >\n                  {typeOptions(field.value)}\n                </Select>\n              )}\n            />\n          </FormGroup>\n        )}\n        <ActionGroup>\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"search-btn\"\n            isDisabled={!isDirty}\n          >\n            {t(\"search\")}\n          </Button>\n          <Button\n            variant=\"link\"\n            data-testid=\"revert-btn\"\n            onClick={() => onSearch({})}\n          >\n            {t(\"clear\")}\n          </Button>\n        </ActionGroup>\n      </Form>\n    </Dropdown>\n  );\n};\n","import type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport {\n  Alert,\n  AlertVariant,\n  ButtonVariant,\n  DescriptionList,\n  Dropdown,\n  DropdownItem,\n  DropdownSeparator,\n  DropdownToggle,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { PaginatingTableToolbar } from \"../../components/table-toolbar/PaginatingTableToolbar\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\nimport { EmptyPermissionsState } from \"./EmptyPermissionsState\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\n\nimport \"./permissions.css\";\n\ntype PermissionsProps = {\n  clientId: string;\n};\n\ntype ExpandablePolicyRepresentation = PolicyRepresentation & {\n  associatedPolicies?: PolicyRepresentation[];\n  isExpanded: boolean;\n};\n\nconst AssociatedPoliciesRenderer = ({\n  row,\n}: {\n  row: ExpandablePolicyRepresentation;\n}) => {\n  return (\n    <>\n      {row.associatedPolicies?.[0]?.name}{\" \"}\n      <MoreLabel array={row.associatedPolicies} />\n    </>\n  );\n};\n\nexport const AuthorizationPermissions = ({ clientId }: PermissionsProps) => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [permissions, setPermissions] =\n    useState<ExpandablePolicyRepresentation[]>();\n  const [selectedPermission, setSelectedPermission] =\n    useState<PolicyRepresentation>();\n  const [policyProviders, setPolicyProviders] =\n    useState<PolicyProviderRepresentation[]>();\n  const [disabledCreate, setDisabledCreate] = useState<{\n    resources: boolean;\n    scopes: boolean;\n  }>();\n  const [createOpen, toggleCreate] = useToggle();\n  const [search, setSearch] = useState<SearchForm>({});\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n\n  useFetch(\n    async () => {\n      const permissions = await adminClient.clients.findPermissions({\n        first,\n        max: max + 1,\n        id: clientId,\n        ...search,\n      });\n\n      return await Promise.all(\n        permissions.map(async (permission) => {\n          const associatedPolicies =\n            await adminClient.clients.getAssociatedPolicies({\n              id: clientId,\n              permissionId: permission.id!,\n            });\n\n          return {\n            ...permission,\n            associatedPolicies,\n            isExpanded: false,\n          };\n        }),\n      );\n    },\n    setPermissions,\n    [key, search, first, max],\n  );\n\n  useFetch(\n    async () => {\n      const params = {\n        first: 0,\n        max: 1,\n      };\n      const [policies, resources, scopes] = await Promise.all([\n        adminClient.clients.listPolicyProviders({\n          id: clientId,\n        }),\n        adminClient.clients.listResources({ ...params, id: clientId }),\n        adminClient.clients.listAllScopes({ ...params, id: clientId }),\n      ]);\n      return {\n        policies: policies.filter(\n          (p) => p.type === \"resource\" || p.type === \"scope\",\n        ),\n        resources: resources.length !== 1,\n        scopes: scopes.length !== 1,\n      };\n    },\n    ({ policies, resources, scopes }) => {\n      setPolicyProviders(policies);\n      setDisabledCreate({ resources, scopes });\n    },\n    [],\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deletePermission\",\n    messageKey: t(\"deletePermissionConfirm\", {\n      permission: selectedPermission?.name,\n    }),\n    continueButtonVariant: ButtonVariant.danger,\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPermission({\n          id: clientId,\n          type: selectedPermission?.type!,\n          permissionId: selectedPermission?.id!,\n        });\n        addAlert(t(\"permissionDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"permissionDeletedError\", error);\n      }\n    },\n  });\n\n  if (!permissions) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = permissions.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={permissions.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          toolbarItem={\n            <>\n              <ToolbarItem>\n                <SearchDropdown\n                  types={policyProviders}\n                  search={search}\n                  onSearch={setSearch}\n                />\n              </ToolbarItem>\n              <ToolbarItem>\n                <Dropdown\n                  toggle={\n                    <DropdownToggle\n                      onToggle={toggleCreate}\n                      isPrimary\n                      data-testid=\"permissionCreateDropdown\"\n                    >\n                      {t(\"createPermission\")}\n                    </DropdownToggle>\n                  }\n                  isOpen={createOpen}\n                  dropdownItems={[\n                    <DropdownItem\n                      data-testid=\"create-resource\"\n                      key=\"createResourceBasedPermission\"\n                      isDisabled={disabledCreate?.resources}\n                      component=\"button\"\n                      onClick={() =>\n                        navigate(\n                          toNewPermission({\n                            realm,\n                            id: clientId,\n                            permissionType: \"resource\",\n                          }),\n                        )\n                      }\n                    >\n                      {t(\"createResourceBasedPermission\")}\n                    </DropdownItem>,\n                    <DropdownSeparator key=\"separator\" />,\n                    <DropdownItem\n                      data-testid=\"create-scope\"\n                      key=\"createScopeBasedPermission\"\n                      isDisabled={disabledCreate?.scopes}\n                      component=\"button\"\n                      onClick={() =>\n                        navigate(\n                          toNewPermission({\n                            realm,\n                            id: clientId,\n                            permissionType: \"scope\",\n                          }),\n                        )\n                      }\n                    >\n                      {t(\"createScopeBasedPermission\")}\n                      {disabledCreate?.scopes && (\n                        <Alert\n                          className=\"pf-u-mt-sm\"\n                          variant=\"warning\"\n                          isInline\n                          isPlain\n                          title={t(\"noScopeCreateHint\")}\n                        />\n                      )}\n                    </DropdownItem>,\n                  ]}\n                />\n              </ToolbarItem>\n            </>\n          }\n        >\n          {!noData && (\n            <TableComposable aria-label={t(\"resources\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th aria-hidden=\"true\" />\n                  <Th>{t(\"name\")}</Th>\n                  <Th>{t(\"type\")}</Th>\n                  <Th>{t(\"associatedPolicy\")}</Th>\n                  <Th>{t(\"description\")}</Th>\n                  <Th aria-hidden=\"true\" />\n                </Tr>\n              </Thead>\n              {permissions.map((permission, rowIndex) => (\n                <Tbody key={permission.id} isExpanded={permission.isExpanded}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: permission.isExpanded,\n                        onToggle: (_, rowIndex) => {\n                          const rows = permissions.map((p, index) =>\n                            index === rowIndex\n                              ? { ...p, isExpanded: !p.isExpanded }\n                              : p,\n                          );\n                          setPermissions(rows);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${permission.name}`}>\n                      <Link\n                        to={toPermissionDetails({\n                          realm,\n                          id: clientId,\n                          permissionType: permission.type!,\n                          permissionId: permission.id!,\n                        })}\n                      >\n                        {permission.name}\n                      </Link>\n                    </Td>\n                    <Td>\n                      {\n                        policyProviders?.find((p) => p.type === permission.type)\n                          ?.name\n                      }\n                    </Td>\n                    <Td>\n                      <AssociatedPoliciesRenderer row={permission} />\n                    </Td>\n                    <Td>{permission.description}</Td>\n                    <Td\n                      actions={{\n                        items: [\n                          {\n                            title: t(\"delete\"),\n                            onClick: async () => {\n                              setSelectedPermission(permission);\n                              toggleDeleteDialog();\n                            },\n                          },\n                        ],\n                      }}\n                    ></Td>\n                  </Tr>\n                  <Tr\n                    key={`child-${permission.id}`}\n                    isExpanded={permission.isExpanded}\n                  >\n                    <Td />\n                    <Td colSpan={5}>\n                      <ExpandableRowContent>\n                        {permission.isExpanded && (\n                          <DescriptionList\n                            isHorizontal\n                            className=\"keycloak_resource_details\"\n                          >\n                            <DetailDescriptionLink\n                              name=\"associatedPolicy\"\n                              array={permission.associatedPolicies}\n                              convert={(p) => p.name!}\n                              link={(p) =>\n                                toPolicyDetails({\n                                  id: clientId,\n                                  realm,\n                                  policyId: p.id!,\n                                  policyType: p.type!,\n                                })\n                              }\n                            />\n                          </DescriptionList>\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </TableComposable>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && !searching && (\n        <EmptyPermissionsState\n          clientId={clientId}\n          isResourceEnabled={disabledCreate?.resources}\n          isScopeEnabled={disabledCreate?.scopes}\n        />\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      )}\n    </PageSection>\n  );\n};\n","import type PolicyProviderRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyProviderRepresentation\";\nimport type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  DescriptionList,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { PaginatingTableToolbar } from \"../../components/table-toolbar/PaginatingTableToolbar\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toUpperCase } from \"../../util\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toCreatePolicy } from \"../routes/NewPolicy\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toPolicyDetails } from \"../routes/PolicyDetails\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { NewPolicyDialog } from \"./NewPolicyDialog\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\n\ntype PoliciesProps = {\n  clientId: string;\n};\n\ntype ExpandablePolicyRepresentation = PolicyRepresentation & {\n  dependentPolicies?: PolicyRepresentation[];\n  isExpanded: boolean;\n};\n\nconst DependentPoliciesRenderer = ({\n  row,\n}: {\n  row: ExpandablePolicyRepresentation;\n}) => {\n  return (\n    <>\n      {row.dependentPolicies?.[0]?.name}{\" \"}\n      <MoreLabel array={row.dependentPolicies} />\n    </>\n  );\n};\n\nexport const AuthorizationPolicies = ({ clientId }: PoliciesProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const navigate = useNavigate();\n\n  const [policies, setPolicies] = useState<ExpandablePolicyRepresentation[]>();\n  const [selectedPolicy, setSelectedPolicy] =\n    useState<ExpandablePolicyRepresentation>();\n  const [policyProviders, setPolicyProviders] =\n    useState<PolicyProviderRepresentation[]>();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState<SearchForm>({});\n  const [newDialog, toggleDialog] = useToggle();\n\n  useFetch(\n    async () => {\n      const policies = await adminClient.clients.listPolicies({\n        first,\n        max: max + 1,\n        id: clientId,\n        permission: \"false\",\n        ...search,\n      });\n\n      return await Promise.all([\n        adminClient.clients.listPolicyProviders({ id: clientId }),\n        ...(policies || []).map(async (policy) => {\n          const dependentPolicies =\n            await adminClient.clients.listDependentPolicies({\n              id: clientId,\n              policyId: policy.id!,\n            });\n\n          return {\n            ...policy,\n            dependentPolicies,\n            isExpanded: false,\n          };\n        }),\n      ]);\n    },\n    ([providers, ...policies]) => {\n      setPolicyProviders(\n        providers.filter((p) => p.type !== \"resource\" && p.type !== \"scope\"),\n      );\n      setPolicies(policies);\n    },\n    [key, search, first, max],\n  );\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deletePolicy\",\n    children: (\n      <>\n        {t(\"deletePolicyConfirm\")}\n        {selectedPolicy?.dependentPolicies &&\n          selectedPolicy.dependentPolicies.length > 0 && (\n            <Alert\n              variant=\"warning\"\n              isInline\n              isPlain\n              component=\"p\"\n              title={t(\"deletePolicyWarning\")}\n              className=\"pf-u-pt-lg\"\n            >\n              <p className=\"pf-u-pt-xs\">\n                {selectedPolicy.dependentPolicies.map((policy) => (\n                  <strong key={policy.id} className=\"pf-u-pr-md\">\n                    {policy.name}\n                  </strong>\n                ))}\n              </p>\n            </Alert>\n          )}\n      </>\n    ),\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delPolicy({\n          id: clientId,\n          policyId: selectedPolicy?.id!,\n        });\n        addAlert(t(\"policyDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"policyDeletedError\", error);\n      }\n    },\n  });\n\n  if (!policies) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = policies.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <>\n          {newDialog && (\n            <NewPolicyDialog\n              policyProviders={policyProviders}\n              onSelect={(p) =>\n                navigate(\n                  toCreatePolicy({ id: clientId, realm, policyType: p.type! }),\n                )\n              }\n              toggleDialog={toggleDialog}\n            />\n          )}\n\n          <PaginatingTableToolbar\n            count={policies.length}\n            first={first}\n            max={max}\n            onNextClick={setFirst}\n            onPreviousClick={setFirst}\n            onPerPageSelect={(first, max) => {\n              setFirst(first);\n              setMax(max);\n            }}\n            toolbarItem={\n              <>\n                <ToolbarItem>\n                  <SearchDropdown\n                    types={policyProviders}\n                    search={search}\n                    onSearch={setSearch}\n                  />\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Button data-testid=\"createPolicy\" onClick={toggleDialog}>\n                    {t(\"createPolicy\")}\n                  </Button>\n                </ToolbarItem>\n              </>\n            }\n          >\n            {!noData && (\n              <TableComposable aria-label={t(\"resources\")} variant=\"compact\">\n                <Thead>\n                  <Tr>\n                    <Th aria-hidden=\"true\" />\n                    <Th>{t(\"name\")}</Th>\n                    <Th>{t(\"type\")}</Th>\n                    <Th>{t(\"dependentPermission\")}</Th>\n                    <Th>{t(\"description\")}</Th>\n                    <Th aria-hidden=\"true\" />\n                  </Tr>\n                </Thead>\n                {policies.map((policy, rowIndex) => (\n                  <Tbody key={policy.id} isExpanded={policy.isExpanded}>\n                    <Tr>\n                      <Td\n                        expand={{\n                          rowIndex,\n                          isExpanded: policy.isExpanded,\n                          onToggle: (_, rowIndex) => {\n                            const rows = policies.map((policy, index) =>\n                              index === rowIndex\n                                ? { ...policy, isExpanded: !policy.isExpanded }\n                                : policy,\n                            );\n                            setPolicies(rows);\n                          },\n                        }}\n                      />\n                      <Td data-testid={`name-column-${policy.name}`}>\n                        <Link\n                          to={toPolicyDetails({\n                            realm,\n                            id: clientId,\n                            policyType: policy.type!,\n                            policyId: policy.id!,\n                          })}\n                        >\n                          {policy.name}\n                        </Link>\n                      </Td>\n                      <Td>{toUpperCase(policy.type!)}</Td>\n                      <Td>\n                        <DependentPoliciesRenderer row={policy} />\n                      </Td>\n                      <Td>{policy.description}</Td>\n                      <Td\n                        actions={{\n                          items: [\n                            {\n                              title: t(\"delete\"),\n                              onClick: async () => {\n                                setSelectedPolicy(policy);\n                                toggleDeleteDialog();\n                              },\n                            },\n                          ],\n                        }}\n                      />\n                    </Tr>\n                    <Tr\n                      key={`child-${policy.id}`}\n                      isExpanded={policy.isExpanded}\n                    >\n                      <Td />\n                      <Td colSpan={4}>\n                        <ExpandableRowContent>\n                          {policy.isExpanded && (\n                            <DescriptionList\n                              isHorizontal\n                              className=\"keycloak_resource_details\"\n                            >\n                              <DetailDescriptionLink\n                                name=\"dependentPermission\"\n                                array={policy.dependentPolicies}\n                                convert={(p) => p.name!}\n                                link={(permission) =>\n                                  toPermissionDetails({\n                                    realm,\n                                    id: clientId,\n                                    permissionId: permission.id!,\n                                    permissionType: permission.type!,\n                                  })\n                                }\n                              />\n                            </DescriptionList>\n                          )}\n                        </ExpandableRowContent>\n                      </Td>\n                    </Tr>\n                  </Tbody>\n                ))}\n              </TableComposable>\n            )}\n          </PaginatingTableToolbar>\n        </>\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      )}\n      {noData && !searching && (\n        <>\n          {newDialog && (\n            <NewPolicyDialog\n              policyProviders={policyProviders?.filter(\n                (p) => p.type !== \"aggregate\",\n              )}\n              onSelect={(p) =>\n                navigate(\n                  toCreatePolicy({ id: clientId, realm, policyType: p.type! }),\n                )\n              }\n              toggleDialog={toggleDialog}\n            />\n          )}\n          <ListEmptyState\n            message={t(\"emptyPolicies\")}\n            instructions={t(\"emptyPoliciesInstructions\")}\n            primaryActionText={t(\"createPolicy\")}\n            onPrimaryAction={toggleDialog}\n          />\n        </>\n      )}\n    </PageSection>\n  );\n};\n","import type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { DescriptionList } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { adminClient } from \"../../admin-client\";\n\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toScopeDetails } from \"../routes/Scope\";\nimport { DetailDescription, DetailDescriptionLink } from \"./DetailDescription\";\n\nimport \"./detail-cell.css\";\n\ntype Scope = { id: string; name: string }[];\n\ntype DetailCellProps = {\n  id: string;\n  clientId: string;\n  uris?: string[];\n};\n\nexport const DetailCell = ({ id, clientId, uris }: DetailCellProps) => {\n  const { realm } = useRealm();\n  const [scope, setScope] = useState<Scope>();\n  const [permissions, setPermissions] =\n    useState<ResourceServerRepresentation[]>();\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.clients.listScopesByResource({\n          id: clientId,\n          resourceName: id,\n        }),\n        adminClient.clients.listPermissionsByResource({\n          id: clientId,\n          resourceId: id,\n        }),\n      ]),\n    ([scopes, permissions]) => {\n      setScope(scopes);\n      setPermissions(permissions);\n    },\n    [],\n  );\n\n  if (!permissions || !scope) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <DescriptionList isHorizontal className=\"keycloak_resource_details\">\n      <DetailDescription name=\"uris\" array={uris} />\n      <DetailDescriptionLink\n        name=\"scopes\"\n        array={scope}\n        convert={(s) => s.name}\n        link={(scope) =>\n          toScopeDetails({ id: clientId, realm, scopeId: scope.id! })\n        }\n      />\n      <DetailDescriptionLink\n        name=\"associatedPermissions\"\n        array={permissions}\n        convert={(p) => p.name!}\n        link={(permission) =>\n          toPermissionDetails({\n            id: clientId,\n            realm,\n            permissionId: permission.id!,\n            permissionType: \"resource\",\n          })\n        }\n      />\n    </DescriptionList>\n  );\n};\n","import type ResourceRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceRepresentation\";\nimport type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { PaginatingTableToolbar } from \"../../components/table-toolbar/PaginatingTableToolbar\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { toCreateResource } from \"../routes/NewResource\";\nimport { toResourceDetails } from \"../routes/Resource\";\nimport { DetailCell } from \"./DetailCell\";\nimport { MoreLabel } from \"./MoreLabel\";\nimport { SearchDropdown, SearchForm } from \"./SearchDropdown\";\n\ntype ResourcesProps = {\n  clientId: string;\n};\n\ntype ExpandableResourceRepresentation = ResourceRepresentation & {\n  isExpanded: boolean;\n};\n\nconst UriRenderer = ({ row }: { row: ResourceRepresentation }) => (\n  <>\n    {row.uris?.[0]} <MoreLabel array={row.uris} />\n  </>\n);\n\nexport const AuthorizationResources = ({ clientId }: ResourcesProps) => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [resources, setResources] =\n    useState<ExpandableResourceRepresentation[]>();\n  const [selectedResource, setSelectedResource] =\n    useState<ResourceRepresentation>();\n  const [permissions, setPermission] =\n    useState<ResourceServerRepresentation[]>();\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState<SearchForm>({});\n\n  useFetch(\n    () => {\n      const params = {\n        first,\n        max: max + 1,\n        deep: false,\n        ...search,\n      };\n      return adminClient.clients.listResources({\n        ...params,\n        id: clientId,\n      });\n    },\n    (resources) =>\n      setResources(\n        resources.map((resource) => ({ ...resource, isExpanded: false })),\n      ),\n    [key, search, first, max],\n  );\n\n  const fetchPermissions = async (id: string) => {\n    return adminClient.clients.listPermissionsByResource({\n      id: clientId,\n      resourceId: id,\n    });\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"deleteResource\",\n    children: (\n      <>\n        {t(\"deleteResourceConfirm\")}\n        {permissions?.length && (\n          <Alert\n            variant=\"warning\"\n            isInline\n            isPlain\n            title={t(\"deleteResourceWarning\")}\n            className=\"pf-u-pt-lg\"\n          >\n            <p className=\"pf-u-pt-xs\">\n              {permissions.map((permission) => (\n                <strong key={permission.id} className=\"pf-u-pr-md\">\n                  {permission.name}\n                </strong>\n              ))}\n            </p>\n          </Alert>\n        )}\n      </>\n    ),\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.delResource({\n          id: clientId,\n          resourceId: selectedResource?._id!,\n        });\n        addAlert(t(\"resourceDeletedSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"resourceDeletedError\", error);\n      }\n    },\n  });\n\n  if (!resources) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = resources.length === 0;\n  const searching = Object.keys(search).length !== 0;\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <DeleteConfirm />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={resources.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          toolbarItem={\n            <>\n              <ToolbarItem>\n                <SearchDropdown\n                  search={search}\n                  onSearch={setSearch}\n                  isResource\n                />\n              </ToolbarItem>\n\n              <ToolbarItem>\n                <Button\n                  data-testid=\"createResource\"\n                  component={(props) => (\n                    <Link\n                      {...props}\n                      to={toCreateResource({ realm, id: clientId })}\n                    />\n                  )}\n                >\n                  {t(\"createResource\")}\n                </Button>\n              </ToolbarItem>\n            </>\n          }\n        >\n          {!noData && (\n            <TableComposable aria-label={t(\"resources\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th aria-hidden=\"true\" />\n                  <Th>{t(\"name\")}</Th>\n                  <Th>{t(\"displayName\")}</Th>\n                  <Th>{t(\"type\")}</Th>\n                  <Th>{t(\"owner\")}</Th>\n                  <Th>{t(\"uris\")}</Th>\n                  <Th aria-hidden=\"true\" />\n                  <Th aria-hidden=\"true\" />\n                </Tr>\n              </Thead>\n              {resources.map((resource, rowIndex) => (\n                <Tbody key={resource._id} isExpanded={resource.isExpanded}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: resource.isExpanded,\n                        onToggle: (_, rowIndex) => {\n                          const rows = resources.map((resource, index) =>\n                            index === rowIndex\n                              ? {\n                                  ...resource,\n                                  isExpanded: !resource.isExpanded,\n                                }\n                              : resource,\n                          );\n                          setResources(rows);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${resource.name}`}>\n                      <Link\n                        to={toResourceDetails({\n                          realm,\n                          id: clientId,\n                          resourceId: resource._id!,\n                        })}\n                      >\n                        {resource.name}\n                      </Link>\n                    </Td>\n                    <Td>{resource.displayName}</Td>\n                    <Td>{resource.type}</Td>\n                    <Td>{resource.owner?.name}</Td>\n                    <Td>\n                      <UriRenderer row={resource} />\n                    </Td>\n                    <Td width={10}>\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link\n                            {...props}\n                            to={toNewPermission({\n                              realm,\n                              id: clientId,\n                              permissionType: \"resource\",\n                              selectedId: resource._id,\n                            })}\n                          />\n                        )}\n                      >\n                        {t(\"createPermission\")}\n                      </Button>\n                    </Td>\n                    <Td\n                      actions={{\n                        items: [\n                          {\n                            title: t(\"delete\"),\n                            onClick: async () => {\n                              setSelectedResource(resource);\n                              setPermission(\n                                await fetchPermissions(resource._id!),\n                              );\n                              toggleDeleteDialog();\n                            },\n                          },\n                        ],\n                      }}\n                    />\n                  </Tr>\n                  <Tr\n                    key={`child-${resource._id}`}\n                    isExpanded={resource.isExpanded}\n                  >\n                    <Td />\n                    <Td colSpan={4}>\n                      <ExpandableRowContent>\n                        {resource.isExpanded && (\n                          <DetailCell\n                            clientId={clientId}\n                            id={resource._id!}\n                            uris={resource.uris}\n                          />\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </TableComposable>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      )}\n      {noData && !searching && (\n        <ListEmptyState\n          message={t(\"emptyResources\")}\n          instructions={t(\"emptyResourcesInstructions\")}\n          primaryActionText={t(\"createResource\")}\n          onPrimaryAction={() =>\n            navigate(toCreateResource({ realm, id: clientId }))\n          }\n        />\n      )}\n    </PageSection>\n  );\n};\n","import type PolicyRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/policyRepresentation\";\nimport type ScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/scopeRepresentation\";\nimport {\n  Button,\n  DescriptionList,\n  PageSection,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport {\n  ExpandableRowContent,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport { PaginatingTableToolbar } from \"../../components/table-toolbar/PaginatingTableToolbar\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport useToggle from \"../../utils/useToggle\";\nimport { toNewPermission } from \"../routes/NewPermission\";\nimport { toNewScope } from \"../routes/NewScope\";\nimport { toPermissionDetails } from \"../routes/PermissionDetails\";\nimport { toResourceDetails } from \"../routes/Resource\";\nimport { toScopeDetails } from \"../routes/Scope\";\nimport { DeleteScopeDialog } from \"./DeleteScopeDialog\";\nimport { DetailDescriptionLink } from \"./DetailDescription\";\n\ntype ScopesProps = {\n  clientId: string;\n};\n\nexport type PermissionScopeRepresentation = ScopeRepresentation & {\n  permissions?: PolicyRepresentation[];\n  isLoaded: boolean;\n};\n\ntype ExpandableRow = {\n  id: string;\n  isExpanded: boolean;\n};\n\nexport const AuthorizationScopes = ({ clientId }: ScopesProps) => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { realm } = useRealm();\n\n  const [deleteDialog, toggleDeleteDialog] = useToggle();\n  const [scopes, setScopes] = useState<PermissionScopeRepresentation[]>();\n  const [selectedScope, setSelectedScope] =\n    useState<PermissionScopeRepresentation>();\n  const [collapsed, setCollapsed] = useState<ExpandableRow[]>([]);\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const [max, setMax] = useState(10);\n  const [first, setFirst] = useState(0);\n  const [search, setSearch] = useState(\"\");\n\n  useFetch(\n    () => {\n      const params = {\n        first,\n        max: max + 1,\n        deep: false,\n        name: search,\n      };\n      return adminClient.clients.listAllScopes({\n        ...params,\n        id: clientId,\n      });\n    },\n    (scopes) => {\n      setScopes(scopes.map((s) => ({ ...s, isLoaded: false })));\n      setCollapsed(scopes.map((s) => ({ id: s.id!, isExpanded: false })));\n    },\n    [key, search, first, max],\n  );\n\n  const getScope = (id: string) => scopes?.find((scope) => scope.id === id)!;\n  const isExpanded = (id: string | undefined) =>\n    collapsed.find((c) => c.id === id)?.isExpanded || false;\n\n  useFetch(\n    () => {\n      const newlyOpened = collapsed\n        .filter((row) => row.isExpanded)\n        .map(({ id }) => getScope(id))\n        .filter((s) => !s.isLoaded);\n\n      return Promise.all(\n        newlyOpened.map(async (scope) => {\n          const [resources, permissions] = await Promise.all([\n            adminClient.clients.listAllResourcesByScope({\n              id: clientId,\n              scopeId: scope.id!,\n            }),\n            adminClient.clients.listAllPermissionsByScope({\n              id: clientId,\n              scopeId: scope.id!,\n            }),\n          ]);\n\n          return {\n            ...scope,\n            resources,\n            permissions,\n            isLoaded: true,\n          };\n        }),\n      );\n    },\n    (resourcesScopes) => {\n      let result = [...(scopes || [])];\n      resourcesScopes.forEach((resourceScope) => {\n        const index = scopes?.findIndex(\n          (scope) => resourceScope.id === scope.id,\n        )!;\n        result = [\n          ...result.slice(0, index),\n          resourceScope,\n          ...result.slice(index + 1),\n        ];\n      });\n\n      setScopes(result);\n    },\n    [collapsed],\n  );\n\n  if (!scopes) {\n    return <KeycloakSpinner />;\n  }\n\n  const noData = scopes.length === 0;\n  const searching = search !== \"\";\n  return (\n    <PageSection variant=\"light\" className=\"pf-u-p-0\">\n      <DeleteScopeDialog\n        clientId={clientId}\n        open={deleteDialog}\n        toggleDialog={toggleDeleteDialog}\n        selectedScope={selectedScope}\n        refresh={refresh}\n      />\n      {(!noData || searching) && (\n        <PaginatingTableToolbar\n          count={scopes.length}\n          first={first}\n          max={max}\n          onNextClick={setFirst}\n          onPreviousClick={setFirst}\n          onPerPageSelect={(first, max) => {\n            setFirst(first);\n            setMax(max);\n          }}\n          inputGroupName=\"search\"\n          inputGroupPlaceholder={t(\"searchByName\")}\n          inputGroupOnEnter={setSearch}\n          toolbarItem={\n            <ToolbarItem>\n              <Button\n                data-testid=\"createAuthorizationScope\"\n                component={(props) => (\n                  <Link {...props} to={toNewScope({ realm, id: clientId })} />\n                )}\n              >\n                {t(\"createAuthorizationScope\")}\n              </Button>\n            </ToolbarItem>\n          }\n        >\n          {!noData && (\n            <TableComposable aria-label={t(\"scopes\")} variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th aria-hidden=\"true\" />\n                  <Th>{t(\"name\")}</Th>\n                  <Th>{t(\"displayName\")}</Th>\n                  <Th aria-hidden=\"true\" />\n                  <Th aria-hidden=\"true\" />\n                </Tr>\n              </Thead>\n              {scopes.map((scope, rowIndex) => (\n                <Tbody key={scope.id} isExpanded={isExpanded(scope.id)}>\n                  <Tr>\n                    <Td\n                      expand={{\n                        rowIndex,\n                        isExpanded: isExpanded(scope.id),\n                        onToggle: (_event, index, isExpanded) => {\n                          setCollapsed([\n                            ...collapsed.slice(0, index),\n                            { id: scope.id!, isExpanded },\n                            ...collapsed.slice(index + 1),\n                          ]);\n                        },\n                      }}\n                    />\n                    <Td data-testid={`name-column-${scope.name}`}>\n                      <Link\n                        to={toScopeDetails({\n                          realm,\n                          id: clientId,\n                          scopeId: scope.id!,\n                        })}\n                      >\n                        {scope.name}\n                      </Link>\n                    </Td>\n                    <Td>{scope.displayName}</Td>\n                    <Td width={10}>\n                      <Button\n                        variant=\"link\"\n                        component={(props) => (\n                          <Link\n                            {...props}\n                            to={toNewPermission({\n                              realm,\n                              id: clientId,\n                              permissionType: \"scope\",\n                              selectedId: scope.id,\n                            })}\n                          />\n                        )}\n                      >\n                        {t(\"createPermission\")}\n                      </Button>\n                    </Td>\n                    <Td\n                      isActionCell\n                      actions={{\n                        items: [\n                          {\n                            title: t(\"delete\"),\n                            onClick: () => {\n                              setSelectedScope(scope);\n                              toggleDeleteDialog();\n                            },\n                          },\n                        ],\n                      }}\n                    />\n                  </Tr>\n                  <Tr\n                    key={`child-${scope.id}`}\n                    isExpanded={isExpanded(scope.id)}\n                  >\n                    <Td />\n                    <Td colSpan={4}>\n                      <ExpandableRowContent>\n                        {isExpanded(scope.id) && scope.isLoaded ? (\n                          <DescriptionList\n                            isHorizontal\n                            className=\"keycloak_resource_details\"\n                          >\n                            <DetailDescriptionLink\n                              name=\"resources\"\n                              array={scope.resources}\n                              convert={(r) => r.name!}\n                              link={(r) =>\n                                toResourceDetails({\n                                  id: clientId,\n                                  realm,\n                                  resourceId: r._id!,\n                                })\n                              }\n                            />\n                            <DetailDescriptionLink\n                              name=\"associatedPermissions\"\n                              array={scope.permissions}\n                              convert={(p) => p.name!}\n                              link={(p) =>\n                                toPermissionDetails({\n                                  id: clientId,\n                                  realm,\n                                  permissionId: p.id!,\n                                  permissionType: p.type!,\n                                })\n                              }\n                            />\n                          </DescriptionList>\n                        ) : (\n                          <KeycloakSpinner />\n                        )}\n                      </ExpandableRowContent>\n                    </Td>\n                  </Tr>\n                </Tbody>\n              ))}\n            </TableComposable>\n          )}\n        </PaginatingTableToolbar>\n      )}\n      {noData && !searching && (\n        <ListEmptyState\n          message={t(\"emptyAuthorizationScopes\")}\n          instructions={t(\"emptyAuthorizationInstructions\")}\n          onPrimaryAction={() => navigate(toNewScope({ id: clientId, realm }))}\n          primaryActionText={t(\"createAuthorizationScope\")}\n        />\n      )}\n      {noData && searching && (\n        <ListEmptyState\n          isSearchVariant\n          message={t(\"noSearchResults\")}\n          instructions={t(\"noSearchResultsInstructions\")}\n        />\n      )}\n    </PageSection>\n  );\n};\n","import { Fragment, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Alert,\n  Button,\n  ButtonVariant,\n  Divider,\n  Form,\n  FormGroup,\n  Modal,\n  Radio,\n  Switch,\n} from \"@patternfly/react-core\";\n\nimport type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { JsonFileUpload } from \"../../components/json-file-upload/JsonFileUpload\";\nimport { HelpItem } from \"ui-shared\";\n\ntype ImportDialogProps = {\n  onConfirm: (value: ResourceServerRepresentation) => void;\n  closeDialog: () => void;\n};\n\nexport const ImportDialog = ({ onConfirm, closeDialog }: ImportDialogProps) => {\n  const { t } = useTranslation();\n  const [imported, setImported] = useState<ResourceServerRepresentation>({});\n  return (\n    <Modal\n      title={t(\"import\")}\n      isOpen\n      variant=\"small\"\n      onClose={closeDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          onClick={() => {\n            onConfirm(imported);\n            closeDialog();\n          }}\n          data-testid=\"confirm\"\n        >\n          {t(\"confirm\")}\n        </Button>,\n        <Button\n          data-testid=\"cancel\"\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            closeDialog();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form>\n        <JsonFileUpload id=\"import-resource\" onChange={setImported} />\n      </Form>\n      {Object.keys(imported).length !== 0 && (\n        <>\n          <Divider />\n          <p className=\"pf-u-my-lg\">{t(\"importResources\")}</p>\n          <Form isHorizontal>\n            <FormGroup\n              label={t(\"policyEnforcementMode\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"policyEnforcementModeHelp\")}\n                  fieldLabelId=\"policyEnforcementMode\"\n                />\n              }\n              fieldId=\"policyEnforcementMode\"\n              hasNoPaddingTop\n            >\n              <Radio\n                id=\"policyEnforcementMode\"\n                name=\"policyEnforcementMode\"\n                label={t(\n                  `policyEnforcementModes.${imported.policyEnforcementMode}`,\n                )}\n                isChecked\n                isDisabled\n                className=\"pf-u-mb-md\"\n              />\n            </FormGroup>\n            <FormGroup\n              label={t(\"decisionStrategy\")}\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"decisionStrategyHelp\")}\n                  fieldLabelId=\"decisionStrategy\"\n                />\n              }\n              fieldId=\"decisionStrategy\"\n              hasNoPaddingTop\n            >\n              <Radio\n                id=\"decisionStrategy\"\n                name=\"decisionStrategy\"\n                isChecked\n                isDisabled\n                label={t(`decisionStrategies.${imported.decisionStrategy}`)}\n                className=\"pf-u-mb-md\"\n              />\n            </FormGroup>\n            <FormGroup\n              hasNoPaddingTop\n              label={t(\"allowRemoteResourceManagement\")}\n              fieldId=\"allowRemoteResourceManagement\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"allowRemoteResourceManagement\")}\n                  fieldLabelId=\"allowRemoteResourceManagement\"\n                />\n              }\n            >\n              <Switch\n                id=\"allowRemoteResourceManagement\"\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                isChecked={imported.allowRemoteResourceManagement}\n                isDisabled\n                aria-label={t(\"allowRemoteResourceManagement\")}\n              />\n            </FormGroup>\n          </Form>\n          <div className=\"pf-u-mt-md\">\n            {Object.entries(imported)\n              .filter(([, value]) => Array.isArray(value))\n              .map(([key, value]) => (\n                <Fragment key={key}>\n                  <Divider />\n                  <p className=\"pf-u-my-sm\">\n                    <strong>\n                      {value.length} {t(key)}\n                    </strong>\n                  </p>\n                </Fragment>\n              ))}\n          </div>\n          <Divider />\n          <Alert\n            variant=\"warning\"\n            className=\"pf-u-mt-lg\"\n            isInline\n            title={t(\"importWarning\")}\n          />\n        </>\n      )}\n    </Modal>\n  );\n};\n","import {\n  AlertVariant,\n  Button,\n  Divider,\n  FormGroup,\n  PageSection,\n  Radio,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport type ResourceServerRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/resourceServerRepresentation\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FixedButtonsGroup } from \"../../components/form/FixedButtonGroup\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport useToggle from \"../../utils/useToggle\";\nimport { DecisionStrategySelect } from \"./DecisionStrategySelect\";\nimport { ImportDialog } from \"./ImportDialog\";\nimport { useFetch } from \"../../utils/useFetch\";\n\nconst POLICY_ENFORCEMENT_MODES = [\n  \"ENFORCING\",\n  \"PERMISSIVE\",\n  \"DISABLED\",\n] as const;\n\nexport type FormFields = Omit<\n  ResourceServerRepresentation,\n  \"scopes\" | \"resources\"\n>;\n\nexport const AuthorizationSettings = ({ clientId }: { clientId: string }) => {\n  const { t } = useTranslation();\n  const [resource, setResource] = useState<ResourceServerRepresentation>();\n  const [importDialog, toggleImportDialog] = useToggle();\n\n  const form = useForm<FormFields>({});\n  const { control, reset, handleSubmit } = form;\n\n  const { addAlert, addError } = useAlerts();\n\n  useFetch(\n    () => adminClient.clients.getResourceServer({ id: clientId }),\n    (resource) => {\n      setResource(resource);\n      reset(resource);\n    },\n    [],\n  );\n\n  const importResource = async (value: ResourceServerRepresentation) => {\n    try {\n      await adminClient.clients.importResource({ id: clientId }, value);\n      addAlert(t(\"importResourceSuccess\"), AlertVariant.success);\n      reset({ ...value });\n    } catch (error) {\n      addError(\"importResourceError\", error);\n    }\n  };\n\n  const onSubmit = async (resource: ResourceServerRepresentation) => {\n    try {\n      await adminClient.clients.updateResourceServer(\n        { id: clientId },\n        resource,\n      );\n      addAlert(t(\"updateResourceSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"resourceSaveError\", error);\n    }\n  };\n\n  if (!resource) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <PageSection variant=\"light\">\n      {importDialog && (\n        <ImportDialog\n          onConfirm={importResource}\n          closeDialog={toggleImportDialog}\n        />\n      )}\n      <FormAccess\n        role=\"view-clients\"\n        isHorizontal\n        onSubmit={handleSubmit(onSubmit)}\n      >\n        <FormGroup\n          label={t(\"import\")}\n          fieldId=\"import\"\n          labelIcon={\n            <HelpItem helpText={t(\"importHelp\")} fieldLabelId=\"import\" />\n          }\n        >\n          <Button variant=\"secondary\" onClick={toggleImportDialog}>\n            {t(\"import\")}\n          </Button>\n        </FormGroup>\n        <Divider />\n        <FormGroup\n          label={t(\"policyEnforcementMode\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"policyEnforcementModeHelp\")}\n              fieldLabelId=\"policyEnforcementMode\"\n            />\n          }\n          fieldId=\"policyEnforcementMode\"\n          hasNoPaddingTop\n        >\n          <Controller\n            name=\"policyEnforcementMode\"\n            data-testid=\"policyEnforcementMode\"\n            defaultValue={POLICY_ENFORCEMENT_MODES[0]}\n            control={control}\n            render={({ field }) => (\n              <>\n                {POLICY_ENFORCEMENT_MODES.map((mode) => (\n                  <Radio\n                    id={mode}\n                    key={mode}\n                    data-testid={mode}\n                    isChecked={field.value === mode}\n                    name=\"policyEnforcementMode\"\n                    onChange={() => field.onChange(mode)}\n                    label={t(`policyEnforcementModes.${mode}`)}\n                    className=\"pf-u-mb-md\"\n                  />\n                ))}\n              </>\n            )}\n          />\n        </FormGroup>\n        <FormProvider {...form}>\n          <DecisionStrategySelect isLimited />\n        </FormProvider>\n        <FormGroup\n          hasNoPaddingTop\n          label={t(\"allowRemoteResourceManagement\")}\n          fieldId=\"allowRemoteResourceManagement\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"allowRemoteResourceManagementHelp\")}\n              fieldLabelId=\"allowRemoteResourceManagement\"\n            />\n          }\n        >\n          <Controller\n            name=\"allowRemoteResourceManagement\"\n            data-testid=\"allowRemoteResourceManagement\"\n            defaultValue={false}\n            control={control}\n            render={({ field }) => (\n              <Switch\n                id=\"allowRemoteResourceManagement\"\n                label={t(\"on\")}\n                labelOff={t(\"off\")}\n                isChecked={field.value}\n                onChange={field.onChange}\n                aria-label={t(\"allowRemoteResourceManagement\")}\n              />\n            )}\n          />\n        </FormGroup>\n        <FixedButtonsGroup\n          name=\"authenticationSettings\"\n          reset={() => reset(resource)}\n          isActive\n          isSubmit\n        />\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import { useState, useEffect } from \"react\";\n\n/** A 'plain' object version of the permission status. */\nexport type PlainPermissionStatus = {\n  readonly name: string;\n  readonly state: PermissionState;\n};\n\nexport default function useQueryPermission(\n  name: PermissionName,\n): PlainPermissionStatus | null {\n  const [status, setStatus] = useState<PermissionStatus | null>(null);\n  const [plainStatus, setPlainStatus] = useState<PlainPermissionStatus | null>(\n    null,\n  );\n\n  function updatePlainStatus(newStatus: PermissionStatus) {\n    setPlainStatus({\n      name: newStatus.name,\n      state: newStatus.state,\n    });\n  }\n\n  // Query the permission status when the name changes.\n  useEffect(() => {\n    setStatus(null);\n    setPlainStatus(null);\n\n    navigator.permissions.query({ name }).then((newStatus) => {\n      setStatus(newStatus);\n      updatePlainStatus(newStatus);\n    });\n  }, [name]);\n\n  // Update the 'plain' status when the permission status changes.\n  useEffect(() => {\n    if (!status) {\n      return;\n    }\n\n    function onStatusChange() {\n      if (!status) {\n        return;\n      }\n\n      updatePlainStatus(status);\n    }\n\n    status.addEventListener(\"change\", onStatusChange);\n    return () => status.removeEventListener(\"change\", onStatusChange);\n  }, [status]);\n\n  return plainStatus;\n}\n","import { useEffect, useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  ClipboardCopyButton,\n  ClipboardCopyButtonProps,\n} from \"@patternfly/react-core\";\n\nimport useSetTimeout from \"../../utils/useSetTimeout\";\nimport useQueryPermission from \"../../utils/useQueryPermission\";\n\nenum CopyState {\n  Ready,\n  Copied,\n  Error,\n}\n\ntype CopyToClipboardButtonProps = Pick<ClipboardCopyButtonProps, \"variant\"> & {\n  id: string;\n  label: string;\n  text: string;\n};\n\nexport const CopyToClipboardButton = ({\n  id,\n  label,\n  text,\n  variant = \"plain\",\n}: CopyToClipboardButtonProps) => {\n  const { t } = useTranslation();\n  const setTimeout = useSetTimeout();\n  const permission = useQueryPermission(\"clipboard-write\" as PermissionName);\n  const permissionDenied = permission?.state === \"denied\";\n  const [copyState, setCopyState] = useState(CopyState.Ready);\n\n  // Determine the message to use for the copy button.\n  const copyMessageKey = useMemo(() => {\n    if (permissionDenied) {\n      return \"clipboardCopyDenied\";\n    }\n\n    switch (copyState) {\n      case CopyState.Ready:\n        return \"copyToClipboard\";\n      case CopyState.Copied:\n        return \"copySuccess\";\n      case CopyState.Error:\n        return \"clipboardCopyError\";\n    }\n  }, [permissionDenied, copyState]);\n\n  // Reset the message of the copy button after copying to the clipboard.\n  useEffect(() => {\n    if (copyState !== CopyState.Ready) {\n      return setTimeout(() => setCopyState(CopyState.Ready), 1000);\n    }\n  }, [copyState, setTimeout]);\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopyState(CopyState.Copied);\n    } catch (error) {\n      setCopyState(CopyState.Error);\n    }\n  };\n\n  return (\n    <ClipboardCopyButton\n      id={`copy-button-${id}`}\n      textId={label}\n      aria-label={t(\"copyToClipboard\")}\n      onClick={() => copyToClipboard(text)}\n      exitDelay={600}\n      variant={variant}\n    >\n      {t(copyMessageKey)}\n    </ClipboardCopyButton>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport {\n  Alert,\n  Button,\n  FormGroup,\n  InputGroup,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { PasswordInput } from \"../../components/password-input/PasswordInput\";\nimport { useAccess } from \"../../context/access/Access\";\nimport useFormatDate from \"../../utils/useFormatDate\";\nimport { CopyToClipboardButton } from \"../scopes/CopyToClipboardButton\";\n\nexport type ClientSecretProps = {\n  client: ClientRepresentation;\n  secret: string;\n  toggle: () => void;\n};\n\ntype SecretInputProps = ClientSecretProps & {\n  id: string;\n  buttonLabel: string;\n};\n\nconst SecretInput = ({\n  id,\n  buttonLabel,\n  client,\n  secret,\n  toggle,\n}: SecretInputProps) => {\n  const { t } = useTranslation();\n  const form = useFormContext<ClientRepresentation>();\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || client.access?.configure;\n\n  return (\n    <Split hasGutter>\n      <SplitItem isFilled>\n        <InputGroup>\n          <PasswordInput id={id} value={secret} isReadOnly />\n          <CopyToClipboardButton\n            id={id}\n            text={secret}\n            label=\"clientSecret\"\n            variant=\"control\"\n          />\n        </InputGroup>\n      </SplitItem>\n      <SplitItem>\n        <Button\n          variant=\"secondary\"\n          isDisabled={form.formState.isDirty || !isManager}\n          onClick={toggle}\n        >\n          {t(buttonLabel)}\n        </Button>\n      </SplitItem>\n    </Split>\n  );\n};\n\nconst ExpireDateFormatter = ({ time }: { time: number }) => {\n  const { t } = useTranslation();\n  const formatDate = useFormatDate();\n  const unixTimeToString = (time: number) =>\n    time\n      ? t(\"secretExpiresOn\", {\n          time: formatDate(new Date(time * 1000), {\n            dateStyle: \"full\",\n            timeStyle: \"long\",\n          }),\n        })\n      : undefined;\n\n  return <div className=\"pf-u-my-md\">{unixTimeToString(time)}</div>;\n};\n\nexport const ClientSecret = ({ client, secret, toggle }: ClientSecretProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const [secretRotated, setSecretRotated] = useState<string | undefined>(\n    client.attributes?.[\"client.secret.rotated\"],\n  );\n  const secretExpirationTime: number =\n    client.attributes?.[\"client.secret.expiration.time\"];\n  const secretRotatedExpirationTime: number =\n    client.attributes?.[\"client.secret.rotated.expiration.time\"];\n\n  const expired = (time: number) => new Date().getTime() >= time * 1000;\n\n  const [toggleInvalidateConfirm, InvalidateConfirm] = useConfirmDialog({\n    titleKey: \"invalidateRotatedSecret\",\n    messageKey: \"invalidateRotatedSecretExplain\",\n    continueButtonLabel: \"confirm\",\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.invalidateSecret({\n          id: client.id!,\n        });\n        setSecretRotated(undefined);\n        addAlert(t(\"invalidateRotatedSuccess\"));\n      } catch (error) {\n        addError(\"invalidateRotatedError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      <InvalidateConfirm />\n      <FormGroup\n        label={t(\"clientSecret\")}\n        fieldId=\"kc-client-secret\"\n        className=\"pf-u-my-md\"\n      >\n        <SecretInput\n          id=\"kc-client-secret\"\n          client={client}\n          secret={secret}\n          toggle={toggle}\n          buttonLabel=\"regenerate\"\n        />\n        <ExpireDateFormatter time={secretExpirationTime} />\n        {expired(secretExpirationTime) && (\n          <Alert variant=\"warning\" isInline title={t(\"secretHasExpired\")} />\n        )}\n      </FormGroup>\n      {secretRotated && (\n        <FormGroup label={t(\"secretRotated\")} fieldId=\"secretRotated\">\n          <SecretInput\n            id=\"secretRotated\"\n            client={client}\n            secret={secretRotated}\n            toggle={toggleInvalidateConfirm}\n            buttonLabel=\"invalidateSecret\"\n          />\n          <ExpireDateFormatter time={secretRotatedExpirationTime} />\n        </FormGroup>\n      )}\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\n\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { HelpItem } from \"ui-shared\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\ntype SignedJWTProps = {\n  clientAuthenticatorType: string;\n};\n\nexport const SignedJWT = ({ clientAuthenticatorType }: SignedJWTProps) => {\n  const { control } = useFormContext();\n  const { cryptoInfo } = useServerInfo();\n  const providers =\n    clientAuthenticatorType === \"client-jwt\"\n      ? cryptoInfo?.clientSignatureAsymmetricAlgorithms ?? []\n      : cryptoInfo?.clientSignatureSymmetricAlgorithms ?? [];\n\n  const { t } = useTranslation();\n\n  const [open, isOpen] = useState(false);\n  return (\n    <FormGroup\n      label={t(\"signatureAlgorithm\")}\n      fieldId=\"kc-signature-algorithm\"\n      labelIcon={\n        <HelpItem\n          helpText={t(\"signatureAlgorithmHelp\")}\n          fieldLabelId=\"signatureAlgorithm\"\n        />\n      }\n    >\n      <Controller\n        name={convertAttributeNameToForm<FormFields>(\n          \"attributes.token.endpoint.auth.signing.alg\",\n        )}\n        defaultValue=\"\"\n        control={control}\n        render={({ field }) => (\n          <Select\n            maxHeight={200}\n            toggleId=\"kc-signature-algorithm\"\n            onToggle={isOpen}\n            onSelect={(_, value) => {\n              field.onChange(value.toString());\n              isOpen(false);\n            }}\n            selections={field.value || t(\"anyAlgorithm\")}\n            variant={SelectVariant.single}\n            aria-label={t(\"signatureAlgorithm\")}\n            isOpen={open}\n          >\n            <SelectOption selected={field.value === \"\"} key=\"any\" value=\"\">\n              {t(\"anyAlgorithm\")}\n            </SelectOption>\n            <>\n              {providers.map((option) => (\n                <SelectOption\n                  selected={option === field.value}\n                  key={option}\n                  value={option}\n                />\n              ))}\n            </>\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { FormGroup, Switch, ValidatedOptions } from \"@patternfly/react-core\";\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { beerify, convertAttributeNameToForm } from \"../../util\";\nimport { FormFields } from \"../ClientDetails\";\n\nexport const X509 = () => {\n  const { t } = useTranslation();\n  const {\n    register,\n    control,\n    formState: { errors },\n  } = useFormContext<FormFields>();\n  return (\n    <>\n      <FormGroup\n        label={t(\"allowRegexComparison\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"allowRegexComparisonHelp\")}\n            fieldLabelId=\"allowRegexComparison\"\n          />\n        }\n        fieldId=\"allowRegexComparison\"\n        hasNoPaddingTop\n      >\n        <Controller\n          name={convertAttributeNameToForm<FormFields>(\n            \"attributes.x509.allow.regex.pattern.comparison\",\n          )}\n          defaultValue=\"false\"\n          control={control}\n          render={({ field }) => (\n            <Switch\n              id=\"allowRegexComparison\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n              aria-label={t(\"allowRegexComparison\")}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"subject\")}\n        fieldId=\"kc-subject\"\n        labelIcon={\n          <HelpItem helpText={t(\"subjectHelp\")} fieldLabelId=\"subject\" />\n        }\n        helperTextInvalid={t(\"required\")}\n        validated={\n          errors.attributes?.[beerify(\"x509.subjectdn\")]\n            ? ValidatedOptions.error\n            : ValidatedOptions.default\n        }\n        isRequired\n      >\n        <KeycloakTextInput\n          type=\"text\"\n          id=\"kc-subject\"\n          validated={\n            errors.attributes?.[beerify(\"x509.subjectdn\")]\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n          {...register(\n            convertAttributeNameToForm(\"attributes.x509.subjectdn\"),\n            { required: true },\n          )}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import type { AuthenticationProviderRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigRepresentation\";\nimport type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type CredentialRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/credentialRepresentation\";\nimport {\n  ActionGroup,\n  Alert,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  ClipboardCopy,\n  Divider,\n  FormGroup,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { FormFields } from \"../ClientDetails\";\nimport { ClientSecret } from \"./ClientSecret\";\nimport { SignedJWT } from \"./SignedJWT\";\nimport { X509 } from \"./X509\";\n\ntype AccessToken = {\n  registrationAccessToken: string;\n};\n\nexport type CredentialsProps = {\n  client: ClientRepresentation;\n  save: () => void;\n  refresh: () => void;\n};\n\nexport const Credentials = ({ client, save, refresh }: CredentialsProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const clientId = client.id!;\n\n  const [providers, setProviders] = useState<\n    AuthenticationProviderRepresentation[]\n  >([]);\n\n  const {\n    control,\n    formState: { isDirty },\n    handleSubmit,\n  } = useFormContext<FormFields>();\n\n  const clientAuthenticatorType = useWatch({\n    control: control,\n    name: \"clientAuthenticatorType\",\n    defaultValue: \"\",\n  });\n\n  const [secret, setSecret] = useState(\"\");\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [open, isOpen] = useState(false);\n\n  useFetch(\n    () =>\n      Promise.all([\n        adminClient.authenticationManagement.getClientAuthenticatorProviders(),\n        adminClient.clients.getClientSecret({\n          id: clientId,\n        }),\n      ]),\n    ([providers, secret]) => {\n      setProviders(providers);\n      setSecret(secret.value!);\n    },\n    [],\n  );\n\n  async function regenerate<T>(\n    call: (clientId: string) => Promise<T>,\n    message: string,\n  ): Promise<T | undefined> {\n    try {\n      const data = await call(clientId);\n      addAlert(t(`${message}Success`), AlertVariant.success);\n      return data;\n    } catch (error) {\n      addError(`${message}Error`, error);\n    }\n  }\n\n  const regenerateClientSecret = async () => {\n    const secret = await regenerate<CredentialRepresentation>(\n      (clientId) =>\n        adminClient.clients.generateNewClientSecret({ id: clientId }),\n      \"clientSecret\",\n    );\n    setSecret(secret?.value || \"\");\n    refresh();\n  };\n\n  const [toggleClientSecretConfirm, ClientSecretConfirm] = useConfirmDialog({\n    titleKey: \"confirmClientSecretTitle\",\n    messageKey: \"confirmClientSecretBody\",\n    continueButtonLabel: \"yes\",\n    cancelButtonLabel: \"no\",\n    onConfirm: regenerateClientSecret,\n  });\n\n  const regenerateAccessToken = async () => {\n    const accessToken = await regenerate<AccessToken>(\n      (clientId) =>\n        adminClient.clients.generateRegistrationAccessToken({ id: clientId }),\n      \"accessToken\",\n    );\n    setAccessToken(accessToken?.registrationAccessToken || \"\");\n  };\n\n  const [toggleAccessTokenConfirm, AccessTokenConfirm] = useConfirmDialog({\n    titleKey: \"confirmAccessTokenTitle\",\n    messageKey: \"confirmAccessTokenBody\",\n    continueButtonLabel: \"yes\",\n    cancelButtonLabel: \"no\",\n    onConfirm: regenerateAccessToken,\n  });\n\n  return (\n    <PageSection>\n      <FormAccess\n        onSubmit={handleSubmit(save)}\n        isHorizontal\n        className=\"pf-u-mt-md\"\n        role=\"manage-clients\"\n        fineGrainedAccess={client.access?.configure}\n      >\n        <ClientSecretConfirm />\n        <AccessTokenConfirm />\n        <Card isFlat>\n          <CardBody>\n            <FormGroup\n              label={t(\"clientAuthenticator\")}\n              fieldId=\"kc-client-authenticator-type\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"clientAuthenticatorTypeHelp\")}\n                  fieldLabelId=\"clientAuthenticator\"\n                />\n              }\n            >\n              <Controller\n                name=\"clientAuthenticatorType\"\n                control={control}\n                defaultValue=\"\"\n                render={({ field }) => (\n                  <Select\n                    toggleId=\"kc-client-authenticator-type\"\n                    required\n                    onToggle={isOpen}\n                    onSelect={(_, value) => {\n                      field.onChange(value as string);\n                      isOpen(false);\n                    }}\n                    selections={field.value}\n                    variant={SelectVariant.single}\n                    aria-label={t(\"clientAuthenticator\")}\n                    isOpen={open}\n                  >\n                    {providers.map((option) => (\n                      <SelectOption\n                        selected={option.id === field.value}\n                        key={option.id}\n                        value={option.id}\n                      >\n                        {option.displayName}\n                      </SelectOption>\n                    ))}\n                  </Select>\n                )}\n              />\n            </FormGroup>\n            {(clientAuthenticatorType === \"client-jwt\" ||\n              clientAuthenticatorType === \"client-secret-jwt\") && (\n              <SignedJWT clientAuthenticatorType={clientAuthenticatorType} />\n            )}\n            {clientAuthenticatorType === \"client-jwt\" && (\n              <FormGroup>\n                <Alert variant=\"info\" isInline title={t(\"signedJWTConfirm\")} />\n              </FormGroup>\n            )}\n            {clientAuthenticatorType === \"client-x509\" && <X509 />}\n            <ActionGroup>\n              <Button variant=\"primary\" type=\"submit\" isDisabled={!isDirty}>\n                {t(\"save\")}\n              </Button>\n            </ActionGroup>\n          </CardBody>\n          {(clientAuthenticatorType === \"client-secret\" ||\n            clientAuthenticatorType === \"client-secret-jwt\") && <Divider />}\n          {(clientAuthenticatorType === \"client-secret\" ||\n            clientAuthenticatorType === \"client-secret-jwt\") && (\n            <CardBody>\n              <ClientSecret\n                client={client}\n                secret={secret}\n                toggle={toggleClientSecretConfirm}\n              />\n            </CardBody>\n          )}\n        </Card>\n        <Card isFlat>\n          <CardBody>\n            <FormGroup\n              label={t(\"registrationAccessToken\")}\n              fieldId=\"kc-access-token\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"registrationAccessTokenHelp\")}\n                  fieldLabelId=\"registrationAccessToken\"\n                />\n              }\n            >\n              <Split hasGutter>\n                <SplitItem isFilled>\n                  <ClipboardCopy id=\"kc-access-token\" isReadOnly>\n                    {accessToken}\n                  </ClipboardCopy>\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={toggleAccessTokenConfirm}\n                  >\n                    {t(\"regenerate\")}\n                  </Button>\n                </SplitItem>\n              </Split>\n            </FormGroup>\n          </CardBody>\n        </Card>\n      </FormAccess>\n    </PageSection>\n  );\n};\n","import type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport { FormGroup } from \"@patternfly/react-core\";\nimport { useId } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\n\ntype CertificateProps = Omit<CertificateDisplayProps, \"id\"> & {\n  plain?: boolean;\n};\n\ntype CertificateDisplayProps = {\n  id: string;\n  keyInfo?: CertificateRepresentation;\n};\n\nconst CertificateDisplay = ({ id, keyInfo }: CertificateDisplayProps) => {\n  const { t } = useTranslation();\n  return (\n    <KeycloakTextArea\n      readOnly\n      rows={5}\n      id={id}\n      data-testid=\"certificate\"\n      value={keyInfo?.certificate}\n      aria-label={t(\"certificate\")}\n    />\n  );\n};\n\nexport const Certificate = ({ keyInfo, plain = false }: CertificateProps) => {\n  const { t } = useTranslation();\n  const id = useId();\n\n  return plain ? (\n    <CertificateDisplay id={id} keyInfo={keyInfo} />\n  ) : (\n    <FormGroup\n      label={t(\"certificate\")}\n      fieldId={id}\n      labelIcon={<HelpItem helpText={t(\"certificateHelp\")} fieldLabelId={id} />}\n    >\n      <CertificateDisplay id={id} keyInfo={keyInfo} />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { useFormContext } from \"react-hook-form\";\nimport { FormGroup } from \"@patternfly/react-core\";\n\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { HelpItem } from \"ui-shared\";\nimport { PasswordInput } from \"../../components/password-input/PasswordInput\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\nexport const StoreSettings = ({\n  hidePassword = false,\n  isSaml = false,\n}: {\n  hidePassword?: boolean;\n  isSaml?: boolean;\n}) => {\n  const { t } = useTranslation();\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<KeyStoreConfig>();\n\n  return (\n    <>\n      <FormGroup\n        label={t(\"keyAlias\")}\n        fieldId=\"keyAlias\"\n        isRequired\n        labelIcon={\n          <HelpItem helpText={t(\"keyAliasHelp\")} fieldLabelId=\"keyAlias\" />\n        }\n        helperTextInvalid={t(\"required\")}\n        validated={errors.keyAlias ? \"error\" : \"default\"}\n      >\n        <KeycloakTextInput\n          data-testid=\"keyAlias\"\n          id=\"keyAlias\"\n          validated={errors.keyAlias ? \"error\" : \"default\"}\n          {...register(\"keyAlias\", { required: true })}\n        />\n      </FormGroup>\n      {!hidePassword && (\n        <FormGroup\n          label={t(\"keyPassword\")}\n          fieldId=\"keyPassword\"\n          isRequired\n          labelIcon={\n            <HelpItem\n              helpText={t(\"keyPasswordHelp\")}\n              fieldLabelId=\"keyPassword\"\n            />\n          }\n          helperTextInvalid={t(\"required\")}\n          validated={errors.keyPassword ? \"error\" : \"default\"}\n        >\n          <PasswordInput\n            data-testid=\"keyPassword\"\n            id=\"keyPassword\"\n            validated={errors.keyPassword ? \"error\" : \"default\"}\n            {...register(\"keyPassword\", { required: true })}\n          />\n        </FormGroup>\n      )}\n      {isSaml && (\n        <FormGroup\n          label={t(\"realmCertificateAlias\")}\n          fieldId=\"realmCertificateAlias\"\n          labelIcon={\n            <HelpItem\n              helpText={t(\"realmCertificateAliasHelp\")}\n              fieldLabelId=\"realmCertificateAlias\"\n            />\n          }\n        >\n          <KeycloakTextInput\n            data-testid=\"realmCertificateAlias\"\n            id=\"realmCertificateAlias\"\n            {...register(\"realmAlias\")}\n          />\n        </FormGroup>\n      )}\n      <FormGroup\n        label={t(\"storePassword\")}\n        fieldId=\"storePassword\"\n        isRequired\n        labelIcon={\n          <HelpItem\n            helpText={t(\"storePasswordHelp\")}\n            fieldLabelId=\"storePassword\"\n          />\n        }\n        helperTextInvalid={t(\"required\")}\n        validated={errors.storePassword ? \"error\" : \"default\"}\n      >\n        <PasswordInput\n          data-testid=\"storePassword\"\n          id=\"storePassword\"\n          validated={errors.storePassword ? \"error\" : \"default\"}\n          {...register(\"storePassword\", { required: true })}\n        />\n      </FormGroup>\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Controller,\n  FormProvider,\n  useForm,\n  useFormContext,\n} from \"react-hook-form\";\nimport {\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\n\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { HelpItem } from \"ui-shared\";\nimport { StoreSettings } from \"./StoreSettings\";\nimport { FileUpload } from \"../../components/json-file-upload/patternfly/FileUpload\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\ntype GenerateKeyDialogProps = {\n  clientId: string;\n  toggleDialog: () => void;\n  save: (keyStoreConfig: KeyStoreConfig) => void;\n};\n\ntype KeyFormProps = {\n  useFile?: boolean;\n  isSaml?: boolean;\n  hasPem?: boolean;\n};\n\nconst CERT_PEM = \"Certificate PEM\" as const;\n\nconst extensions = new Map([\n  [\"PKCS12\", \"p12\"],\n  [\"JKS\", \"jks\"],\n  [\"BCFKS\", \"bcfks\"],\n]);\n\ntype FormFields = KeyStoreConfig & {\n  file: string | File;\n};\n\nexport const getFileExtension = (format: string) => extensions.get(format);\n\nexport const KeyForm = ({\n  isSaml = false,\n  hasPem = false,\n  useFile = false,\n}: KeyFormProps) => {\n  const { t } = useTranslation();\n\n  const [filename, setFilename] = useState<string>();\n  const [openArchiveFormat, setOpenArchiveFormat] = useState(false);\n\n  const { control, watch } = useFormContext<FormFields>();\n  const format = watch(\"format\");\n\n  const { cryptoInfo } = useServerInfo();\n  const supportedKeystoreTypes = [\n    ...(cryptoInfo?.supportedKeystoreTypes ?? []),\n    ...(hasPem ? [CERT_PEM] : []),\n  ];\n\n  return (\n    <Form className=\"pf-u-pt-lg\">\n      <FormGroup\n        label={t(\"archiveFormat\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"archiveFormatHelp\")}\n            fieldLabelId=\"archiveFormat\"\n          />\n        }\n        fieldId=\"archiveFormat\"\n      >\n        <Controller\n          name=\"format\"\n          defaultValue={supportedKeystoreTypes[0]}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"archiveFormat\"\n              onToggle={setOpenArchiveFormat}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setOpenArchiveFormat(false);\n              }}\n              selections={field.value}\n              variant={SelectVariant.single}\n              aria-label={t(\"archiveFormat\")}\n              isOpen={openArchiveFormat}\n              menuAppendTo=\"parent\"\n            >\n              {supportedKeystoreTypes.map((option) => (\n                <SelectOption\n                  selected={option === field.value}\n                  key={option}\n                  value={option}\n                />\n              ))}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      {useFile && (\n        <FormGroup\n          label={t(\"importFile\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"importFileHelp\")}\n              fieldLabelId=\"importFile\"\n            />\n          }\n          fieldId=\"importFile\"\n        >\n          <Controller\n            name=\"file\"\n            defaultValue=\"\"\n            control={control}\n            render={({ field }) => (\n              <FileUpload\n                id=\"importFile\"\n                value={field.value}\n                filename={filename}\n                browseButtonText={t(\"browse\")}\n                onChange={(value, filename) => {\n                  setFilename(filename);\n                  field.onChange(value);\n                }}\n              />\n            )}\n          />\n        </FormGroup>\n      )}\n      {format !== CERT_PEM && (\n        <StoreSettings hidePassword={useFile} isSaml={isSaml} />\n      )}\n    </Form>\n  );\n};\n\nexport const GenerateKeyDialog = ({\n  clientId,\n  save,\n  toggleDialog,\n}: GenerateKeyDialogProps) => {\n  const { t } = useTranslation();\n  const form = useForm<KeyStoreConfig>({\n    defaultValues: { keyAlias: clientId },\n    mode: \"onChange\",\n  });\n\n  const {\n    handleSubmit,\n    formState: { isValid },\n  } = form;\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"generateKeys\")}\n      isOpen\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          isDisabled={!isValid}\n          onClick={() => {\n            handleSubmit((config) => {\n              save(config);\n              toggleDialog();\n            })();\n          }}\n        >\n          {t(\"generate\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            toggleDialog();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text>{t(\"generateKeysDescription\")}</Text>\n      </TextContent>\n      <FormProvider {...form}>\n        <KeyForm />\n      </FormProvider>\n    </Modal>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport {\n  Button,\n  ButtonVariant,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { HelpItem } from \"ui-shared\";\nimport { StoreSettings } from \"./StoreSettings\";\nimport { FileUpload } from \"../../components/json-file-upload/patternfly/FileUpload\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\n\ntype ImportKeyDialogProps = {\n  toggleDialog: () => void;\n  save: (importFile: ImportFile) => void;\n};\n\nexport type ImportFile = {\n  keystoreFormat: string;\n  keyAlias: string;\n  storePassword: string;\n  file: { value?: string; filename: string };\n};\n\nexport const ImportKeyDialog = ({\n  save,\n  toggleDialog,\n}: ImportKeyDialogProps) => {\n  const { t } = useTranslation();\n  const form = useForm<ImportFile>();\n  const { control, handleSubmit } = form;\n\n  const [openArchiveFormat, setOpenArchiveFormat] = useState(false);\n\n  const baseFormats = useServerInfo().cryptoInfo?.supportedKeystoreTypes ?? [];\n\n  const formats = baseFormats.concat([\n    \"Certificate PEM\",\n    \"Public Key PEM\",\n    \"JSON Web Key Set\",\n  ]);\n\n  const format = useWatch({\n    control,\n    name: \"keystoreFormat\",\n    defaultValue: formats[0],\n  });\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      title={t(\"generateKeys\")}\n      isOpen\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          data-testid=\"confirm\"\n          key=\"confirm\"\n          onClick={() => {\n            handleSubmit((importFile) => {\n              save(importFile);\n              toggleDialog();\n            })();\n          }}\n        >\n          {t(\"import\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={() => {\n            toggleDialog();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <TextContent>\n        <Text>{t(\"generateKeysDescription\")}</Text>\n      </TextContent>\n      <Form className=\"pf-u-pt-lg\">\n        <FormGroup\n          label={t(\"archiveFormat\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"archiveFormatHelp\")}\n              fieldLabelId=\"archiveFormat\"\n            />\n          }\n          fieldId=\"archiveFormat\"\n        >\n          <Controller\n            name=\"keystoreFormat\"\n            control={control}\n            defaultValue={formats[0]}\n            render={({ field }) => (\n              <Select\n                toggleId=\"archiveFormat\"\n                onToggle={setOpenArchiveFormat}\n                onSelect={(_, value) => {\n                  field.onChange(value as string);\n                  setOpenArchiveFormat(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                aria-label={t(\"archiveFormat\")}\n                isOpen={openArchiveFormat}\n              >\n                {formats.map((option) => (\n                  <SelectOption\n                    selected={option === field.value}\n                    key={option}\n                    value={option}\n                  />\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n        {baseFormats.includes(format) && (\n          <FormProvider {...form}>\n            <StoreSettings hidePassword />\n          </FormProvider>\n        )}\n        <FormGroup label={t(\"importFile\")} fieldId=\"importFile\">\n          <Controller\n            name=\"file\"\n            control={control}\n            defaultValue={{ filename: \"\" }}\n            render={({ field }) => (\n              <FileUpload\n                id=\"importFile\"\n                value={field.value.value}\n                filename={field.value.filename}\n                onChange={(value, filename) =>\n                  field.onChange({ value, filename })\n                }\n              />\n            )}\n          />\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n};\n","import type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  FormGroup,\n  PageSection,\n  Switch,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport useToggle from \"../../utils/useToggle\";\nimport { FormFields } from \"../ClientDetails\";\nimport { Certificate } from \"./Certificate\";\nimport { GenerateKeyDialog, getFileExtension } from \"./GenerateKeyDialog\";\nimport { ImportFile, ImportKeyDialog } from \"./ImportKeyDialog\";\n\ntype KeysProps = {\n  save: () => void;\n  clientId: string;\n  hasConfigureAccess?: boolean;\n};\n\nconst attr = \"jwt.credential\";\n\nexport const Keys = ({ clientId, save, hasConfigureAccess }: KeysProps) => {\n  const { t } = useTranslation();\n  const {\n    control,\n    register,\n    getValues,\n    formState: { isDirty },\n  } = useFormContext<FormFields>();\n  const { addAlert, addError } = useAlerts();\n\n  const [keyInfo, setKeyInfo] = useState<CertificateRepresentation>();\n  const [openGenerateKeys, toggleOpenGenerateKeys, setOpenGenerateKeys] =\n    useToggle();\n  const [openImportKeys, toggleOpenImportKeys, setOpenImportKeys] = useToggle();\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n\n  const useJwksUrl = useWatch({\n    control,\n    name: convertAttributeNameToForm<FormFields>(\"attributes.use.jwks.url\"),\n    defaultValue: \"false\",\n  });\n\n  useFetch(\n    () => adminClient.clients.getKeyInfo({ id: clientId, attr }),\n    (info) => setKeyInfo(info),\n    [key],\n  );\n\n  const generate = async (config: KeyStoreConfig) => {\n    try {\n      const keyStore = await adminClient.clients.generateAndDownloadKey(\n        {\n          id: clientId,\n          attr,\n        },\n        config,\n      );\n      saveAs(\n        new Blob([keyStore], { type: \"application/octet-stream\" }),\n        `keystore.${getFileExtension(config.format ?? \"\")}`,\n      );\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addError(\"generateError\", error);\n    }\n  };\n\n  const importKey = async (importFile: ImportFile) => {\n    try {\n      const formData = new FormData();\n      const { file, ...rest } = importFile;\n\n      for (const [key, value] of Object.entries(rest)) {\n        formData.append(key, value);\n      }\n\n      formData.append(\"file\", file.value!);\n\n      await adminClient.clients.uploadCertificate(\n        { id: clientId, attr },\n        formData,\n      );\n      addAlert(t(\"importSuccess\"), AlertVariant.success);\n      refresh();\n    } catch (error) {\n      addError(\"importError\", error);\n    }\n  };\n\n  return (\n    <PageSection variant=\"light\" className=\"keycloak__form\">\n      {openGenerateKeys && (\n        <GenerateKeyDialog\n          clientId={getValues(\"clientId\")!}\n          toggleDialog={toggleOpenGenerateKeys}\n          save={generate}\n        />\n      )}\n      {openImportKeys && (\n        <ImportKeyDialog toggleDialog={toggleOpenImportKeys} save={importKey} />\n      )}\n      <Card isFlat>\n        <CardHeader>\n          <CardTitle>{t(\"jwksUrlConfig\")}</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <TextContent>\n            <Text>{t(\"keysIntro\")}</Text>\n          </TextContent>\n        </CardBody>\n        <CardBody>\n          <FormAccess\n            role=\"manage-clients\"\n            fineGrainedAccess={hasConfigureAccess}\n            isHorizontal\n          >\n            <FormGroup\n              hasNoPaddingTop\n              label={t(\"useJwksUrl\")}\n              fieldId=\"useJwksUrl\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"useJwksUrlHelp\")}\n                  fieldLabelId=\"useJwksUrl\"\n                />\n              }\n            >\n              <Controller\n                name={convertAttributeNameToForm(\"attributes.use.jwks.url\")}\n                control={control}\n                render={({ field }) => (\n                  <Switch\n                    data-testid=\"useJwksUrl\"\n                    id=\"useJwksUrl-switch\"\n                    label={t(\"on\")}\n                    labelOff={t(\"off\")}\n                    isChecked={field.value === \"true\"}\n                    onChange={(value) => field.onChange(`${value}`)}\n                    aria-label={t(\"useJwksUrl\")}\n                  />\n                )}\n              />\n            </FormGroup>\n            {useJwksUrl !== \"true\" &&\n              (keyInfo ? (\n                <Certificate plain keyInfo={keyInfo} />\n              ) : (\n                \"No client certificate configured\"\n              ))}\n            {useJwksUrl === \"true\" && (\n              <FormGroup\n                label={t(\"jwksUrl\")}\n                fieldId=\"jwksUrl\"\n                labelIcon={\n                  <HelpItem\n                    helpText={t(\"jwksUrlHelp\")}\n                    fieldLabelId=\"jwksUrl\"\n                  />\n                }\n              >\n                <KeycloakTextInput\n                  id=\"jwksUrl\"\n                  type=\"url\"\n                  {...register(\n                    convertAttributeNameToForm(\"attributes.jwks.url\"),\n                  )}\n                />\n              </FormGroup>\n            )}\n            <ActionGroup>\n              <Button\n                data-testid=\"saveKeys\"\n                onClick={save}\n                isDisabled={!isDirty}\n              >\n                {t(\"save\")}\n              </Button>\n              <Button\n                data-testid=\"generate\"\n                variant=\"secondary\"\n                onClick={() => setOpenGenerateKeys(true)}\n              >\n                {t(\"generateNewKeys\")}\n              </Button>\n              <Button\n                data-testid=\"import\"\n                variant=\"secondary\"\n                onClick={() => setOpenImportKeys(true)}\n                isDisabled={useJwksUrl === \"true\"}\n              >\n                {t(\"import\")}\n              </Button>\n            </ActionGroup>\n          </FormAccess>\n        </CardBody>\n      </Card>\n    </PageSection>\n  );\n};\n","import KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport { Button, Form, Modal } from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { KeyForm, getFileExtension } from \"./GenerateKeyDialog\";\nimport { KeyTypes } from \"./SamlKeys\";\n\ntype ExportSamlKeyDialogProps = {\n  clientId: string;\n  close: () => void;\n  keyType: KeyTypes;\n};\n\nexport const ExportSamlKeyDialog = ({\n  clientId,\n  close,\n  keyType,\n}: ExportSamlKeyDialogProps) => {\n  const { t } = useTranslation();\n  const { realm } = useRealm();\n\n  const { addAlert, addError } = useAlerts();\n\n  const form = useForm<KeyStoreConfig>({\n    defaultValues: { realmAlias: realm },\n  });\n\n  const download = async (config: KeyStoreConfig) => {\n    try {\n      const keyStore = await adminClient.clients.downloadKey(\n        {\n          id: clientId,\n          attr: keyType,\n        },\n        config,\n      );\n      saveAs(\n        new Blob([keyStore], { type: \"application/octet-stream\" }),\n        `keystore.${getFileExtension(config.format ?? \"\")}`,\n      );\n      addAlert(t(\"samlKeysExportSuccess\"));\n      close();\n    } catch (error) {\n      addError(\"samlKeysExportError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant=\"medium\"\n      title={t(\"exportSamlKeyTitle\")}\n      isOpen\n      onClose={close}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          data-testid=\"confirm\"\n          key=\"confirm\"\n          type=\"submit\"\n          form=\"export-saml-key-form\"\n        >\n          {t(\"export\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          data-testid=\"cancel\"\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={() => {\n            close();\n          }}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <Form\n        id=\"export-saml-key-form\"\n        className=\"pf-u-pt-lg\"\n        onSubmit={form.handleSubmit(download)}\n      >\n        <FormProvider {...form}>\n          <KeyForm isSaml />\n        </FormProvider>\n      </Form>\n    </Modal>\n  );\n};\n","import type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport type KeyStoreConfig from \"@keycloak/keycloak-admin-client/lib/defs/keystoreConfig\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  Radio,\n  Split,\n  SplitItem,\n  Text,\n  TextContent,\n  Title,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { Certificate } from \"./Certificate\";\nimport { KeyForm } from \"./GenerateKeyDialog\";\nimport type { KeyTypes } from \"./SamlKeys\";\n\ntype SamlKeysDialogProps = {\n  id: string;\n  attr: KeyTypes;\n  onClose: () => void;\n  onCancel: () => void;\n};\n\nexport type SamlKeysDialogForm = KeyStoreConfig & {\n  file: File;\n};\n\nexport const submitForm = async (\n  form: SamlKeysDialogForm,\n  id: string,\n  attr: KeyTypes,\n  callback: (error?: unknown) => void,\n) => {\n  try {\n    const formData = new FormData();\n    const { file, ...rest } = form;\n    Object.entries(rest).map(([key, value]) =>\n      formData.append(\n        key === \"format\" ? \"keystoreFormat\" : key,\n        value.toString(),\n      ),\n    );\n    formData.append(\"file\", file);\n\n    await adminClient.clients.uploadKey({ id, attr }, formData);\n    callback();\n  } catch (error) {\n    callback(error);\n  }\n};\n\nexport const SamlKeysDialog = ({\n  id,\n  attr,\n  onClose,\n  onCancel,\n}: SamlKeysDialogProps) => {\n  const { t } = useTranslation();\n  const [type, setType] = useState(false);\n  const [keys, setKeys] = useState<CertificateRepresentation>();\n  const form = useForm<SamlKeysDialogForm>({ mode: \"onChange\" });\n  const {\n    handleSubmit,\n    formState: { isValid },\n  } = form;\n\n  const { addAlert, addError } = useAlerts();\n\n  const submit = (form: SamlKeysDialogForm) => {\n    submitForm(form, id, attr, (error) => {\n      if (error) {\n        addError(\"importError\", error);\n      } else {\n        addAlert(t(\"importSuccess\"), AlertVariant.success);\n      }\n    });\n  };\n\n  const generate = async () => {\n    try {\n      const key = await adminClient.clients.generateKey({\n        id,\n        attr,\n      });\n      setKeys(key);\n      saveAs(\n        new Blob([key.privateKey!], {\n          type: \"application/octet-stream\",\n        }),\n        \"private.key\",\n      );\n\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"generateError\", error);\n    }\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.medium}\n      aria-labelledby={t(\"enableClientSignatureRequired\")}\n      header={\n        <TextContent>\n          <Title headingLevel=\"h1\">{t(\"enableClientSignatureRequired\")}</Title>\n          <Text>{t(\"enableClientSignatureRequiredExplain\")}</Text>\n        </TextContent>\n      }\n      isOpen={true}\n      onClose={onClose}\n      actions={[\n        <Button\n          id=\"modal-confirm\"\n          key=\"confirm\"\n          data-testid=\"confirm\"\n          variant=\"primary\"\n          isDisabled={!isValid && !keys}\n          onClick={() => {\n            if (type) {\n              handleSubmit(submit)();\n            }\n            onClose();\n          }}\n        >\n          {t(\"confirm\")}\n        </Button>,\n        <Button\n          id=\"modal-cancel\"\n          key=\"cancel\"\n          data-testid=\"cancel\"\n          variant={ButtonVariant.link}\n          onClick={onCancel}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      <FormProvider {...form}>\n        <Form isHorizontal>\n          <FormGroup\n            label={t(\"selectMethod\")}\n            fieldId=\"selectMethod\"\n            hasNoPaddingTop\n          >\n            <Flex>\n              <FlexItem>\n                <Radio\n                  isChecked={!type}\n                  name=\"selectMethodType\"\n                  onChange={() => setType(false)}\n                  label={t(\"selectMethodType.generate\")}\n                  id=\"selectMethodType-generate\"\n                />\n              </FlexItem>\n              <FlexItem>\n                <Radio\n                  isChecked={type}\n                  name=\"selectMethodType\"\n                  onChange={() => setType(true)}\n                  label={t(\"selectMethodType.import\")}\n                  id=\"selectMethodType-import\"\n                />\n              </FlexItem>\n            </Flex>\n          </FormGroup>\n          {!type && (\n            <FormGroup\n              label={t(\"certificate\")}\n              fieldId=\"certificate\"\n              labelIcon={\n                <HelpItem\n                  helpText={t(\"certificateHelp\")}\n                  fieldLabelId=\"certificate\"\n                />\n              }\n            >\n              <Split hasGutter>\n                <SplitItem isFilled>\n                  <Certificate plain keyInfo={keys} />\n                </SplitItem>\n                <SplitItem>\n                  <Button\n                    variant=\"secondary\"\n                    data-testid=\"generate\"\n                    onClick={generate}\n                  >\n                    {t(\"generate\")}\n                  </Button>\n                </SplitItem>\n              </Split>\n            </FormGroup>\n          )}\n        </Form>\n        {type && <KeyForm useFile />}\n      </FormProvider>\n    </Modal>\n  );\n};\n","import { AlertVariant } from \"@patternfly/react-core\";\nimport { FormProvider, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { ConfirmDialogModal } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { KeyForm } from \"./GenerateKeyDialog\";\nimport type { KeyTypes } from \"./SamlKeys\";\nimport { SamlKeysDialogForm, submitForm } from \"./SamlKeysDialog\";\n\ntype SamlImportKeyDialogProps = {\n  id: string;\n  attr: KeyTypes;\n  onClose: () => void;\n};\n\nexport const SamlImportKeyDialog = ({\n  id,\n  attr,\n  onClose,\n}: SamlImportKeyDialogProps) => {\n  const { t } = useTranslation();\n  const form = useFormContext<SamlKeysDialogForm>();\n  const { handleSubmit } = form;\n\n  const { addAlert, addError } = useAlerts();\n\n  const submit = (form: SamlKeysDialogForm) => {\n    submitForm(form, id, attr, (error) => {\n      if (error) {\n        addError(\"importError\", error);\n      } else {\n        addAlert(t(\"importSuccess\"), AlertVariant.success);\n      }\n    });\n  };\n\n  return (\n    <ConfirmDialogModal\n      open={true}\n      toggleDialog={onClose}\n      continueButtonLabel=\"import\"\n      titleKey=\"importKey\"\n      onConfirm={() => {\n        handleSubmit(submit)();\n        onClose();\n      }}\n    >\n      <FormProvider {...form}>\n        <KeyForm useFile hasPem />\n      </FormProvider>\n    </ConfirmDialogModal>\n  );\n};\n","import type CertificateRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/certificateRepresentation\";\nimport {\n  ActionGroup,\n  AlertVariant,\n  Button,\n  Card,\n  CardBody,\n  Form,\n  FormGroup,\n  PageSection,\n  Switch,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { saveAs } from \"file-saver\";\nimport { Fragment, useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { FormPanel, HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { convertAttributeNameToForm } from \"../../util\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport useToggle from \"../../utils/useToggle\";\nimport { FormFields } from \"../ClientDetails\";\nimport { Certificate } from \"./Certificate\";\nimport { ExportSamlKeyDialog } from \"./ExportSamlKeyDialog\";\nimport { SamlImportKeyDialog } from \"./SamlImportKeyDialog\";\nimport { SamlKeysDialog } from \"./SamlKeysDialog\";\n\ntype SamlKeysProps = {\n  clientId: string;\n  save: () => void;\n};\n\nconst KEYS = [\"saml.signing\", \"saml.encryption\"] as const;\nexport type KeyTypes = (typeof KEYS)[number];\n\nconst KEYS_MAPPING: { [key in KeyTypes]: { [index: string]: string } } = {\n  \"saml.signing\": {\n    name: convertAttributeNameToForm(\"attributes.saml.client.signature\"),\n    title: \"signingKeysConfig\",\n    key: \"clientSignature\",\n  },\n  \"saml.encryption\": {\n    name: convertAttributeNameToForm(\"attributes.saml.encrypt\"),\n    title: \"encryptionKeysConfig\",\n    key: \"encryptAssertions\",\n  },\n};\n\ntype KeySectionProps = {\n  clientId: string;\n  keyInfo?: CertificateRepresentation;\n  attr: KeyTypes;\n  onChanged: (key: KeyTypes) => void;\n  onGenerate: (key: KeyTypes, regenerate: boolean) => void;\n  onImport: (key: KeyTypes) => void;\n};\n\nconst KeySection = ({\n  clientId,\n  keyInfo,\n  attr,\n  onChanged,\n  onGenerate,\n  onImport,\n}: KeySectionProps) => {\n  const { t } = useTranslation();\n  const { control, watch } = useFormContext<FormFields>();\n  const title = KEYS_MAPPING[attr].title;\n  const key = KEYS_MAPPING[attr].key;\n  const name = KEYS_MAPPING[attr].name;\n\n  const [showImportDialog, toggleImportDialog] = useToggle();\n\n  const section = watch(name as keyof FormFields);\n  return (\n    <>\n      {showImportDialog && (\n        <ExportSamlKeyDialog\n          keyType={attr}\n          clientId={clientId}\n          close={toggleImportDialog}\n        />\n      )}\n      <FormPanel title={t(title)} className=\"kc-form-panel__panel\">\n        <TextContent className=\"pf-u-pb-lg\">\n          <Text>{t(`${title}Explain`)}</Text>\n        </TextContent>\n        <FormAccess role=\"manage-clients\" isHorizontal>\n          <FormGroup\n            labelIcon={\n              <HelpItem helpText={t(`${key}Help`)} fieldLabelId={key} />\n            }\n            label={t(key)}\n            fieldId={key}\n            hasNoPaddingTop\n          >\n            <Controller\n              name={name as keyof FormFields}\n              control={control}\n              defaultValue=\"false\"\n              render={({ field }) => (\n                <Switch\n                  data-testid={key}\n                  id={key}\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  isChecked={field.value === \"true\"}\n                  onChange={(value) => {\n                    const v = value.toString();\n                    if (v === \"true\") {\n                      onChanged(attr);\n                      field.onChange(v);\n                    } else {\n                      onGenerate(attr, false);\n                    }\n                  }}\n                  aria-label={t(key)}\n                />\n              )}\n            />\n          </FormGroup>\n        </FormAccess>\n      </FormPanel>\n      {keyInfo?.certificate && section === \"true\" && (\n        <Card isFlat>\n          <CardBody className=\"kc-form-panel__body\">\n            <Form isHorizontal>\n              <Certificate keyInfo={keyInfo} />\n              <ActionGroup>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => onGenerate(attr, true)}\n                >\n                  {t(\"regenerate\")}\n                </Button>\n                <Button variant=\"secondary\" onClick={() => onImport(attr)}>\n                  {t(\"importKey\")}\n                </Button>\n                <Button variant=\"tertiary\" onClick={toggleImportDialog}>\n                  {t(\"export\")}\n                </Button>\n              </ActionGroup>\n            </Form>\n          </CardBody>\n        </Card>\n      )}\n    </>\n  );\n};\n\nexport const SamlKeys = ({ clientId, save }: SamlKeysProps) => {\n  const { t } = useTranslation();\n  const [isChanged, setIsChanged] = useState<KeyTypes>();\n  const [keyInfo, setKeyInfo] = useState<CertificateRepresentation[]>();\n  const [selectedType, setSelectedType] = useState<KeyTypes>();\n  const [openImport, setImportOpen] = useState<KeyTypes>();\n  const [refresh, setRefresh] = useState(0);\n\n  const { setValue } = useFormContext();\n  const { addAlert, addError } = useAlerts();\n\n  useFetch(\n    () =>\n      Promise.all(\n        KEYS.map((attr) =>\n          adminClient.clients.getKeyInfo({ id: clientId, attr }),\n        ),\n      ),\n    (info) => setKeyInfo(info),\n    [refresh],\n  );\n\n  const generate = async (attr: KeyTypes) => {\n    const index = KEYS.indexOf(attr);\n    try {\n      const info = [...(keyInfo || [])];\n      info[index] = await adminClient.clients.generateKey({\n        id: clientId,\n        attr,\n      });\n\n      setKeyInfo(info);\n      saveAs(\n        new Blob([info[index].privateKey!], {\n          type: \"application/octet-stream\",\n        }),\n        \"private.key\",\n      );\n\n      addAlert(t(\"generateSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"generateError\", error);\n    }\n  };\n\n  const key = selectedType ? KEYS_MAPPING[selectedType].key : \"\";\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: t(\"disableSigning\", {\n      key: t(key),\n    }),\n    messageKey: t(\"disableSigningExplain\", {\n      key: t(key),\n    }),\n    continueButtonLabel: \"yes\",\n    cancelButtonLabel: \"no\",\n    onConfirm: () => {\n      setValue(KEYS_MAPPING[selectedType!].name, \"false\");\n      save();\n    },\n  });\n\n  const [toggleReGenerateDialog, ReGenerateConfirm] = useConfirmDialog({\n    titleKey: \"reGenerateSigning\",\n    messageKey: \"reGenerateSigningExplain\",\n    continueButtonLabel: \"yes\",\n    cancelButtonLabel: \"no\",\n    onConfirm: () => {\n      generate(selectedType!);\n    },\n  });\n\n  return (\n    <PageSection variant=\"light\" className=\"keycloak__form\">\n      {isChanged && (\n        <SamlKeysDialog\n          id={clientId}\n          attr={isChanged}\n          onClose={() => {\n            setIsChanged(undefined);\n            save();\n            setRefresh(refresh + 1);\n          }}\n          onCancel={() => {\n            setValue(KEYS_MAPPING[selectedType!].name, \"false\");\n            setIsChanged(undefined);\n          }}\n        />\n      )}\n      <DisableConfirm />\n      <ReGenerateConfirm />\n      {KEYS.map((attr, index) => (\n        <Fragment key={attr}>\n          {openImport === attr && (\n            <SamlImportKeyDialog\n              id={clientId}\n              attr={attr}\n              onClose={() => setImportOpen(undefined)}\n            />\n          )}\n          <KeySection\n            clientId={clientId}\n            keyInfo={keyInfo?.[index]}\n            attr={attr}\n            onChanged={setIsChanged}\n            onGenerate={(type, isNew) => {\n              setSelectedType(type);\n              if (!isNew) {\n                toggleDisableDialog();\n              } else {\n                toggleReGenerateDialog();\n              }\n            }}\n            onImport={() => setImportOpen(attr)}\n          />\n        </Fragment>\n      ))}\n    </PageSection>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport {\n  AlertVariant,\n  Button,\n  ButtonVariant,\n  Dropdown,\n  DropdownItem,\n  KebabToggle,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { ChangeTypeDropdown } from \"../../client-scopes/ChangeTypeDropdown\";\nimport {\n  SearchDropdown,\n  SearchToolbar,\n  SearchType,\n  nameFilter,\n  typeFilter,\n} from \"../../client-scopes/details/SearchFilter\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport {\n  AllClientScopeType,\n  AllClientScopes,\n  CellDropdown,\n  ClientScope,\n  addClientScope,\n  changeClientScope,\n  removeClientScope,\n} from \"../../components/client-scope/ClientScopeTypes\";\nimport { useConfirmDialog } from \"../../components/confirm-dialog/ConfirmDialog\";\nimport { ListEmptyState } from \"../../components/list-empty-state/ListEmptyState\";\nimport {\n  Action,\n  KeycloakDataTable,\n} from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport useLocaleSort, { mapByKey } from \"../../utils/useLocaleSort\";\nimport { toDedicatedScope } from \"../routes/DedicatedScopeDetails\";\nimport { AddScopeDialog } from \"./AddScopeDialog\";\n\nimport \"./client-scopes.css\";\n\nexport type ClientScopesProps = {\n  clientId: string;\n  protocol: string;\n  clientName: string;\n  fineGrainedAccess?: boolean;\n};\n\nexport type Row = ClientScopeRepresentation & {\n  type: AllClientScopeType;\n  description?: string;\n};\n\nconst DEDICATED_ROW = \"dedicated\";\n\ntype TypeSelectorProps = Row & {\n  clientId: string;\n  fineGrainedAccess?: boolean;\n  refresh: () => void;\n};\n\nconst TypeSelector = ({\n  clientId,\n  refresh,\n  fineGrainedAccess,\n  ...scope\n}: TypeSelectorProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n\n  const { hasAccess } = useAccess();\n\n  const isDedicatedRow = (value: Row) => value.id === DEDICATED_ROW;\n  const isManager = hasAccess(\"manage-clients\") || fineGrainedAccess;\n\n  return (\n    <CellDropdown\n      isDisabled={isDedicatedRow(scope) || !isManager}\n      clientScope={scope}\n      type={scope.type}\n      onSelect={async (value) => {\n        try {\n          await changeClientScope(\n            clientId,\n            scope,\n            scope.type,\n            value as ClientScope,\n          );\n          addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n          refresh();\n        } catch (error) {\n          addError(\"clientScopeError\", error);\n        }\n      }}\n    />\n  );\n};\n\nexport const ClientScopes = ({\n  clientId,\n  protocol,\n  clientName,\n  fineGrainedAccess,\n}: ClientScopesProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const localeSort = useLocaleSort();\n\n  const [searchType, setSearchType] = useState<SearchType>(\"name\");\n\n  const [searchTypeType, setSearchTypeType] = useState<AllClientScopes>(\n    AllClientScopes.none,\n  );\n\n  const [addDialogOpen, setAddDialogOpen] = useState(false);\n\n  const [rest, setRest] = useState<ClientScopeRepresentation[]>();\n  const [selectedRows, setSelectedRowState] = useState<Row[]>([]);\n  const setSelectedRows = (rows: Row[]) =>\n    setSelectedRowState(rows.filter(({ id }) => id !== DEDICATED_ROW));\n  const [kebabOpen, setKebabOpen] = useState(false);\n\n  const [key, setKey] = useState(0);\n  const refresh = () => setKey(key + 1);\n  const isDedicatedRow = (value: Row) => value.id === DEDICATED_ROW;\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || fineGrainedAccess;\n  const isViewer = hasAccess(\"view-clients\") || fineGrainedAccess;\n\n  const loader = async (first?: number, max?: number, search?: string) => {\n    const defaultClientScopes =\n      await adminClient.clients.listDefaultClientScopes({ id: clientId });\n    const optionalClientScopes =\n      await adminClient.clients.listOptionalClientScopes({ id: clientId });\n    const clientScopes = await adminClient.clientScopes.find();\n\n    const find = (id: string) =>\n      clientScopes.find((clientScope) => id === clientScope.id);\n\n    const optional = optionalClientScopes.map((c) => {\n      const scope = find(c.id!);\n      const row: Row = {\n        ...c,\n        type: ClientScope.optional,\n        description: scope?.description,\n      };\n      return row;\n    });\n\n    const defaultScopes = defaultClientScopes.map((c) => {\n      const scope = find(c.id!);\n      const row: Row = {\n        ...c,\n        type: ClientScope.default,\n        description: scope?.description,\n      };\n      return row;\n    });\n\n    const rows = [...optional, ...defaultScopes];\n    const names = rows.map((row) => row.name);\n    setRest(\n      clientScopes\n        .filter((scope) => !names.includes(scope.name))\n        .filter((scope) => scope.protocol === protocol),\n    );\n\n    const filter =\n      searchType === \"name\" ? nameFilter(search) : typeFilter(searchTypeType);\n    const firstNum = Number(first);\n    const page = localeSort(rows.filter(filter), mapByKey(\"name\"));\n\n    if (isViewer) {\n      page.unshift({\n        id: DEDICATED_ROW,\n        name: t(\"dedicatedScopeName\", { clientName }),\n        type: AllClientScopes.none,\n        description: t(\"dedicatedScopeDescription\"),\n      });\n    }\n\n    return page.slice(firstNum, firstNum + Number(max));\n  };\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteClientScope\", {\n      count: selectedRows.length,\n      name: selectedRows[0]?.name,\n    }),\n    messageKey: \"deleteConfirmClientScopes\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await removeClientScope(\n          clientId,\n          selectedRows[0],\n          selectedRows[0].type as ClientScope,\n        );\n        addAlert(t(\"clientScopeRemoveSuccess\"), AlertVariant.success);\n        refresh();\n      } catch (error) {\n        addError(\"clientScopeRemoveError\", error);\n      }\n    },\n  });\n\n  return (\n    <>\n      {rest && (\n        <AddScopeDialog\n          clientScopes={rest}\n          clientName={clientName!}\n          open={addDialogOpen}\n          toggleDialog={() => setAddDialogOpen(!addDialogOpen)}\n          onAdd={async (scopes) => {\n            try {\n              await Promise.all(\n                scopes.map(\n                  async (scope) =>\n                    await addClientScope(clientId, scope.scope, scope.type!),\n                ),\n              );\n              addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n              refresh();\n            } catch (error) {\n              addError(\"clientScopeError\", error);\n            }\n          }}\n        />\n      )}\n\n      <KeycloakDataTable\n        key={key}\n        loader={loader}\n        ariaLabelKey={`clientScopeList-${key}`}\n        searchPlaceholderKey={\n          searchType === \"name\" ? \"searchByName\" : undefined\n        }\n        canSelectAll\n        isPaginated\n        isSearching={searchType === \"type\"}\n        onSelect={(rows) => setSelectedRows([...rows])}\n        searchTypeComponent={\n          <SearchDropdown\n            searchType={searchType}\n            onSelect={(searchType) => setSearchType(searchType)}\n          />\n        }\n        toolbarItem={\n          <>\n            <SearchToolbar\n              searchType={searchType}\n              type={searchTypeType}\n              onSelect={(searchType) => setSearchType(searchType)}\n              onType={(value) => {\n                setSearchTypeType(value);\n                refresh();\n              }}\n            />\n            {isManager && (\n              <>\n                <DeleteConfirm />\n                <ToolbarItem>\n                  <Button onClick={() => setAddDialogOpen(true)}>\n                    {t(\"addClientScope\")}\n                  </Button>\n                </ToolbarItem>\n                <ToolbarItem>\n                  <ChangeTypeDropdown\n                    clientId={clientId}\n                    selectedRows={selectedRows}\n                    refresh={refresh}\n                  />\n                </ToolbarItem>\n                <ToolbarItem>\n                  <Dropdown\n                    toggle={\n                      <KebabToggle onToggle={() => setKebabOpen(!kebabOpen)} />\n                    }\n                    isOpen={kebabOpen}\n                    isPlain\n                    dropdownItems={[\n                      <DropdownItem\n                        key=\"deleteAll\"\n                        isDisabled={selectedRows.length === 0}\n                        onClick={async () => {\n                          try {\n                            await Promise.all(\n                              selectedRows.map((row) =>\n                                removeClientScope(\n                                  clientId,\n                                  { ...row },\n                                  row.type as ClientScope,\n                                ),\n                              ),\n                            );\n\n                            setKebabOpen(false);\n                            setSelectedRows([]);\n                            addAlert(t(\"clientScopeRemoveSuccess\"));\n                            refresh();\n                          } catch (error) {\n                            addError(\"clientScopeRemoveError\", error);\n                          }\n                        }}\n                      >\n                        {t(\"remove\")}\n                      </DropdownItem>,\n                    ]}\n                  />\n                </ToolbarItem>\n              </>\n            )}\n          </>\n        }\n        columns={[\n          {\n            name: \"name\",\n            displayKey: \"assignedClientScope\",\n            cellRenderer: (row) => {\n              if (isDedicatedRow(row)) {\n                return (\n                  <Link to={toDedicatedScope({ realm, clientId })}>\n                    {row.name}\n                  </Link>\n                );\n              }\n              return row.name!;\n            },\n          },\n          {\n            name: \"type\",\n            displayKey: \"assignedType\",\n            cellRenderer: (row) => (\n              <TypeSelector clientId={clientId} refresh={refresh} {...row} />\n            ),\n          },\n          { name: \"description\" },\n        ]}\n        actions={\n          isManager\n            ? [\n                {\n                  title: t(\"remove\"),\n                  onRowClick: async (row) => {\n                    setSelectedRows([row]);\n                    toggleDeleteDialog();\n                    return true;\n                  },\n                } as Action<Row>,\n              ]\n            : []\n        }\n        emptyState={\n          <ListEmptyState\n            message={t(\"emptyClientScopes\")}\n            instructions={t(\"emptyClientScopesInstructions\")}\n            primaryActionText={t(\"emptyClientScopesPrimaryAction\")}\n            onPrimaryAction={() => setAddDialogOpen(true)}\n          />\n        }\n      />\n    </>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport {\n  CodeBlock,\n  CodeBlockAction,\n  EmptyState,\n  EmptyStateBody,\n  Title,\n} from \"@patternfly/react-core\";\n\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { CopyToClipboardButton } from \"./CopyToClipboardButton\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\n\ntype GeneratedCodeTabProps = {\n  user?: UserRepresentation;\n  text: string;\n  label: string;\n};\n\nexport const GeneratedCodeTab = ({\n  text,\n  user,\n  label,\n}: GeneratedCodeTabProps) => {\n  const { t } = useTranslation();\n\n  return user ? (\n    <CodeBlock\n      id={label}\n      actions={\n        <CodeBlockAction>\n          <CopyToClipboardButton id=\"code\" text={text} label={label} />\n        </CodeBlockAction>\n      }\n    >\n      <KeycloakTextArea id={`text-area-${label}`} rows={20} value={text} />\n    </CodeBlock>\n  ) : (\n    <EmptyState variant=\"large\" id={label}>\n      <Title headingLevel=\"h2\" size=\"lg\">\n        {t(`${label}No`)}\n      </Title>\n      <EmptyStateBody>{t(`${label}IsDisabled`)}</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport type ProtocolMapperRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/protocolMapperRepresentation\";\nimport type RoleRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type { ProtocolMapperTypeRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/serverInfoRepesentation\";\nimport {\n  ClipboardCopy,\n  Form,\n  FormGroup,\n  Grid,\n  GridItem,\n  PageSection,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Split,\n  SplitItem,\n  Tab,\n  TabContent,\n  Tabs,\n  TabTitleText,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\nimport { QuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem, useHelp } from \"ui-shared\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { KeycloakDataTable } from \"../../components/table-toolbar/KeycloakDataTable\";\nimport { UserSelect } from \"../../components/users/UserSelect\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useServerInfo } from \"../../context/server-info/ServerInfoProvider\";\nimport { prettyPrintJSON } from \"../../util\";\nimport { useFetch } from \"../../utils/useFetch\";\nimport { GeneratedCodeTab } from \"./GeneratedCodeTab\";\nimport { useAccess } from \"../../context/access/Access\";\n\nimport \"./evaluate.css\";\n\nexport type EvaluateScopesProps = {\n  clientId: string;\n  protocol: string;\n};\n\nconst ProtocolMappers = ({\n  protocolMappers,\n}: {\n  protocolMappers: ProtocolMapperRepresentation[];\n}) => {\n  const [key, setKey] = useState(0);\n  useEffect(() => {\n    setKey(key + 1);\n  }, [protocolMappers]);\n  return (\n    <KeycloakDataTable\n      key={key}\n      loader={() => Promise.resolve(protocolMappers)}\n      ariaLabelKey=\"effectiveProtocolMappers\"\n      searchPlaceholderKey=\"searchForProtocol\"\n      columns={[\n        {\n          name: \"mapperName\",\n          displayKey: \"name\",\n        },\n        {\n          name: \"containerName\",\n          displayKey: \"parentClientScope\",\n        },\n        {\n          name: \"type.category\",\n          displayKey: \"category\",\n        },\n        {\n          name: \"type.priority\",\n          displayKey: \"priority\",\n        },\n      ]}\n    />\n  );\n};\n\nconst EffectiveRoles = ({\n  effectiveRoles,\n}: {\n  effectiveRoles: RoleRepresentation[];\n}) => {\n  const [key, setKey] = useState(0);\n  useEffect(() => {\n    setKey(key + 1);\n  }, [effectiveRoles]);\n\n  return (\n    <KeycloakDataTable\n      key={key}\n      loader={() => Promise.resolve(effectiveRoles)}\n      ariaLabelKey=\"effectiveRoleScopeMappings\"\n      searchPlaceholderKey=\"searchForRole\"\n      columns={[\n        {\n          name: \"name\",\n          displayKey: \"role\",\n        },\n        {\n          name: \"containerId\",\n          displayKey: \"origin\",\n        },\n      ]}\n    />\n  );\n};\n\nexport const EvaluateScopes = ({ clientId, protocol }: EvaluateScopesProps) => {\n  const prefix = \"openid\";\n  const { t } = useTranslation();\n  const { enabled } = useHelp();\n  const { realm } = useRealm();\n  const mapperTypes = useServerInfo().protocolMapperTypes![protocol];\n\n  const [selectableScopes, setSelectableScopes] = useState<\n    ClientScopeRepresentation[]\n  >([]);\n  const [isScopeOpen, setIsScopeOpen] = useState(false);\n  const [selected, setSelected] = useState<string[]>([prefix]);\n  const [activeTab, setActiveTab] = useState(0);\n\n  const [key, setKey] = useState(\"\");\n  const refresh = () => setKey(`${new Date().getTime()}`);\n  const [effectiveRoles, setEffectiveRoles] = useState<RoleRepresentation[]>(\n    [],\n  );\n  const [protocolMappers, setProtocolMappers] = useState<\n    ProtocolMapperRepresentation[]\n  >([]);\n  const [accessToken, setAccessToken] = useState(\"\");\n  const [userInfo, setUserInfo] = useState(\"\");\n  const [idToken, setIdToken] = useState(\"\");\n\n  const tabContent1 = useRef(null);\n  const tabContent2 = useRef(null);\n  const tabContent3 = useRef(null);\n  const tabContent4 = useRef(null);\n  const tabContent5 = useRef(null);\n\n  const form = useForm();\n\n  const { hasAccess } = useAccess();\n  const hasViewUsers = hasAccess(\"view-users\");\n\n  useFetch(\n    () => adminClient.clients.listOptionalClientScopes({ id: clientId }),\n    (optionalClientScopes) => setSelectableScopes(optionalClientScopes),\n    [],\n  );\n\n  useFetch(\n    async () => {\n      const scope = selected.join(\" \");\n      const effectiveRoles = await adminClient.clients.evaluatePermission({\n        id: clientId,\n        roleContainer: realm,\n        scope,\n        type: \"granted\",\n      });\n\n      const mapperList = (await adminClient.clients.evaluateListProtocolMapper({\n        id: clientId,\n        scope,\n      })) as ({\n        type: ProtocolMapperTypeRepresentation;\n      } & ProtocolMapperRepresentation)[];\n\n      return {\n        mapperList,\n        effectiveRoles,\n      };\n    },\n    ({ mapperList, effectiveRoles }) => {\n      setEffectiveRoles(effectiveRoles);\n      mapperList.map((mapper) => {\n        mapper.type = mapperTypes.filter(\n          (type) => type.id === mapper.protocolMapper,\n        )[0];\n      });\n\n      setProtocolMappers(mapperList);\n      refresh();\n    },\n    [selected],\n  );\n\n  useFetch(\n    async () => {\n      const scope = selected.join(\" \");\n      const user = form.getValues(\"user\");\n      if (!user) return [];\n\n      return await Promise.all([\n        adminClient.clients.evaluateGenerateAccessToken({\n          id: clientId,\n          userId: user[0],\n          scope,\n        }),\n        adminClient.clients.evaluateGenerateUserInfo({\n          id: clientId,\n          userId: user[0],\n          scope,\n        }),\n        adminClient.clients.evaluateGenerateIdToken({\n          id: clientId,\n          userId: user[0],\n          scope,\n        }),\n      ]);\n    },\n    ([accessToken, userInfo, idToken]) => {\n      setAccessToken(prettyPrintJSON(accessToken));\n      setUserInfo(prettyPrintJSON(userInfo));\n      setIdToken(prettyPrintJSON(idToken));\n    },\n    [form.getValues(\"user\"), selected],\n  );\n\n  return (\n    <>\n      <PageSection variant=\"light\">\n        {enabled && (\n          <TextContent className=\"keycloak__section_intro__help\">\n            <Text>\n              <QuestionCircleIcon /> {t(\"evaluateExplain\")}\n            </Text>\n          </TextContent>\n        )}\n        <Form isHorizontal>\n          <FormGroup\n            label={t(\"scopeParameter\")}\n            fieldId=\"scopeParameter\"\n            labelIcon={\n              <HelpItem\n                helpText={t(\"scopeParameterHelp\")}\n                fieldLabelId=\"scopeParameter\"\n              />\n            }\n          >\n            <Split hasGutter>\n              <SplitItem isFilled>\n                <Select\n                  toggleId=\"scopeParameter\"\n                  variant={SelectVariant.typeaheadMulti}\n                  typeAheadAriaLabel={t(\"scopeParameter\")}\n                  onToggle={() => setIsScopeOpen(!isScopeOpen)}\n                  isOpen={isScopeOpen}\n                  selections={selected}\n                  onSelect={(_, value) => {\n                    const option = value as string;\n                    if (selected.includes(option)) {\n                      if (option !== prefix) {\n                        setSelected(selected.filter((item) => item !== option));\n                      }\n                    } else {\n                      setSelected([...selected, option]);\n                    }\n                  }}\n                  aria-labelledby={t(\"scopeParameter\")}\n                  placeholderText={t(\"scopeParameterPlaceholder\")}\n                >\n                  {selectableScopes.map((option, index) => (\n                    <SelectOption key={index} value={option.name} />\n                  ))}\n                </Select>\n              </SplitItem>\n              <SplitItem>\n                <ClipboardCopy className=\"keycloak__scopes_evaluate__clipboard-copy\">\n                  {selected.join(\" \")}\n                </ClipboardCopy>\n              </SplitItem>\n            </Split>\n          </FormGroup>\n          {hasViewUsers && (\n            <FormProvider {...form}>\n              <UserSelect\n                name=\"user\"\n                label=\"users\"\n                helpText={t(\"userHelp\")}\n                defaultValue=\"\"\n                variant={SelectVariant.typeahead}\n                isRequired\n              />\n            </FormProvider>\n          )}\n        </Form>\n      </PageSection>\n\n      <Grid hasGutter className=\"keycloak__scopes_evaluate__tabs\">\n        <GridItem span={8}>\n          <TabContent\n            aria-labelledby=\"pf-tab-0-effectiveProtocolMappers\"\n            eventKey={0}\n            id=\"effectiveProtocolMappers\"\n            ref={tabContent1}\n          >\n            <ProtocolMappers protocolMappers={protocolMappers} />\n          </TabContent>\n          <TabContent\n            aria-labelledby=\"pf-tab-0-effectiveRoleScopeMappings\"\n            eventKey={1}\n            id=\"effectiveRoleScopeMappings\"\n            ref={tabContent2}\n            hidden\n          >\n            <EffectiveRoles effectiveRoles={effectiveRoles} />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedAccessToken\")}\n            eventKey={2}\n            id=\"tab-generated-access-token\"\n            ref={tabContent3}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={accessToken}\n              user={form.getValues(\"user\")}\n              label=\"generatedAccessToken\"\n            />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedIdToken\")}\n            eventKey={3}\n            id=\"tab-generated-id-token\"\n            ref={tabContent4}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={idToken}\n              user={form.getValues(\"user\")}\n              label=\"generatedIdToken\"\n            />\n          </TabContent>\n          <TabContent\n            aria-labelledby={t(\"generatedUserInfo\")}\n            eventKey={4}\n            id=\"tab-generated-user-info\"\n            ref={tabContent5}\n            hidden\n          >\n            <GeneratedCodeTab\n              text={userInfo}\n              user={form.getValues(\"user\")}\n              label=\"generatedUserInfo\"\n            />\n          </TabContent>\n        </GridItem>\n        <GridItem span={4}>\n          <Tabs\n            id=\"tabs\"\n            key={key}\n            isVertical\n            activeKey={activeTab}\n            onSelect={(_, key) => setActiveTab(key as number)}\n          >\n            <Tab\n              id=\"effectiveProtocolMappers\"\n              aria-controls=\"effectiveProtocolMappers\"\n              eventKey={0}\n              title={\n                <TabTitleText>\n                  {t(\"effectiveProtocolMappers\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"effectiveProtocolMappers\"\n                    helpText={t(\"effectiveProtocolMappersHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent1}\n            />\n            <Tab\n              id=\"effectiveRoleScopeMappings\"\n              aria-controls=\"effectiveRoleScopeMappings\"\n              eventKey={1}\n              title={\n                <TabTitleText>\n                  {t(\"effectiveRoleScopeMappings\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"effectiveRoleScopeMappings\"\n                    helpText={t(\"effectiveRoleScopeMappingsHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent2}\n            ></Tab>\n            <Tab\n              id=\"generatedAccessToken\"\n              aria-controls=\"generatedAccessToken\"\n              eventKey={2}\n              title={\n                <TabTitleText>\n                  {t(\"generatedAccessToken\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"generatedAccessToken\"\n                    helpText={t(\"generatedAccessTokenHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent3}\n            />\n            <Tab\n              id=\"generatedIdToken\"\n              aria-controls=\"generatedIdToken\"\n              eventKey={3}\n              title={\n                <TabTitleText>\n                  {t(\"generatedIdToken\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"generatedIdToken\"\n                    helpText={t(\"generatedIdTokenHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent4}\n            />\n            <Tab\n              id=\"generatedUserInfo\"\n              aria-controls=\"generatedUserInfo\"\n              eventKey={4}\n              title={\n                <TabTitleText>\n                  {t(\"generatedUserInfo\")}{\" \"}\n                  <HelpItem\n                    fieldLabelId=\"generatedUserInfo\"\n                    helpText={t(\"generatedUserInfoHelp\")}\n                    noVerticalAlign={false}\n                    unWrap\n                  />\n                </TabTitleText>\n              }\n              tabContentRef={tabContent5}\n            />\n          </Tabs>\n        </GridItem>\n      </Grid>\n    </>\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport type { RoleMappingPayload } from \"@keycloak/keycloak-admin-client/lib/defs/roleRepresentation\";\nimport type UserRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/userRepresentation\";\nimport { AlertVariant, PageSection } from \"@patternfly/react-core\";\nimport { InfoCircleIcon } from \"@patternfly/react-icons\";\nimport { useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\n\nimport { adminClient } from \"../../admin-client\";\nimport { useAlerts } from \"../../components/alert/Alerts\";\nimport { KeycloakSpinner } from \"../../components/keycloak-spinner/KeycloakSpinner\";\nimport { RoleMapping, Row } from \"../../components/role-mapping/RoleMapping\";\nimport { useAccess } from \"../../context/access/Access\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { toUser } from \"../../user/routes/User\";\nimport { useFetch } from \"../../utils/useFetch\";\n\nimport \"./service-account.css\";\n\ntype ServiceAccountProps = {\n  client: ClientRepresentation;\n};\n\nexport const ServiceAccount = ({ client }: ServiceAccountProps) => {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n\n  const [serviceAccount, setServiceAccount] = useState<UserRepresentation>();\n\n  const { hasAccess } = useAccess();\n  const hasManageClients = hasAccess(\"manage-clients\");\n\n  useFetch(\n    () =>\n      adminClient.clients.getServiceAccountUser({\n        id: client.id!,\n      }),\n    (serviceAccount) => setServiceAccount(serviceAccount),\n    [],\n  );\n\n  const assignRoles = async (rows: Row[]) => {\n    try {\n      const realmRoles = rows\n        .filter((row) => row.client === undefined)\n        .map((row) => row.role as RoleMappingPayload)\n        .flat();\n      await adminClient.users.addRealmRoleMappings({\n        id: serviceAccount?.id!,\n        roles: realmRoles,\n      });\n      await Promise.all(\n        rows\n          .filter((row) => row.client !== undefined)\n          .map((row) =>\n            adminClient.users.addClientRoleMappings({\n              id: serviceAccount?.id!,\n              clientUniqueId: row.client!.id!,\n              roles: [row.role as RoleMappingPayload],\n            }),\n          ),\n      );\n      addAlert(t(\"roleMappingUpdatedSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"roleMappingUpdatedError\", error);\n    }\n  };\n  return serviceAccount ? (\n    <>\n      <PageSection className=\"pf-u-pb-0\">\n        <InfoCircleIcon className=\"pf-c-alert__icon keycloak--service-account--info-text\" />\n        <span className=\"pf-u-pl-sm\">\n          <Trans i18nKey=\"manageServiceAccountUser\">\n            {\"\"}\n            <Link\n              to={toUser({ realm, id: serviceAccount.id!, tab: \"settings\" })}\n            >\n              {{ link: serviceAccount.username }}\n            </Link>\n          </Trans>\n        </span>\n      </PageSection>\n      <RoleMapping\n        name={client.clientId!}\n        id={serviceAccount.id!}\n        type=\"users\"\n        isManager={hasManageClients || client.access?.configure}\n        save={assignRoles}\n      />\n    </>\n  ) : (\n    <KeycloakSpinner />\n  );\n};\n","import type ClientRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientRepresentation\";\nimport {\n  AlertVariant,\n  ButtonVariant,\n  Divider,\n  DropdownItem,\n  Label,\n  PageSection,\n  Tab,\n  TabTitleText,\n  Tooltip,\n} from \"@patternfly/react-core\";\nimport { InfoCircleIcon } from \"@patternfly/react-icons\";\nimport { cloneDeep, sortBy } from \"lodash-es\";\nimport { useMemo, useState } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport {\n  ConfirmDialogModal,\n  useConfirmDialog,\n} from \"../components/confirm-dialog/ConfirmDialog\";\nimport { DownloadDialog } from \"../components/download-dialog/DownloadDialog\";\nimport type { KeyValueType } from \"../components/key-value-form/key-value-convert\";\nimport { KeycloakSpinner } from \"../components/keycloak-spinner/KeycloakSpinner\";\nimport { PermissionsTab } from \"../components/permission-tab/PermissionTab\";\nimport { RolesList } from \"../components/roles-list/RolesList\";\nimport {\n  RoutableTabs,\n  useRoutableTab,\n} from \"../components/routable-tabs/RoutableTabs\";\nimport {\n  ViewHeader,\n  ViewHeaderBadge,\n} from \"../components/view-header/ViewHeader\";\nimport { useAccess } from \"../context/access/Access\";\nimport { useRealm } from \"../context/realm-context/RealmContext\";\nimport {\n  convertAttributeNameToForm,\n  convertFormValuesToObject,\n  convertToFormValues,\n  exportClient,\n} from \"../util\";\nimport { useFetch } from \"../utils/useFetch\";\nimport useIsFeatureEnabled, { Feature } from \"../utils/useIsFeatureEnabled\";\nimport { useParams } from \"../utils/useParams\";\nimport useToggle from \"../utils/useToggle\";\nimport { AdvancedTab } from \"./AdvancedTab\";\nimport { ClientSessions } from \"./ClientSessions\";\nimport { ClientSettings } from \"./ClientSettings\";\nimport { AuthorizationEvaluate } from \"./authorization/AuthorizationEvaluate\";\nimport { AuthorizationExport } from \"./authorization/AuthorizationExport\";\nimport { AuthorizationPermissions } from \"./authorization/Permissions\";\nimport { AuthorizationPolicies } from \"./authorization/Policies\";\nimport { AuthorizationResources } from \"./authorization/Resources\";\nimport { AuthorizationScopes } from \"./authorization/Scopes\";\nimport { AuthorizationSettings } from \"./authorization/Settings\";\nimport { Credentials } from \"./credentials/Credentials\";\nimport { Keys } from \"./keys/Keys\";\nimport { SamlKeys } from \"./keys/SamlKeys\";\nimport {\n  AuthorizationTab,\n  toAuthorizationTab,\n} from \"./routes/AuthenticationTab\";\nimport { ClientParams, ClientTab, toClient } from \"./routes/Client\";\nimport { toClientRole } from \"./routes/ClientRole\";\nimport { ClientScopesTab, toClientScopesTab } from \"./routes/ClientScopeTab\";\nimport { toClients } from \"./routes/Clients\";\nimport { toCreateRole } from \"./routes/NewRole\";\nimport { ClientScopes } from \"./scopes/ClientScopes\";\nimport { EvaluateScopes } from \"./scopes/EvaluateScopes\";\nimport { ServiceAccount } from \"./service-account/ServiceAccount\";\nimport { getProtocolName, isRealmClient } from \"./utils\";\n\ntype ClientDetailHeaderProps = {\n  onChange: (value: boolean) => void;\n  value: boolean | undefined;\n  save: () => void;\n  client: ClientRepresentation;\n  toggleDownloadDialog: () => void;\n  toggleDeleteDialog: () => void;\n};\n\nconst ClientDetailHeader = ({\n  onChange,\n  value,\n  save,\n  client,\n  toggleDownloadDialog,\n  toggleDeleteDialog,\n}: ClientDetailHeaderProps) => {\n  const { t } = useTranslation();\n  const [toggleDisableDialog, DisableConfirm] = useConfirmDialog({\n    titleKey: \"disableConfirmTitle\",\n    messageKey: \"disableConfirm\",\n    continueButtonLabel: \"disable\",\n    onConfirm: () => {\n      onChange(!value);\n      save();\n    },\n  });\n\n  const badges = useMemo<ViewHeaderBadge[]>(() => {\n    const protocolName = getProtocolName(\n      t,\n      client.protocol ?? \"openid-connect\",\n    );\n\n    const text = client.bearerOnly ? (\n      <Tooltip\n        data-testid=\"bearer-only-explainer-tooltip\"\n        content={t(\"explainBearerOnly\")}\n      >\n        <Label\n          data-testid=\"bearer-only-explainer-label\"\n          icon={<InfoCircleIcon />}\n        >\n          {protocolName}\n        </Label>\n      </Tooltip>\n    ) : (\n      <Label>{protocolName}</Label>\n    );\n\n    return [{ text }];\n  }, [client, t]);\n\n  const { hasAccess } = useAccess();\n  const isManager = hasAccess(\"manage-clients\") || client.access?.configure;\n\n  const dropdownItems = [\n    <DropdownItem key=\"download\" onClick={toggleDownloadDialog}>\n      {t(\"downloadAdapterConfig\")}\n    </DropdownItem>,\n    <DropdownItem key=\"export\" onClick={() => exportClient(client)}>\n      {t(\"export\")}\n    </DropdownItem>,\n    ...(!isRealmClient(client) && isManager\n      ? [\n          <Divider key=\"divider\" />,\n          <DropdownItem\n            data-testid=\"delete-client\"\n            key=\"delete\"\n            onClick={toggleDeleteDialog}\n          >\n            {t(\"delete\")}\n          </DropdownItem>,\n        ]\n      : []),\n  ];\n\n  return (\n    <>\n      <DisableConfirm />\n      <ViewHeader\n        titleKey={client.clientId!}\n        subKey=\"clientsExplain\"\n        badges={badges}\n        divider={false}\n        isReadOnly={!isManager}\n        helpTextKey=\"enableDisable\"\n        dropdownItems={dropdownItems}\n        isEnabled={value}\n        onToggle={(value) => {\n          if (!value) {\n            toggleDisableDialog();\n          } else {\n            onChange(value);\n            save();\n          }\n        }}\n      />\n    </>\n  );\n};\n\nexport type SaveOptions = {\n  confirmed?: boolean;\n  messageKey?: string;\n};\n\nexport type FormFields = Omit<\n  ClientRepresentation,\n  \"authorizationSettings\" | \"resources\"\n>;\n\nexport default function ClientDetails() {\n  const { t } = useTranslation();\n  const { addAlert, addError } = useAlerts();\n  const { realm } = useRealm();\n  const { hasAccess } = useAccess();\n  const isFeatureEnabled = useIsFeatureEnabled();\n\n  const hasManageAuthorization = hasAccess(\"manage-authorization\");\n  const hasManageClients = hasAccess(\"manage-clients\");\n  const hasViewClients = hasAccess(\"view-clients\");\n  const hasViewUsers = hasAccess(\"view-users\");\n  const permissionsEnabled =\n    isFeatureEnabled(Feature.AdminFineGrainedAuthz) && hasManageAuthorization;\n\n  const navigate = useNavigate();\n\n  const [downloadDialogOpen, toggleDownloadDialogOpen] = useToggle();\n  const [changeAuthenticatorOpen, toggleChangeAuthenticatorOpen] = useToggle();\n\n  const form = useForm<FormFields>();\n  const { clientId } = useParams<ClientParams>();\n  const [key, setKey] = useState(0);\n\n  const clientAuthenticatorType = useWatch({\n    control: form.control,\n    name: \"clientAuthenticatorType\",\n    defaultValue: \"client-secret\",\n  });\n\n  const [client, setClient] = useState<ClientRepresentation>();\n\n  const loader = async () => {\n    const roles = await adminClient.clients.listRoles({ id: clientId });\n    return sortBy(roles, (role) => role.name?.toUpperCase());\n  };\n\n  const useTab = (tab: ClientTab) =>\n    useRoutableTab(\n      toClient({\n        realm,\n        clientId,\n        tab,\n      }),\n    );\n\n  const settingsTab = useTab(\"settings\");\n  const keysTab = useTab(\"keys\");\n  const credentialsTab = useTab(\"credentials\");\n  const rolesTab = useTab(\"roles\");\n  const clientScopesTab = useTab(\"clientScopes\");\n  const authorizationTab = useTab(\"authorization\");\n  const serviceAccountTab = useTab(\"serviceAccount\");\n  const sessionsTab = useTab(\"sessions\");\n  const permissionsTab = useTab(\"permissions\");\n  const advancedTab = useTab(\"advanced\");\n\n  const useClientScopesTab = (tab: ClientScopesTab) =>\n    useRoutableTab(\n      toClientScopesTab({\n        realm,\n        clientId,\n        tab,\n      }),\n    );\n\n  const clientScopesSetupTab = useClientScopesTab(\"setup\");\n  const clientScopesEvaluateTab = useClientScopesTab(\"evaluate\");\n\n  const useAuthorizationTab = (tab: AuthorizationTab) =>\n    useRoutableTab(\n      toAuthorizationTab({\n        realm,\n        clientId,\n        tab,\n      }),\n    );\n\n  const authorizationSettingsTab = useAuthorizationTab(\"settings\");\n  const authorizationResourcesTab = useAuthorizationTab(\"resources\");\n  const authorizationScopesTab = useAuthorizationTab(\"scopes\");\n  const authorizationPoliciesTab = useAuthorizationTab(\"policies\");\n  const authorizationPermissionsTab = useAuthorizationTab(\"permissions\");\n  const authorizationEvaluateTab = useAuthorizationTab(\"evaluate\");\n  const authorizationExportTab = useAuthorizationTab(\"export\");\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: \"clientDeleteConfirmTitle\",\n    messageKey: \"clientDeleteConfirm\",\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      try {\n        await adminClient.clients.del({ id: clientId });\n        addAlert(t(\"clientDeletedSuccess\"), AlertVariant.success);\n        navigate(toClients({ realm }));\n      } catch (error) {\n        addError(\"clientDeleteError\", error);\n      }\n    },\n  });\n\n  const setupForm = (client: ClientRepresentation) => {\n    form.reset({ ...client });\n    convertToFormValues(client, form.setValue);\n    if (client.attributes?.[\"acr.loa.map\"]) {\n      form.setValue(\n        convertAttributeNameToForm(\"attributes.acr.loa.map\"),\n        // @ts-ignore\n        Object.entries(JSON.parse(client.attributes[\"acr.loa.map\"])).flatMap(\n          ([key, value]) => ({ key, value }),\n        ),\n      );\n    }\n  };\n\n  useFetch(\n    () => adminClient.clients.findOne({ id: clientId }),\n    (fetchedClient) => {\n      if (!fetchedClient) {\n        throw new Error(t(\"notFound\"));\n      }\n      setClient(cloneDeep(fetchedClient));\n      setupForm(fetchedClient);\n    },\n    [clientId, key],\n  );\n\n  const save = async (\n    { confirmed = false, messageKey = \"clientSaveSuccess\" }: SaveOptions = {\n      confirmed: false,\n      messageKey: \"clientSaveSuccess\",\n    },\n  ) => {\n    if (!(await form.trigger())) {\n      return;\n    }\n\n    if (\n      !client?.publicClient &&\n      client?.clientAuthenticatorType !== clientAuthenticatorType &&\n      !confirmed\n    ) {\n      toggleChangeAuthenticatorOpen();\n      return;\n    }\n\n    const values = convertFormValuesToObject(form.getValues());\n\n    const submittedClient =\n      convertFormValuesToObject<ClientRepresentation>(values);\n\n    if (submittedClient.attributes?.[\"acr.loa.map\"]) {\n      submittedClient.attributes[\"acr.loa.map\"] = JSON.stringify(\n        Object.fromEntries(\n          (submittedClient.attributes[\"acr.loa.map\"] as KeyValueType[])\n            .filter(({ key }) => key !== \"\")\n            .map(({ key, value }) => [key, value]),\n        ),\n      );\n    }\n\n    try {\n      const newClient: ClientRepresentation = {\n        ...client,\n        ...submittedClient,\n      };\n\n      newClient.clientId = newClient.clientId?.trim();\n\n      await adminClient.clients.update({ id: clientId }, newClient);\n      setupForm(newClient);\n      setClient(newClient);\n      addAlert(t(messageKey), AlertVariant.success);\n    } catch (error) {\n      addError(\"clientSaveError\", error);\n    }\n  };\n\n  if (!client) {\n    return <KeycloakSpinner />;\n  }\n\n  return (\n    <>\n      <ConfirmDialogModal\n        continueButtonLabel=\"yes\"\n        cancelButtonLabel=\"no\"\n        titleKey={t(\"changeAuthenticatorConfirmTitle\", {\n          clientAuthenticatorType: clientAuthenticatorType,\n        })}\n        open={changeAuthenticatorOpen}\n        toggleDialog={toggleChangeAuthenticatorOpen}\n        onConfirm={() => save({ confirmed: true })}\n      >\n        <>\n          {t(\"changeAuthenticatorConfirm\", {\n            clientAuthenticatorType: clientAuthenticatorType,\n          })}\n        </>\n      </ConfirmDialogModal>\n      <DeleteConfirm />\n      {downloadDialogOpen && (\n        <DownloadDialog\n          id={client.id!}\n          protocol={client.protocol}\n          open\n          toggleDialog={toggleDownloadDialogOpen}\n        />\n      )}\n      <Controller\n        name=\"enabled\"\n        control={form.control}\n        defaultValue={true}\n        render={({ field }) => (\n          <ClientDetailHeader\n            value={field.value}\n            onChange={field.onChange}\n            client={client}\n            save={save}\n            toggleDeleteDialog={toggleDeleteDialog}\n            toggleDownloadDialog={toggleDownloadDialogOpen}\n          />\n        )}\n      />\n      <PageSection variant=\"light\" className=\"pf-u-p-0\">\n        <FormProvider {...form}>\n          <RoutableTabs\n            data-testid=\"client-tabs\"\n            aria-label=\"client-tabs\"\n            isBox\n            mountOnEnter\n          >\n            <Tab\n              id=\"settings\"\n              data-testid=\"clientSettingsTab\"\n              title={<TabTitleText>{t(\"settings\")}</TabTitleText>}\n              {...settingsTab}\n            >\n              <ClientSettings\n                client={client}\n                save={() => save()}\n                reset={() => setupForm(client)}\n              />\n            </Tab>\n            {((!client.publicClient && !isRealmClient(client)) ||\n              client.protocol === \"saml\") && (\n              <Tab\n                id=\"keys\"\n                data-testid=\"keysTab\"\n                title={<TabTitleText>{t(\"keys\")}</TabTitleText>}\n                {...keysTab}\n              >\n                {client.protocol === \"openid-connect\" && (\n                  <Keys\n                    clientId={clientId}\n                    save={save}\n                    hasConfigureAccess={client.access?.configure}\n                  />\n                )}\n                {client.protocol === \"saml\" && (\n                  <SamlKeys clientId={clientId} save={save} />\n                )}\n              </Tab>\n            )}\n            {!client.publicClient &&\n              !isRealmClient(client) &&\n              (hasViewClients ||\n                client.access?.configure ||\n                client.access?.view) && (\n                <Tab\n                  id=\"credentials\"\n                  title={<TabTitleText>{t(\"credentials\")}</TabTitleText>}\n                  {...credentialsTab}\n                >\n                  <Credentials\n                    key={key}\n                    client={client}\n                    save={save}\n                    refresh={() => setKey(key + 1)}\n                  />\n                </Tab>\n              )}\n            <Tab\n              id=\"roles\"\n              data-testid=\"rolesTab\"\n              title={<TabTitleText>{t(\"roles\")}</TabTitleText>}\n              {...rolesTab}\n            >\n              <RolesList\n                loader={loader}\n                paginated={false}\n                messageBundle=\"client\"\n                toCreate={toCreateRole({ realm, clientId: client.id! })}\n                toDetail={(roleId) =>\n                  toClientRole({\n                    realm,\n                    clientId: client.id!,\n                    id: roleId,\n                    tab: \"details\",\n                  })\n                }\n                isReadOnly={!(hasManageClients || client.access?.configure)}\n              />\n            </Tab>\n            {!isRealmClient(client) && !client.bearerOnly && (\n              <Tab\n                id=\"clientScopes\"\n                data-testid=\"clientScopesTab\"\n                title={<TabTitleText>{t(\"clientScopes\")}</TabTitleText>}\n                {...clientScopesTab}\n              >\n                <RoutableTabs\n                  defaultLocation={toClientScopesTab({\n                    realm,\n                    clientId,\n                    tab: \"setup\",\n                  })}\n                >\n                  <Tab\n                    id=\"setup\"\n                    title={<TabTitleText>{t(\"setup\")}</TabTitleText>}\n                    {...clientScopesSetupTab}\n                  >\n                    <ClientScopes\n                      clientName={client.clientId!}\n                      clientId={clientId}\n                      protocol={client!.protocol!}\n                      fineGrainedAccess={client!.access?.manage}\n                    />\n                  </Tab>\n                  <Tab\n                    id=\"evaluate\"\n                    title={<TabTitleText>{t(\"evaluate\")}</TabTitleText>}\n                    {...clientScopesEvaluateTab}\n                  >\n                    <EvaluateScopes\n                      clientId={clientId}\n                      protocol={client!.protocol!}\n                    />\n                  </Tab>\n                </RoutableTabs>\n              </Tab>\n            )}\n            {client!.authorizationServicesEnabled && hasManageAuthorization && (\n              <Tab\n                id=\"authorization\"\n                data-testid=\"authorizationTab\"\n                title={<TabTitleText>{t(\"authorization\")}</TabTitleText>}\n                {...authorizationTab}\n              >\n                <RoutableTabs\n                  mountOnEnter\n                  unmountOnExit\n                  defaultLocation={toAuthorizationTab({\n                    realm,\n                    clientId,\n                    tab: \"settings\",\n                  })}\n                >\n                  <Tab\n                    id=\"settings\"\n                    data-testid=\"authorizationSettings\"\n                    title={<TabTitleText>{t(\"settings\")}</TabTitleText>}\n                    {...authorizationSettingsTab}\n                  >\n                    <AuthorizationSettings clientId={clientId} />\n                  </Tab>\n                  <Tab\n                    id=\"resources\"\n                    data-testid=\"authorizationResources\"\n                    title={<TabTitleText>{t(\"resources\")}</TabTitleText>}\n                    {...authorizationResourcesTab}\n                  >\n                    <AuthorizationResources clientId={clientId} />\n                  </Tab>\n                  <Tab\n                    id=\"scopes\"\n                    data-testid=\"authorizationScopes\"\n                    title={<TabTitleText>{t(\"scopes\")}</TabTitleText>}\n                    {...authorizationScopesTab}\n                  >\n                    <AuthorizationScopes clientId={clientId} />\n                  </Tab>\n                  <Tab\n                    id=\"policies\"\n                    data-testid=\"authorizationPolicies\"\n                    title={<TabTitleText>{t(\"policies\")}</TabTitleText>}\n                    {...authorizationPoliciesTab}\n                  >\n                    <AuthorizationPolicies clientId={clientId} />\n                  </Tab>\n                  <Tab\n                    id=\"permissions\"\n                    data-testid=\"authorizationPermissions\"\n                    title={<TabTitleText>{t(\"permissions\")}</TabTitleText>}\n                    {...authorizationPermissionsTab}\n                  >\n                    <AuthorizationPermissions clientId={clientId} />\n                  </Tab>\n                  {hasViewUsers && (\n                    <Tab\n                      id=\"evaluate\"\n                      data-testid=\"authorizationEvaluate\"\n                      title={<TabTitleText>{t(\"evaluate\")}</TabTitleText>}\n                      {...authorizationEvaluateTab}\n                    >\n                      <AuthorizationEvaluate client={client} save={save} />\n                    </Tab>\n                  )}\n                  <Tab\n                    id=\"export\"\n                    data-testid=\"authorizationExport\"\n                    title={<TabTitleText>{t(\"export\")}</TabTitleText>}\n                    {...authorizationExportTab}\n                  >\n                    <AuthorizationExport />\n                  </Tab>\n                </RoutableTabs>\n              </Tab>\n            )}\n            {client!.serviceAccountsEnabled && hasViewUsers && (\n              <Tab\n                id=\"serviceAccount\"\n                data-testid=\"serviceAccountTab\"\n                title={<TabTitleText>{t(\"serviceAccount\")}</TabTitleText>}\n                {...serviceAccountTab}\n              >\n                <ServiceAccount client={client} />\n              </Tab>\n            )}\n            <Tab\n              id=\"sessions\"\n              data-testid=\"sessionsTab\"\n              title={<TabTitleText>{t(\"sessions\")}</TabTitleText>}\n              {...sessionsTab}\n            >\n              <ClientSessions client={client} />\n            </Tab>\n            {permissionsEnabled &&\n              (hasManageClients || client.access?.manage) && (\n                <Tab\n                  id=\"permissions\"\n                  data-testid=\"permissionsTab\"\n                  title={<TabTitleText>{t(\"permissions\")}</TabTitleText>}\n                  {...permissionsTab}\n                >\n                  <PermissionsTab id={client.id!} type=\"clients\" />\n                </Tab>\n              )}\n            <Tab\n              id=\"advanced\"\n              data-testid=\"advancedTab\"\n              title={<TabTitleText>{t(\"advanced\")}</TabTitleText>}\n              {...advancedTab}\n            >\n              <AdvancedTab save={save} client={client} />\n            </Tab>\n          </RoutableTabs>\n        </FormProvider>\n      </PageSection>\n    </>\n  );\n}\n"],"names":["styles","CodeBlock","_a","children","className","actions","props","__rest","React","css","CodeBlockAction","PanelHeader","TextListVariants","TextList","component","isPlain","Component","TextListItemVariants","TextListItem","DownloadDialog","id","open","toggleDialog","protocol","realm","useRealm","t","useTranslation","enabled","useHelp","configFormats","useServerInfo","selected","setSelected","useState","snippet","setSnippet","openType","setOpenType","selectedConfig","useMemo","config","sanitizeSnippet","useFetch","fetchWithError","addTrailingSlash","adminClient","getAuthorizationHeaders","prettyPrintJSON","useEffect","jsx","ConfirmDialogModal","saveAs","ModalVariant","Form","jsxs","Stack","StackItem","FormGroup","HelpItem","Select","isExpanded","SelectVariant","_","value","configFormat","SelectOption","KeycloakTextArea","inherited","expires","TokenLifespan","name","defaultValue","units","setOpen","focused","setFocused","onFocus","onBlur","control","useFormContext","isExpireSet","Controller","field","Split","SplitItem","TimeSelector","AdvancedSettings","save","reset","hasConfigureAccess","setRealm","realmName","isDPoPEnabled","useIsFeatureEnabled","Feature","FormAccess","convertAttributeNameToForm","Fragment","Switch","v","KeyValueInput","MultiLineInput","ActionGroup","Button","AuthenticationOverrides","flows","setFlows","browserFlowOpen","setBrowserFlowOpen","directGrantOpen","setDirectGrantOpen","filteredFlows","flow","sortBy","f","TimeSelectorForm","useController","AddHostDialog","isOpen","onAdded","onClose","register","handleSubmit","isDirty","isValid","useForm","addAlert","addError","useAlerts","onSubmit","node","AlertVariant","error","Modal","ButtonVariant","KeycloakTextInput","ClusteringPanel","registeredNodes","access","formatDate","useFormatDate","nodes","setNodes","expanded","setExpanded","selectedNode","setSelectedNode","addNodeOpen","setAddNodeOpen","key","setKey","refresh","testCluster","result","parseResult","toggleDeleteNodeConfirm","DeleteNodeConfirm","useConfirmDialog","object","ExpandableSection","KeycloakDataTable","entry","ToolbarItem","FORMAT_DATE_AND_TIME","ListEmptyState","ApplicationUrls","TextControl","FineGrainOpenIdConnect","providers","clientSignatureProviders","contentEncryptionProviders","cekManagementProviders","signatureProviders","accessTokenOpen","setAccessTokenOpen","idTokenOpen","setIdTokenOpen","idTokenKeyManagementOpen","setIdTokenKeyManagementOpen","idTokenContentOpen","setIdTokenContentOpen","userInfoSignedResponseOpen","setUserInfoSignedResponseOpen","requestObjectSignatureOpen","setRequestObjectSignatureOpen","requestObjectRequiredOpen","setRequestObjectRequiredOpen","requestObjectEncryptionOpen","setRequestObjectEncryptionOpen","requestObjectEncodingOpen","setRequestObjectEncodingOpen","authorizationSignedOpen","setAuthorizationSignedOpen","authorizationEncryptedOpen","setAuthorizationEncryptedOpen","authorizationEncryptedResponseOpen","setAuthorizationEncryptedResponseOpen","userInfoResponseEncryptionKeyManagementOpen","setUserInfoResponseEncryptionKeyManagementOpen","userInfoResponseEncryptionContentEncryptionOpen","setUserInfoResponseEncryptionContentEncryptionOpen","keyOptions","sortProviders","p","cekManagementOptions","signatureOptions","contentOptions","requestObjectOptions","requestObjectEncryptionOptions","requestObjectEncodingOptions","authorizationSignedResponseOptions","requestObjectRequiredOptions","FineGrainSamlEndpointConfig","OpenIdConnectCompatibilityModes","RevocationPanel","adminUrl","revocationFieldName","pushRevocationButtonRef","useRef","getValues","setValue","setNotBefore","time","messageKey","getNotBeforeValue","date","push","Text","Trans","Link","toClient","InputGroup","Tooltip","prefixKey","successCount","failedCount","AdvancedTab","client","openIdConnect","publicClient","attributes","authenticationFlowBindingOverrides","resetFields","names","PageSection","ScrollForm","toUpperCase","ClientSessions","SessionsTable","first","max","mapSessionsToType","type","sessions","session","AccessSettings","watch","hasAccess","useAccess","isManager","LoginSettings","FixedButtonsGroup","LoginSettingsPanel","loginThemeOpen","setLoginThemeOpen","loginThemes","consentRequired","displayOnConsentScreen","theme","validateUrl","uri","LogoutPanel","errors","frontchannelLogout","beerify","ValidatedOptions","Toggle","label","SamlConfig","nameFormatOpen","setNameFormatOpen","SIGNATURE_ALGORITHMS","KEYNAME_TRANSFORMER","CANONICALIZATION","SamlSignature","algOpen","setAlgOpen","keyOpen","setKeyOpen","canOpen","setCanOpen","signDocs","signAssertion","algorithm","can","ClientSettings","ClientDescription","CapabilityConfig","ValueInput","rowIndex","attribute","selectableValues","resources","isValueOpenArray","setIsValueOpenArray","toggleValueSelect","arr","attributeValues","values","defaultContextAttributes","attr","renderSelectOptionType","scopeValues","resource","scope","getMessageBundleKey","attributeName","camelCase","Td","KeyBasedAttributeInput","fields","append","remove","useFieldArray","isKeyOpenArray","setIsKeyOpenArray","toggleKeySelect","watchLastValue","TableComposable","Thead","Tr","Th","Tbody","MinusCircleIcon","PlusCircleIcon","AuthorizationDataModal","data","show","toggle","useToggle","TextContent","TextVariants","AuthorizationEvaluateResourcePolicies","idx","outerPolicy","clientId","useParams","prev","toPermissionDetails","DecisionEffect","ExpandableRowContent","DescriptionList","item","toPolicyDetails","capitalize","AuthorizationEvaluateResource","evaluateResults","filterResults","results","filter","status","Results","evaluateResult","back","filterDropdownOpen","toggleFilterDropdown","setFilter","searchQuery","setSearchQuery","searchInput","setSearchInput","confirmSearchQuery","handleKeyDown","e","filteredResources","noEvaluatedData","noFilteredData","Toolbar","ToolbarGroup","TextInput","SearchIcon","Divider","AuthorizationEvaluate","AuthorizationEvaluateContent","ForbiddenSection","form","trigger","scopesDropdownOpen","setScopesDropdownOpen","roleDropdownOpen","setRoleDropdownOpen","setIsExpanded","applyToResourceType","setApplyToResourceType","setResources","scopes","setScopes","setEvaluateResult","clientRoles","setClientRoles","roles","evaluate","formValues","keys","keyValueToArray","resEval","r","s","evaluation","user","useWatch","FormProvider","Panel","Title","PanelMainBody","ClientSelect","UserSelect","option","event","role","AuthorizationExport","code","setCode","authorizationDetails","setAuthorizationDetails","authDetails","exportAuthDetails","KeycloakSpinner","DetailDescription","DetailDescriptionLink","array","convert","link","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","element","EmptyButton","permissionType","disabled","navigate","useNavigate","toNewPermission","TooltipEmptyButton","EmptyPermissionsState","isResourceEnabled","isScopeEnabled","EmptyState","EmptyStateIcon","EmptyStateBody","MoreLabel","Label","SearchDropdown","types","search","onSearch","isResource","typeOpen","toggleType","submit","typeOptions","Dropdown","DropdownToggle","AssociatedPoliciesRenderer","row","AuthorizationPermissions","permissions","setPermissions","selectedPermission","setSelectedPermission","policyProviders","setPolicyProviders","disabledCreate","setDisabledCreate","createOpen","toggleCreate","setSearch","setMax","setFirst","permission","associatedPolicies","params","policies","toggleDeleteDialog","DeleteConfirm","noData","searching","PaginatingTableToolbar","DropdownItem","DropdownSeparator","Alert","rows","index","DependentPoliciesRenderer","AuthorizationPolicies","setPolicies","selectedPolicy","setSelectedPolicy","newDialog","policy","dependentPolicies","NewPolicyDialog","toCreatePolicy","DetailCell","uris","setScope","toScopeDetails","UriRenderer","AuthorizationResources","selectedResource","setSelectedResource","setPermission","fetchPermissions","toCreateResource","toResourceDetails","AuthorizationScopes","deleteDialog","selectedScope","setSelectedScope","collapsed","setCollapsed","getScope","c","newlyOpened","resourcesScopes","resourceScope","DeleteScopeDialog","toNewScope","_event","ImportDialog","onConfirm","closeDialog","imported","setImported","JsonFileUpload","Radio","POLICY_ENFORCEMENT_MODES","AuthorizationSettings","setResource","importDialog","toggleImportDialog","importResource","mode","DecisionStrategySelect","useQueryPermission","setStatus","plainStatus","setPlainStatus","updatePlainStatus","newStatus","onStatusChange","CopyToClipboardButton","text","variant","setTimeout","useSetTimeout","permissionDenied","copyState","setCopyState","copyMessageKey","copyToClipboard","ClipboardCopyButton","SecretInput","buttonLabel","secret","PasswordInput","ExpireDateFormatter","ClientSecret","secretRotated","setSecretRotated","secretExpirationTime","secretRotatedExpirationTime","expired","toggleInvalidateConfirm","InvalidateConfirm","SignedJWT","clientAuthenticatorType","cryptoInfo","X509","Credentials","setProviders","setSecret","accessToken","setAccessToken","regenerate","call","message","regenerateClientSecret","toggleClientSecretConfirm","ClientSecretConfirm","regenerateAccessToken","toggleAccessTokenConfirm","AccessTokenConfirm","Card","CardBody","ClipboardCopy","CertificateDisplay","keyInfo","Certificate","plain","useId","StoreSettings","hidePassword","isSaml","CERT_PEM","extensions","getFileExtension","format","KeyForm","hasPem","useFile","filename","setFilename","openArchiveFormat","setOpenArchiveFormat","supportedKeystoreTypes","FileUpload","GenerateKeyDialog","ImportKeyDialog","baseFormats","formats","importFile","Keys","setKeyInfo","openGenerateKeys","toggleOpenGenerateKeys","setOpenGenerateKeys","openImportKeys","toggleOpenImportKeys","setOpenImportKeys","useJwksUrl","info","generate","keyStore","importKey","formData","file","rest","CardHeader","CardTitle","ExportSamlKeyDialog","close","keyType","download","submitForm","callback","SamlKeysDialog","onCancel","setType","setKeys","Flex","FlexItem","SamlImportKeyDialog","KEYS","KEYS_MAPPING","KeySection","onChanged","onGenerate","onImport","title","showImportDialog","section","FormPanel","SamlKeys","isChanged","setIsChanged","selectedType","setSelectedType","openImport","setImportOpen","setRefresh","toggleDisableDialog","DisableConfirm","toggleReGenerateDialog","ReGenerateConfirm","isNew","DEDICATED_ROW","TypeSelector","fineGrainedAccess","isDedicatedRow","CellDropdown","changeClientScope","ClientScopes","clientName","localeSort","useLocaleSort","searchType","setSearchType","searchTypeType","setSearchTypeType","AllClientScopes","addDialogOpen","setAddDialogOpen","setRest","selectedRows","setSelectedRowState","setSelectedRows","kebabOpen","setKebabOpen","isViewer","loader","defaultClientScopes","optionalClientScopes","clientScopes","find","clientScope","optional","ClientScope","defaultScopes","nameFilter","typeFilter","firstNum","page","mapByKey","removeClientScope","AddScopeDialog","addClientScope","SearchToolbar","ChangeTypeDropdown","KebabToggle","toDedicatedScope","GeneratedCodeTab","ProtocolMappers","protocolMappers","EffectiveRoles","effectiveRoles","EvaluateScopes","prefix","mapperTypes","selectableScopes","setSelectableScopes","isScopeOpen","setIsScopeOpen","activeTab","setActiveTab","setEffectiveRoles","setProtocolMappers","userInfo","setUserInfo","idToken","setIdToken","tabContent1","tabContent2","tabContent3","tabContent4","tabContent5","hasViewUsers","mapperList","mapper","QuestionCircleIcon","Grid","GridItem","TabContent","Tabs","Tab","TabTitleText","ServiceAccount","serviceAccount","setServiceAccount","hasManageClients","assignRoles","realmRoles","InfoCircleIcon","toUser","RoleMapping","ClientDetailHeader","onChange","toggleDownloadDialog","badges","protocolName","getProtocolName","dropdownItems","exportClient","isRealmClient","ViewHeader","ClientDetails","isFeatureEnabled","hasManageAuthorization","hasViewClients","permissionsEnabled","downloadDialogOpen","toggleDownloadDialogOpen","changeAuthenticatorOpen","toggleChangeAuthenticatorOpen","setClient","useTab","tab","useRoutableTab","settingsTab","keysTab","credentialsTab","rolesTab","clientScopesTab","authorizationTab","serviceAccountTab","sessionsTab","permissionsTab","advancedTab","useClientScopesTab","toClientScopesTab","clientScopesSetupTab","clientScopesEvaluateTab","useAuthorizationTab","toAuthorizationTab","authorizationSettingsTab","authorizationResourcesTab","authorizationScopesTab","authorizationPoliciesTab","authorizationPermissionsTab","authorizationEvaluateTab","authorizationExportTab","toClients","setupForm","fetchedClient","cloneDeep","confirmed","convertFormValuesToObject","submittedClient","newClient","RoutableTabs","RolesList","toCreateRole","roleId","toClientRole","PermissionsTab"],"mappings":"q3IACA,MAAeA,GAAA,CACb,UAAa,kBACb,iBAAoB,2BACpB,cAAiB,wBACjB,iBAAoB,2BACpB,gBAAmB,0BACnB,aAAgB,sBAClB,ECJaC,GAAaC,GAAO,CAC7B,GAAI,CAAE,SAAAC,EAAW,KAAM,UAAAC,EAAW,QAAAC,EAAU,IAAI,EAAKH,EAAII,EAAQC,GAAOL,EAAI,CAAC,WAAY,YAAa,SAAS,CAAC,EAChH,OAAQM,GAAM,cAAc,MAAO,OAAO,OAAO,CAAE,UAAWC,GAAIT,GAAO,UAAWI,CAAS,CAAC,EAAIE,CAAK,EACnGE,GAAM,cAAc,MAAO,CAAE,UAAWC,GAAIT,GAAO,eAAe,CAAG,EACjEQ,GAAM,cAAc,MAAO,CAAE,UAAWC,GAAIT,GAAO,gBAAgB,CAAC,EAAIK,GAAWA,CAAO,CAAC,EAC/FG,GAAM,cAAc,MAAO,CAAE,UAAWC,GAAIT,GAAO,gBAAgB,CAAC,EAAIG,CAAQ,CAAC,CACzF,EACAF,GAAU,YAAc,YCRjB,MAAMS,GAAmBR,GAAO,CACnC,GAAI,CAAE,SAAAC,EAAW,KAAM,UAAAC,CAAW,EAAGF,EAAII,EAAQC,GAAOL,EAAI,CAAC,WAAY,WAAW,CAAC,EACrF,OAAQM,GAAM,cAAc,MAAO,OAAO,OAAO,CAAE,UAAWC,GAAI,gCAAiCL,CAAS,CAAC,EAAIE,CAAK,EAAGH,CAAQ,CACrI,EACAO,GAAgB,YAAc,kBCHvB,MAAMC,GAAeT,GAAO,CAC/B,GAAI,CAAE,UAAAE,EAAW,SAAAD,CAAU,EAAGD,EAAII,EAAQC,GAAOL,EAAI,CAAC,YAAa,UAAU,CAAC,EAC9E,OAAQM,GAAM,cAAc,MAAO,OAAO,OAAO,CAAE,UAAWC,GAAIT,GAAO,YAAaI,CAAS,CAAG,EAAEE,CAAK,EAAGH,CAAQ,CACxH,EACAQ,GAAY,YAAc,cCJnB,IAAIC,IACV,SAAUA,EAAkB,CACzBA,EAAiB,GAAQ,KACzBA,EAAiB,GAAQ,KACzBA,EAAiB,GAAQ,IAC7B,GAAGA,KAAqBA,GAAmB,CAAE,EAAC,EACvC,MAAMC,GAAYX,GAAO,CAC5B,GAAI,CAAE,SAAAC,EAAW,KAAM,UAAAC,EAAY,GAAI,UAAAU,EAAYF,GAAiB,GAAI,QAAAG,EAAU,EAAO,EAAGb,EAAII,EAAQC,GAAOL,EAAI,CAAC,WAAY,YAAa,YAAa,SAAS,CAAC,EACpK,MAAMc,EAAYF,EAClB,OAAQN,GAAM,cAAcQ,EAAW,OAAO,OAAO,CAAA,EAAIV,EAAO,CAAE,UAAWG,GAAIM,GAAWf,GAAO,UAAU,MAAOI,CAAS,CAAG,CAAA,EAAGD,CAAQ,CAC/I,EACAU,GAAS,YAAc,WCZhB,IAAII,IACV,SAAUA,EAAsB,CAC7BA,EAAqB,GAAQ,KAC7BA,EAAqB,GAAQ,KAC7BA,EAAqB,GAAQ,IACjC,GAAGA,KAAyBA,GAAuB,CAAE,EAAC,EAC/C,MAAMC,GAAgBhB,GAAO,CAChC,GAAI,CAAE,SAAAC,EAAW,KAAM,UAAAC,EAAY,GAAI,UAAAU,EAAYG,GAAqB,EAAE,EAAKf,EAAII,EAAQC,GAAOL,EAAI,CAAC,WAAY,YAAa,WAAW,CAAC,EAC5I,MAAMc,EAAYF,EAClB,OAAQN,GAAM,cAAcQ,EAAW,OAAO,OAAO,CAAE,EAAEV,EAAO,CAAE,UAAWG,GAAIL,CAAS,CAAC,CAAE,EAAGD,CAAQ,CAC5G,EACAe,GAAa,YAAc,eCkBpB,MAAMC,GAAiB,CAAC,CAC7B,GAAAC,EACA,KAAAC,EACA,aAAAC,EACA,SAAAC,EAAW,gBACb,IAA2B,CACnB,KAAA,CAAE,MAAAC,GAAUC,KACZ,CAAE,EAAAC,GAAMC,IACR,CAAE,QAAAC,GAAYC,KAGdC,EAFaC,KAEc,oBAAqBR,CAAQ,EACxD,CAACS,EAAUC,CAAW,EAAIC,EAC9BJ,EAAcA,EAAc,OAAS,CAAC,EAAE,EAAA,EAEpC,CAACK,EAASC,CAAU,EAAIF,EAA+B,EACvD,CAACG,EAAUC,CAAW,EAAIJ,EAAS,EAAK,EAExCK,EAAiBC,GACrB,IAAMV,EAAc,KAAMW,GAAWA,EAAO,KAAOT,CAAQ,GAAK,KAChE,CAACA,CAAQ,CAAA,EAGLU,EAAmBP,GACvBA,EAAQ,QACN,uCACA,kBAAkBT,EAAE,gBAAgB,CAAC,kBAAA,EAGzC,OAAAiB,GACE,SAAY,CACN,GAAAJ,GAAgB,YAAc,kBAahC,OAZiB,MAAMK,GACrB,GAAGC,GACDC,EAAY,OAAA,CACb,gBAAgBtB,CAAK,YAAYJ,CAAE,2BAA2BY,CAAQ,GACvE,CACE,OAAQ,MACR,QAASe,GACP,MAAMD,EAAY,eAAe,CACnC,CACF,CAAA,GAGc,cACX,CACL,MAAMX,EAAU,MAAMW,EAAY,QAAQ,yBAAyB,CACjE,GAAA1B,EACA,WAAYY,CAAA,CACb,EACG,OAAA,OAAOG,GAAY,SACdO,EAAgBP,CAAO,EAEvBa,GAAgBb,CAAO,CAElC,CACF,EACCA,GAAYC,EAAWD,CAAO,EAC/B,CAACf,EAAIY,CAAQ,CAAA,EAIfiB,GAAU,IAAMb,EAAW,EAAE,EAAG,CAAChB,EAAIY,CAAQ,CAAC,EAG5CkB,EAACC,GAAA,CACC,SAAUzB,EAAE,sBAAsB,EAClC,oBAAqBA,EAAE,UAAU,EACjC,UAAW,IAAM,CACf0B,GAAA,OACE,IAAI,KAAK,CAACjB,CAAQ,EAAG,CAAE,KAAMI,GAAgB,UAAW,EACxDA,GAAgB,QAAA,CAEpB,EACA,KAAAlB,EACA,aAAAC,EACA,QAAS+B,GAAa,OAEtB,SAACH,EAAAI,GAAA,CACC,SAACC,EAAAC,GAAA,CAAM,UAAS,GACd,SAAA,CAAAN,EAACO,GACC,CAAA,SAAAP,EAACQ,EAAA,CACC,QAAQ,OACR,MAAOhC,EAAE,cAAc,EACvB,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,cAAc,EAC1B,aAAa,cAAA,CACf,EAGF,SAAAwB,EAACU,EAAA,CACC,SAAS,OACT,OAAQvB,EACR,SAAWwB,GAAevB,EAAYuB,CAAU,EAChD,QAASC,EAAc,OACvB,MAAO9B,EACP,WAAYA,EACZ,SAAU,CAAC+B,EAAGC,IAAU,CACV/B,EAAA+B,EAAM,UAAU,EAC5B1B,EAAY,EAAK,CACnB,EACA,aAAW,eACX,aAAc,IAAM,SAAS,KAE5B,SAAAR,EAAc,IAAKmC,GAClBf,EAACgB,EAAA,CAEC,MAAOD,EAAa,GACpB,WAAYjC,IAAaiC,EAAa,GACtC,YAAarC,EAAUqC,EAAa,SAAW,OAE9C,SAAaA,EAAA,WAAA,EALTA,EAAa,EAAA,CAOrB,CAAA,CACH,CAAA,CAAA,EAEJ,EACC,CAAC1B,GAAgB,cACfW,EAAAO,GAAA,CAAU,SAAQ,GACjB,SAAAP,EAACQ,EAAA,CACC,QAAQ,UACR,MAAOhC,EAAE,SAAS,EAClB,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,aAAa,EACzB,aAAa,SAAA,CACf,EAGF,SAAAwB,EAACiB,GAAA,CACC,GAAG,UACH,SAAQ,GACR,KAAM,GACN,kBAAkB,WAClB,MAAOhC,GAAW,OAAOA,GAAY,SAAWA,EAAU,GAC1D,aAAW,mBAAA,CACb,CAAA,CAAA,EAEJ,CAAA,CAAA,CAEJ,CACF,CAAA,CAAA,CAAA,CAGN,ECxJMiC,GAAY,0BACZC,GAAU,wBAEHC,GAAgB,CAAC,CAC5B,GAAAlD,EACA,KAAAmD,EACA,aAAAC,EACA,MAAAC,CACF,IAA0B,CAClB,KAAA,CAAE,EAAA/C,GAAMC,IACR,CAACN,EAAMqD,CAAO,EAAIxC,EAAS,EAAK,EAEhC,CAACyC,EAASC,CAAU,EAAI1C,EAAS,EAAK,EACtC2C,EAAU,IAAMD,EAAW,EAAI,EAC/BE,EAAS,IAAMF,EAAW,EAAK,EAE/B,CAAE,QAAAG,GAAYC,KACdC,EAAejB,GACnB,OAAOA,GAAU,UAChB,OAAOA,GAAU,UAAYA,IAAU,IACxCW,EAGA,OAAAzB,EAACQ,EAAA,CACC,MAAOhC,EAAEN,CAAE,EACX,QAASA,EACT,UAAY8B,EAAAS,EAAA,CAAS,SAAUjC,EAAE,GAAGN,CAAE,MAAM,EAAG,aAAcA,CAAI,CAAA,EAEjE,SAAA8B,EAACgC,EAAA,CACC,KAAAX,EACA,aAAa,GACb,QAAAQ,EACA,OAAQ,CAAC,CAAE,MAAAI,KACR5B,EAAA6B,GAAA,CAAM,UAAS,GACd,SAAA,CAAAlC,EAACmC,GACC,CAAA,SAAA9B,EAACK,EAAA,CACC,QAASE,EAAc,OACvB,SAAUY,EACV,OAAQrD,EACR,SAAU,CAAC0C,EAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpBU,EAAQ,EAAK,CACf,EACA,WAAY,CACVO,EAAYE,EAAM,KAAK,EAAIzD,EAAE2C,EAAO,EAAI3C,EAAE0C,EAAS,CACrD,EAEA,SAAA,CAAAlB,EAACgB,EAAa,CAAA,MAAM,GAAI,SAAAxC,EAAE0C,EAAS,EAAE,IACpCF,EAAa,CAAA,MAAO,GAAK,SAAAxC,EAAE2C,EAAO,EAAE,CAAA,CAAA,CAAA,EAEzC,IACCgB,GACC,CAAA,SAAAnC,EAACoC,GAAA,CACC,UACEL,EAAYE,EAAM,KAAK,GAAKA,EAAM,MAAS,EACvC,UACA,UAEN,MAAAV,EACA,MAAOU,EAAM,QAAU,GAAKX,EAAeW,EAAM,MACjD,SAAUA,EAAM,SAChB,QAAAN,EACA,OAAAC,EACA,IAAK,EACL,WAAY,CAACG,EAAYE,EAAM,KAAK,CAAA,CAAA,EAExC,CAAA,EACF,CAAA,CAEJ,CAAA,CAAA,CAGN,EC7DaI,GAAmB,CAAC,CAC/B,KAAAC,EACA,MAAAC,EACA,SAAAlE,EACA,mBAAAmE,CACF,IAA6B,CACrB,KAAA,CAAE,EAAAhE,GAAMC,IACR,CAACN,EAAMqD,CAAO,EAAIxC,EAAS,EAAK,EAEhC,CAACV,EAAOmE,CAAQ,EAAIzD,EAA8B,EAClD,CAAE,MAAO0D,CAAU,EAAInE,GAAS,EAGhCoE,EADmBC,KACcC,GAAQ,IAAI,EAEnDpD,GACE,IAAMG,EAAY,OAAO,QAAQ,CAAE,MAAO8C,EAAW,EACrDD,EACA,CAAC,CAAA,EAGG,KAAA,CAAE,QAAAZ,GAAYC,KAElB,OAAAzB,EAACyC,GAAA,CACC,KAAK,eACL,kBAAmBN,EACnB,aAAY,GAEX,SAAA,CAAAnE,IAAa,kBACZ2B,EAACQ,EAAA,CACC,MAAOhC,EAAE,mBAAmB,EAC5B,QAAQ,oBACR,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,uBAAuB,EACnC,aAAa,mBAAA,CACf,EAGF,SAAAwB,EAACgC,EAAA,CACC,KAAMe,EACJ,oCACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACoC,GAAA,CACC,MAAO,CAAC,SAAU,MAAO,MAAM,EAC/B,MAAOH,EAAM,MACb,SAAUA,EAAM,QAAA,CAClB,CAAA,CAEJ,CAAA,CACF,EAED5D,IAAa,kBAEVgC,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACoB,GAAA,CACC,GAAG,sBACH,KAAM2B,EACJ,kCACF,EACA,aAAczE,GAAO,oBACrB,MAAO,CAAC,SAAU,MAAO,MAAM,CAAA,CACjC,EAEA0B,EAACoB,GAAA,CACC,GAAG,oBACH,KAAM2B,EACJ,wCACF,EACA,aAAczE,GAAO,yBACrB,MAAO,CAAC,SAAU,MAAO,MAAM,CAAA,CACjC,EAEA0B,EAACoB,GAAA,CACC,GAAG,mBACH,KAAM2B,EACJ,wCACF,EACA,aAAczE,GAAO,yBACrB,MAAO,CAAC,SAAU,MAAO,MAAM,CAAA,CACjC,EAEA0B,EAACoB,GAAA,CACC,GAAG,2BACH,KAAM2B,EACJ,gDACF,EACA,aAAczE,GAAO,0BACrB,MAAO,CAAC,SAAU,MAAO,MAAM,CAAA,CACjC,EAEA0B,EAACoB,GAAA,CACC,GAAG,0BACH,KAAM2B,EACJ,gDACF,EACA,aACEzE,GAAO,iCACHA,EAAM,0BACN,OAEN,MAAO,CAAC,SAAU,MAAO,MAAM,CAAA,CACjC,EAEA0B,EAACQ,EAAA,CACC,MAAOhC,EAAE,aAAa,EACtB,QAAQ,cACR,gBAAe,GACf,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,iBAAiB,EAC7B,aAAa,aAAA,CACf,EAGF,SAAAwB,EAACgC,EAAA,CACC,KAAMe,EACJ,uDACF,EACA,aAAc,GACd,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,GAAG,qBACH,MAAOzE,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,UAAWyD,EAAM,QAAU,OAC3B,SAAWnB,GAAUmB,EAAM,SAAS,GAAKnB,CAAK,EAC9C,aAAYtC,EAAE,aAAa,CAAA,CAC7B,CAAA,CAEJ,CAAA,CACF,EACCmE,GACC3C,EAACQ,EAAA,CACC,MAAOhC,EAAE,WAAW,EACpB,QAAQ,YACR,gBAAe,GACf,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,eAAe,EAC3B,aAAa,WAAA,CACf,EAGF,SAAAwB,EAACgC,EAAA,CACC,KAAMe,EACJ,qCACF,EACA,aAAc,GACd,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,GAAG,mBACH,MAAOzE,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,UAAWyD,EAAM,QAAU,OAC3B,SAAWnB,GAAUmB,EAAM,SAAS,GAAKnB,CAAK,EAC9C,aAAYtC,EAAE,WAAW,CAAA,CAC3B,CAAA,CAEJ,CAAA,CACF,EAEFwB,EAACQ,EAAA,CACC,MAAOhC,EAAE,oBAAoB,EAC7B,QAAQ,qBACR,gBAAe,GACf,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,wBAAwB,EACpC,aAAa,oBAAA,CACf,EAGF,SAAAwB,EAACgC,EAAA,CACC,KAAMe,EACJ,uCACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,qBACT,QAASE,EAAc,OACvB,SAAUY,EACV,OAAQrD,EACR,SAAU,CAAC0C,EAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpBU,EAAQ,EAAK,CACf,EACA,WAAY,CAACS,EAAM,OAASzD,EAAE,QAAQ,CAAC,EAEtC,UAAC,GAAI,OAAQ,OAAO,EAAE,IAAK0E,GACzBlD,EAAAgB,EAAA,CAAqB,MAAOkC,EAC1B,SAAAA,GAAK1E,EAAE,QAAQ,CAAA,EADC0E,CAEnB,CACD,CAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACAlD,EAACQ,EAAA,CACC,MAAOhC,EAAE,oCAAoC,EAC7C,QAAQ,qCACR,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,wCAAwC,EACpD,aAAa,oCAAA,CACf,EAGF,SAAAwB,EAACgC,EAAA,CACC,KAAMe,EACJ,kDACF,EACA,aAAa,QACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,GAAG,qCACH,MAAOzE,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,UAAWyD,EAAM,QAAU,OAC3B,SAAWnB,GAAUmB,EAAM,SAASnB,EAAM,UAAU,EACpD,aAAYtC,EAAE,oCAAoC,CAAA,CACpD,CAAA,CAEJ,CAAA,CACF,EACAwB,EAACQ,EAAA,CACC,MAAOhC,EAAE,iBAAiB,EAC1B,QAAQ,kBACR,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,qBAAqB,EACjC,aAAa,iBAAA,CACf,EAGF,SAAAwB,EAACmD,GAAA,CACC,KAAMJ,EAA2B,wBAAwB,CAAA,CAC3D,CAAA,CACF,EACA/C,EAACQ,EAAA,CACC,MAAOhC,EAAE,kBAAkB,EAC3B,QAAQ,mBACR,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,sBAAsB,EAClC,aAAa,kBAAA,CACf,EAGF,SAAAwB,EAACoD,GAAA,CACC,GAAG,mBACH,aAAW,mBACX,KAAML,EAA2B,+BAA+B,EAChE,UAAS,EAAA,CACX,CAAA,CACF,CAAA,EACF,IAEDM,GACC,CAAA,SAAA,CAAArD,EAACsD,EAAA,CACC,QAAQ,YACR,QAAShB,EACT,cAAY,mBAEX,WAAE,MAAM,CAAA,CACX,EACAtC,EAACsD,EAAO,CAAA,QAAQ,OAAO,QAASf,EAAO,cAAY,qBAChD,SAAE/D,EAAA,QAAQ,CACb,CAAA,CAAA,EACF,CAAA,CAAA,CAAA,CAGN,ECjSa+E,GAA0B,CAAC,CACtC,SAAAlF,EACA,KAAAiE,EACA,MAAAC,EACA,mBAAAC,CACF,IAAoC,CAC5B,KAAA,CAAE,EAAAhE,GAAMC,IACR,CAAC+E,EAAOC,CAAQ,EAAIzE,EAAwB,CAAE,CAAA,EAC9C,CAAC0E,EAAiBC,CAAkB,EAAI3E,EAAS,EAAK,EACtD,CAAC4E,EAAiBC,CAAkB,EAAI7E,EAAS,EAAK,EAEtD,CAAE,QAAA6C,GAAYC,KAEpB,OAAArC,GACE,IAAMG,EAAY,yBAAyB,SAAS,EACnD4D,GAAU,CACT,IAAIM,EAAgB,CAClB,GAAGN,EAAM,OAAQO,GAASA,EAAK,aAAe,aAAa,CAAA,EAE7DD,EAAgBE,GAAOF,EAAe,CAAEG,GAAMA,EAAE,KAAK,CAAC,EAC7CR,EAAA,GACNzC,EAAyB,CAAA,MAAM,GAC7B,SAAExC,EAAA,QAAQ,GADK,OAElB,EACA,GAAGsF,EAAc,IAAKC,GACnB/D,EAAAgB,EAAA,CAA2B,MAAO+C,EAAK,GACrC,SAAAA,EAAK,KADW,EAAAA,EAAK,EAExB,CACD,CAAA,CACF,CACH,EACA,CAAC,CAAA,EAID1D,EAACyC,GAAA,CACC,KAAK,iBACL,kBAAmBN,EACnB,aAAY,GAEZ,SAAA,CAAAxC,EAACQ,EAAA,CACC,MAAOhC,EAAE,aAAa,EACtB,QAAQ,cACR,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,iBAAiB,EAC7B,aAAa,aAAA,CACf,EAGF,SAAAwB,EAACgC,EAAA,CACC,KAAK,6CACL,aAAa,GACb,QAAAH,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,cACT,QAASE,EAAc,OACvB,SAAU+C,EACV,OAAQD,EACR,SAAU,CAAC7C,EAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpB6C,EAAmB,EAAK,CAC1B,EACA,WAAY,CAAC1B,EAAM,KAAK,EAEvB,SAAAuB,CAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACCnF,IAAa,kBACZ2B,EAACQ,EAAA,CACC,MAAOhC,EAAE,aAAa,EACtB,QAAQ,cACR,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,iBAAiB,EAC7B,aAAa,aAAA,CACf,EAGF,SAAAwB,EAACgC,EAAA,CACC,KAAK,kDACL,aAAa,GACb,QAAAH,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,cACT,QAASE,EAAc,OACvB,SAAUiD,EACV,OAAQD,EACR,SAAU,CAAC/C,EAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpB+C,EAAmB,EAAK,CAC1B,EACA,WAAY,CAAC5B,EAAM,KAAK,EAEvB,SAAAuB,CAAA,CACH,CAAA,CAEJ,CAAA,CACF,IAEDH,GACC,CAAA,SAAA,CAAArD,EAACsD,EAAA,CACC,QAAQ,YACR,QAAShB,EACT,cAAY,2BAEX,WAAE,MAAM,CAAA,CACX,EACAtC,EAACsD,EAAA,CACC,QAAQ,OACR,QAASf,EACT,cAAY,6BAEX,WAAE,QAAQ,CAAA,CACb,CAAA,EACF,CAAA,CAAA,CAAA,CAGN,EC7Ia2B,GAAoB9G,GAAiC,CAChE,KAAM,CAAE,MAAA6E,CAAA,EAAUkC,GAAc/G,CAAK,EAErC,OAAQ4C,EAAAoC,GAAA,CAAc,GAAGhF,EAAQ,GAAG6E,CAAO,CAAA,CAC7C,ECeamC,GAAgB,CAAC,CAC5B,SAAUlG,EACV,OAAAmG,EACA,QAAAC,EACA,QAAAC,CACF,IAA0B,CAClB,KAAA,CAAE,EAAA/F,GAAMC,IACR,CACJ,SAAA+F,EACA,aAAAC,EACA,UAAW,CAAE,QAAAC,EAAS,QAAAC,CAAQ,GAC5BC,GAAoB,EAClB,CAAE,SAAAC,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAE1B,eAAAC,EAAS,CAAE,KAAAC,GAAoB,CACxC,GAAA,CACI,MAAArF,EAAY,QAAQ,eAAe,CACvC,GAAA1B,EACA,KAAA+G,CAAA,CACD,EACDX,EAAQW,CAAI,EACZJ,EAASrG,EAAE,kBAAkB,EAAG0G,EAAa,OAAO,QAC7CC,EAAO,CACdL,EAAS,gBAAiBK,CAAK,CACjC,CAEQZ,GACV,CAGE,OAAAvE,EAACoF,GAAA,CACC,MAAO5G,EAAE,SAAS,EAClB,OAAA6F,EACA,QAAAE,EACA,QAAQ,QACR,QAAS,CACPvE,EAACsD,EAAA,CAEC,GAAG,mBACH,KAAK,SACL,KAAK,gBACL,WAAY,CAACoB,GAAW,CAACC,EAExB,WAAE,MAAM,CAAA,EANL,SAON,EACA3E,EAACsD,EAAA,CAEC,GAAG,kBACH,QAAS+B,GAAc,KACvB,QAASd,EAER,WAAE,QAAQ,CAAA,EALP,QAMN,CACF,EAEA,WAACnE,GAAK,CAAA,GAAG,gBAAgB,SAAUqE,EAAaO,CAAQ,EAAG,aAAY,GACrE,SAAChF,EAAAQ,EAAA,CAAU,MAAOhC,EAAE,UAAU,EAAG,QAAQ,WAAW,WAAU,GAC5D,SAAAwB,EAACsF,GAAA,CACC,GAAG,WACF,GAAGd,EAAS,OAAQ,CAAE,SAAU,GAAM,EACvC,WAAU,EAAA,GAEd,CACF,CAAA,CAAA,CAAA,CAGN,EC3Dae,GAAkB,CAAC,CAC9B,KAAAjD,EACA,OAAQ,CAAE,GAAApE,EAAI,gBAAAsH,EAAiB,OAAAC,CAAO,CACxC,IAAqB,CACb,KAAA,CAAE,EAAAjH,GAAMC,IACR,CAAE,SAAAoG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnCW,EAAaC,KAEb,CAACC,EAAOC,CAAQ,EAAI7G,EAASwG,GAAmB,CAAA,CAAE,EAClD,CAACM,EAAUC,CAAW,EAAI/G,EAAS,EAAK,EACxC,CAACgH,EAAcC,CAAe,EAAIjH,EAAS,EAAE,EAC7C,CAACkH,EAAaC,CAAc,EAAInH,EAAS,EAAK,EAC9C,CAACoH,EAAKC,CAAM,EAAIrH,EAAS,CAAC,EAC1BsH,EAAU,IAAMD,MAAW,KAAK,EAAE,SAAS,EAE3CE,EAAc,SAAY,CAC9B,MAAMC,EAAS,MAAM5G,EAAY,QAAQ,mBAAmB,CAAE,GAAA1B,EAAS,EAC3DuI,GAAAD,EAAQ,cAAe3B,EAAUrG,CAAC,CAAA,EAG1C,CAACkI,EAAyBC,CAAiB,EAAIC,GAAiB,CACpE,SAAU,aACV,WAAYpI,EAAE,iBAAkB,CAC9B,KAAMwH,CAAA,CACP,EACD,oBAAqB,SACrB,sBAAuBX,GAAc,OACrC,UAAW,SAAY,CACjB,GAAA,CACI,MAAAzF,EAAY,QAAQ,kBAAkB,CAC1C,GAAA1B,EACA,KAAM8H,CAAA,CACP,EACQH,EAAA,CACP,GAAG,OAAO,KAAKD,CAAK,EAAE,OAAO,CAACiB,EAAaT,KACrCA,IAAQJ,IACHI,EAAAA,CAAG,EAAIR,EAAMQ,CAAG,GAElBS,GACN,EAAE,CAAA,CACN,EACOP,IACRzB,EAASrG,EAAE,mBAAmB,EAAG0G,EAAa,OAAO,QAC9CC,EAAO,CACdL,EAAS,iBAAkBK,CAAK,CAClC,CACF,CAAA,CACD,EAED,OAEI9E,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAAC8C,GAAA,CACC,KAAK,iBACL,kBAAmB2C,GAAQ,UAC3B,aAAY,GAEZ,SAAAzF,EAACQ,EAAA,CACC,MAAOhC,EAAE,2BAA2B,EACpC,QAAQ,iCACR,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,+BAA+B,EAC3C,aAAa,2BAAA,CACf,EAGF,SAAA6B,EAAC6B,GAAM,CAAA,UAAS,GACd,SAAA,CAAAlC,EAACmC,GACC,CAAA,SAAAnC,EAACkE,GAAiB,CAAA,KAAK,2BAA4B,CAAA,EACrD,EACClE,EAAAmC,GAAA,CACC,SAACnC,EAAAsD,EAAA,CAAO,QAAS+B,GAAc,UAAW,QAAS,IAAM/C,IACtD,SAAE9D,EAAA,MAAM,CACX,CAAA,EACF,CAAA,EACF,CAAA,CACF,CAAA,CACF,EAEE6B,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAAC2G,EAAkB,EAAA,EACnB3G,EAACoE,GAAA,CACC,SAAUlG,EACV,OAAQgI,EACR,QAAUjB,GAAS,CACjBW,EAAMX,CAAI,EAAI,KAAK,IAAA,EAAQ,IACnBqB,GACV,EACA,QAAS,IAAMH,EAAe,EAAK,CAAA,CACrC,EACAnG,EAAC8G,GAAA,CACC,WAAYtI,EAAE,wBAAwB,EACtC,SAAUuH,EACV,WAAYD,EAEZ,SAAA9F,EAAC+G,GAAA,CAEC,aAAa,yBACb,OAAQ,IACN,QAAQ,QACN,OAAO,QAAQnB,GAAS,CAAE,CAAA,EAAE,IAAKoB,IACxB,CAAE,KAAMA,EAAM,CAAC,EAAG,aAAcA,EAAM,CAAC,GAC/C,CACH,EAEF,YAEI3G,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACiH,GACC,CAAA,SAAAjH,EAACsD,EAAA,CACC,GAAG,0BACH,QAASiD,EACT,QAASlB,GAAc,UACvB,WAAY,OAAO,KAAKO,CAAK,EAAE,SAAW,EAEzC,WAAE,yBAAyB,CAAA,CAAA,EAEhC,IACCqB,GACC,CAAA,SAAAjH,EAACsD,EAAA,CACC,GAAG,uBACH,QAAS,IAAM6C,EAAe,EAAI,EAClC,QAASd,GAAc,SAEtB,WAAE,sBAAsB,CAAA,CAAA,EAE7B,CAAA,EACF,EAEF,QAAS,CACP,CACE,MAAO7G,EAAE,QAAQ,EACjB,WAAayG,GAAS,CACpBgB,EAAgBhB,EAAK,IAAI,EACDyB,GAC1B,CACF,CACF,EACA,QAAS,CACP,CACE,KAAM,OACN,WAAY,UACd,EACA,CACE,KAAM,eACN,WAAY,mBACZ,eAAgB,CACb5F,GACCA,EACI4E,EACE,IAAI,KAAK,SAAS5E,EAAM,SAAU,CAAA,EAAI,GAAI,EAC1CoG,EAAA,EAEF,EACR,CACF,CACF,EACA,WACElH,EAACmH,GAAA,CACC,QAAS3I,EAAE,SAAS,EACpB,aAAcA,EAAE,qBAAqB,EACrC,kBAAmBA,EAAE,sBAAsB,EAC3C,gBAAiB,IAAM2H,EAAe,EAAI,CAAA,CAC5C,CAAA,EAlEGC,CAoEP,CAAA,CACF,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,EClMagB,GAAmBhK,GAAgC,CACxD,KAAA,CAAE,EAAAoB,GAAMC,IAEd,OAEI4B,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACqH,GAAA,CACC,KAAK,qBACL,MAAO7I,EAAE,SAAS,EAClB,UAAWA,EAAE,aAAa,EAC1B,KAAK,MACJ,GAAGpB,CAAA,CACN,EACA4C,EAACqH,GAAA,CACC,KAAK,uBACL,MAAO7I,EAAE,WAAW,EACpB,UAAWA,EAAE,eAAe,EAC5B,KAAK,MACJ,GAAGpB,CAAA,CACN,EACA4C,EAACqH,GAAA,CACC,KAAK,oBACL,MAAO7I,EAAE,mBAAmB,EAC5B,UAAWA,EAAE,uBAAuB,EACpC,KAAK,MACJ,GAAGpB,CAAA,CACN,CACF,CAAA,CAAA,CAEJ,ECTakK,GAAyB,CAAC,CACrC,KAAAhF,EACA,MAAAC,EACA,mBAAAC,CACF,IAAmC,CAC3B,KAAA,CAAE,GAAM/D,IACR8I,EAAY1I,GAAgB,EAAA,UAC5B2I,EAA2BD,GAAW,gBAAgB,UACtDE,EAA6BF,GAAW,kBAAkB,UAC1DG,EAAyBH,GAAW,cAAc,UAClDI,EAAqBJ,GAAW,UAAU,UAC1C,CAACK,EAAiBC,CAAkB,EAAI7I,EAAS,EAAK,EACtD,CAAC8I,EAAaC,CAAc,EAAI/I,EAAS,EAAK,EAC9C,CAACgJ,EAA0BC,CAA2B,EAC1DjJ,EAAS,EAAK,EACV,CAACkJ,EAAoBC,CAAqB,EAAInJ,EAAS,EAAK,EAC5D,CAACoJ,EAA4BC,CAA6B,EAC9DrJ,EAAS,EAAK,EACV,CAACsJ,EAA4BC,CAA6B,EAC9DvJ,EAAS,EAAK,EACV,CAACwJ,EAA2BC,CAA4B,EAC5DzJ,EAAS,EAAK,EACV,CAAC0J,EAA6BC,CAA8B,EAChE3J,EAAS,EAAK,EACV,CAAC4J,EAA2BC,CAA4B,EAC5D7J,EAAS,EAAK,EACV,CAAC8J,EAAyBC,CAA0B,EAAI/J,EAAS,EAAK,EACtE,CAACgK,EAA4BC,CAA6B,EAC9DjK,EAAS,EAAK,EACV,CACJkK,EACAC,CAAA,EACEnK,EAAS,EAAK,EAEZ,CACJoK,EACAC,EAAA,EACErK,EAAS,EAAK,EAEZ,CACJsK,GACAC,EAAA,EACEvK,EAAS,EAAK,EAEZ,CAAE,QAAA6C,GAAYC,KAEd0H,GAAa,GAChBxI,EAAyB,CAAA,MAAM,GAC7B,SAAE,EAAA,QAAQ,GADK,OAElB,EACA,GAAGyI,GAAcjC,CAAyB,EAAE,IAAKkC,GAC/C1J,EAACgB,EAAqB,CAAA,MAAO0I,CAAV,EAAAA,CAAa,CACjC,CAAA,EAEGC,GAAuB,GAC1B3I,EAAyB,CAAA,MAAM,GAC7B,SAAE,EAAA,QAAQ,GADK,OAElB,EACA,GAAGyI,GAAc/B,CAAuB,EAAE,IAAKgC,GAC7C1J,EAACgB,EAAqB,CAAA,MAAO0I,CAAV,EAAAA,CAAa,CACjC,CAAA,EAEGE,GAAmB,GACtB5I,EAA4B,CAAA,MAAM,GAChC,SAAE,EAAA,UAAU,GADG,UAElB,EACA,GAAGyI,GAAc9B,CAAmB,EAAE,IAAK+B,GACzC1J,EAACgB,EAAqB,CAAA,MAAO0I,CAAV,EAAAA,CAAa,CACjC,CAAA,EAEGG,GAAiB,GACpB7I,EAAyB,CAAA,MAAM,GAC7B,SAAE,EAAA,QAAQ,GADK,OAElB,EACA,GAAGyI,GAAchC,CAA2B,EAAE,IAAKiC,GACjD1J,EAACgB,EAAqB,CAAA,MAAO0I,CAAV,EAAAA,CAAa,CACjC,CAAA,EAGGI,GAAuB,GAC1B9I,EAAuB,CAAA,MAAM,MAC3B,SAAE,EAAA,KAAK,GADQ,KAElB,IACCA,EAAwB,CAAA,MAAM,OAC5B,SAAE,EAAA,MAAM,GADO,MAElB,EACA,GAAGyI,GAAcjC,CAAyB,EAAE,IAAKkC,GAC/C1J,EAACgB,EAAqB,CAAA,MAAO0I,CAAV,EAAAA,CAAa,CACjC,CAAA,EAGGK,GAAiC,GACpC/I,EAAuB,CAAA,MAAM,MAC3B,SAAE,EAAA,KAAK,GADQ,KAElB,EACA,GAAGyI,GAAc/B,CAAuB,EAAE,IAAKgC,GAC7C1J,EAACgB,EAAqB,CAAA,MAAO0I,CAAV,EAAAA,CAAa,CACjC,CAAA,EAGGM,GAA+B,GAClChJ,EAAuB,CAAA,MAAM,MAC3B,SAAE,EAAA,KAAK,GADQ,KAElB,EACA,GAAGyI,GAAchC,CAA2B,EAAE,IAAKiC,GACjD1J,EAACgB,EAAqB,CAAA,MAAO0I,CAAV,EAAAA,CAAa,CACjC,CAAA,EAGGO,GAAqC,GACxCjJ,EAAyB,CAAA,MAAM,GAC7B,SAAE,EAAA,QAAQ,GADK,OAElB,EACA,GAAGyI,GAAc9B,CAAmB,EAAE,IAAK+B,GACzC1J,EAACgB,EAAqB,CAAA,MAAO0I,CAAV,EAAAA,CAAa,CACjC,CAAA,EAGGQ,GAA+B,CACnC,eACA,yBACA,eACA,kBAAA,EACA,IAAKR,KACJ1I,EAAqB,CAAA,MAAO0I,EAC1B,SAAA,EAAE,iBAAiBA,CAAC,EAAE,CAAA,EADNA,CAEnB,CACD,EAGC,OAAArJ,EAACyC,GAAA,CACC,KAAK,iBACL,kBAAmBN,EACnB,aAAY,GAEZ,SAAA,CAAAxC,EAACoH,GAAgB,EAAA,EACjBpH,EAACQ,EAAA,CACC,MAAO,EAAE,+BAA+B,EACxC,QAAQ,gCACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,mCAAmC,EAC/C,aAAa,+BAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,6CACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,gCACT,QAASE,EAAc,OACvB,SAAUiH,EACV,OAAQD,EACR,SAAU,CAAC/G,GAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpB+G,EAAmB,EAAK,CAC1B,EACA,WAAY5F,EAAM,MAEjB,SAAAuH,EAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACAxJ,EAACQ,EAAA,CACC,MAAO,EAAE,2BAA2B,EACpC,QAAQ,wBACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,+BAA+B,EAC3C,aAAa,2BAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,yCACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,4BACT,QAASE,EAAc,OACvB,SAAUmH,EACV,OAAQD,EACR,SAAU,CAACjH,GAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpBiH,EAAe,EAAK,CACtB,EACA,WAAY9F,EAAM,MAEjB,SAAAuH,EAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACAxJ,EAACQ,EAAA,CACC,MAAO,EAAE,yCAAyC,EAClD,QAAQ,0CACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,6CAA6C,EACzD,aAAa,yCAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,4CACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,0CACT,QAASE,EAAc,OACvB,SAAUqH,EACV,OAAQD,EACR,SAAU,CAACnH,GAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpBmH,EAA4B,EAAK,CACnC,EACA,WAAYhG,EAAM,MAEjB,SAAA0H,EAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACA3J,EAACQ,EAAA,CACC,MAAO,EAAE,6CAA6C,EACtD,QAAQ,8CACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,iDAAiD,EAC7D,aAAa,6CAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,4CACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,8CACT,QAASE,EAAc,OACvB,SAAUuH,EACV,OAAQD,EACR,SAAU,CAACrH,GAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpBqH,EAAsB,EAAK,CAC7B,EACA,WAAYlG,EAAM,MAEjB,SAAA4H,EAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACA7J,EAACQ,EAAA,CACC,MAAO,EAAE,iCAAiC,EAC1C,QAAQ,kCACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,qCAAqC,EACjD,aAAa,iCAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,6CACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,kCACT,QAASE,EAAc,OACvB,SAAUyH,EACV,OAAQD,EACR,SAAU,CAACvH,GAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpBuH,EAA8B,EAAK,CACrC,EACA,WAAYpG,EAAM,MAEjB,SAAA2H,EAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACA5J,EAACQ,EAAA,CACC,MAAO,EAAE,kDAAkD,EAC3D,QAAQ,mDACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,sDAAsD,EAClE,aAAa,kDAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,6CACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,mDACT,QAASE,EAAc,OACvB,SAAUyI,GACV,OAAQD,EACR,SAAU,CAACvI,GAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpBuI,GAA+C,EAAK,CACtD,EACA,WAAYpH,EAAM,MAEjB,SAAA0H,EAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACA3J,EAACQ,EAAA,CACC,MAAO,EAAE,sDAAsD,EAC/D,QAAQ,uDACR,UACER,EAACS,EAAA,CACC,SAAU,EACR,0DACF,EACA,aAAa,sDAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,6CACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,uDACT,QAASE,EAAc,OACvB,SAAU2I,GACV,OAAQD,GACR,SAAU,CAACzI,GAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpByI,GAAmD,EAAK,CAC1D,EACA,WAAYtH,EAAM,MAEjB,SAAA4H,EAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACA7J,EAACQ,EAAA,CACC,MAAO,EAAE,iCAAiC,EAC1C,QAAQ,kCACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,qCAAqC,EACjD,aAAa,iCAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,yCACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,kCACT,QAASE,EAAc,OACvB,SAAU2H,EACV,OAAQD,EACR,SAAU,CAACzH,GAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpByH,EAA8B,EAAK,CACrC,EACA,WAAYtG,EAAM,MAEjB,SAAA6H,EAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACA9J,EAACQ,EAAA,CACC,MAAO,EAAE,yBAAyB,EAClC,QAAQ,0BACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,6BAA6B,EACzC,aAAa,yBAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,0CACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,0BACT,QAASE,EAAc,OACvB,SAAU+H,EACV,OAAQD,EACR,SAAU,CAAC7H,GAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpB6H,EAA+B,EAAK,CACtC,EACA,WAAY1G,EAAM,MAEjB,SAAA8H,EAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACA/J,EAACQ,EAAA,CACC,MAAO,EAAE,uBAAuB,EAChC,QAAQ,wBACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,2BAA2B,EACvC,aAAa,uBAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,0CACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,wBACT,QAASE,EAAc,OACvB,SAAUiI,EACV,OAAQD,EACR,SAAU,CAAC/H,GAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpB+H,EAA6B,EAAK,CACpC,EACA,WAAY5G,EAAM,MAEjB,SAAA+H,EAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACAhK,EAACQ,EAAA,CACC,MAAO,EAAE,uBAAuB,EAChC,QAAQ,wBACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,2BAA2B,EACvC,aAAa,uBAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,oCACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,wBACT,QAASE,EAAc,OACvB,SAAU6H,EACV,OAAQD,EACR,SAAU,CAAC3H,GAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpB2H,EAA6B,EAAK,CACpC,EACA,WAAYxG,EAAM,MAEjB,SAAAiI,EAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACAlK,EAACQ,EAAA,CACC,MAAO,EAAE,kBAAkB,EAC3B,QAAQ,mBACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,sBAAsB,EAClC,aAAa,kBAAA,CACf,EAGF,SAAAT,EAACoD,GAAA,CACC,KAAML,EAA2B,yBAAyB,EAC1D,aAAY,EAAE,kBAAkB,EAChC,eAAe,gBACf,UAAS,EAAA,CACX,CAAA,CACF,EACA/C,EAACQ,EAAA,CACC,MAAO,EAAE,gCAAgC,EACzC,QAAQ,iCACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,oCAAoC,EAChD,aAAa,gCAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,8CACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,iCACT,QAASE,EAAc,OACvB,SAAUmI,EACV,OAAQD,EACR,SAAU,CAACjI,GAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpBiI,EAA2B,EAAK,CAClC,EACA,WAAY9G,EAAM,MAEjB,SAAAgI,EAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACAjK,EAACQ,EAAA,CACC,MAAO,EAAE,mCAAmC,EAC5C,QAAQ,oCACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,uCAAuC,EACnD,aAAa,mCAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,iDACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,oCACT,QAASE,EAAc,OACvB,SAAUqI,EACV,OAAQD,EACR,SAAU,CAACnI,GAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpBmI,EAA8B,EAAK,CACrC,EACA,WAAYhH,EAAM,MAEjB,SAAA0H,EAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACA3J,EAACQ,EAAA,CACC,MAAO,EAAE,mCAAmC,EAC5C,QAAQ,oCACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,uCAAuC,EACnD,aAAa,mCAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,iDACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,oCACT,QAASE,EAAc,OACvB,SAAUuI,EACV,OAAQD,EACR,SAAU,CAACrI,GAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAK,EACpBqI,EAAsC,EAAK,CAC7C,EACA,WAAYlH,EAAM,MAEjB,SAAA4H,EAAA,CACH,CAAA,CAEJ,CAAA,CACF,IACCxG,GACC,CAAA,SAAA,CAACrD,EAAAsD,EAAA,CAAO,QAAQ,YAAY,GAAG,gBAAgB,QAAShB,EACrD,SAAE,EAAA,MAAM,CACX,CAAA,EACAtC,EAACsD,EAAO,CAAA,GAAG,kBAAkB,QAAQ,OAAO,QAASf,EAClD,SAAE,EAAA,QAAQ,CACb,CAAA,CAAA,EACF,CAAA,CAAA,CAAA,CAGN,ECjoBa4H,GAA8B,CAAC,CAC1C,KAAA7H,EACA,MAAAC,CACF,IAAwC,CAChC,KAAA,CAAE,EAAA/D,GAAMC,IACd,OACG4B,EAAAyC,GAAA,CAAW,KAAK,eAAe,aAAY,GAC1C,SAAA,CAAA9C,EAACoH,GAAgB,EAAA,EACjBpH,EAACqH,GAAA,CACC,KAAK,8CACL,MAAO7I,EAAE,wCAAwC,EACjD,UAAWA,EAAE,4CAA4C,EACzD,KAAK,KAAA,CACP,EACAwB,EAACqH,GAAA,CACC,KAAK,kDACL,MAAO7I,EAAE,4CAA4C,EACrD,UAAWA,EAAE,gDAAgD,EAC7D,KAAK,KAAA,CACP,EACAwB,EAACqH,GAAA,CACC,KAAK,iDACL,MAAO7I,EAAE,6BAA6B,EACtC,UAAWA,EAAE,iCAAiC,EAC9C,KAAK,KAAA,CACP,EACAwB,EAACqH,GAAA,CACC,KAAK,qDACL,MAAO7I,EAAE,iCAAiC,EAC1C,UAAWA,EAAE,qCAAqC,EAClD,KAAK,KAAA,CACP,EACAwB,EAACqH,GAAA,CACC,KAAK,iDACL,MAAO7I,EAAE,6BAA6B,EACtC,UAAWA,EAAE,iCAAiC,EAC9C,KAAK,KAAA,CACP,EACAwB,EAACqH,GAAA,CACC,KAAK,qDACL,MAAO7I,EAAE,iCAAiC,EAC1C,UAAWA,EAAE,qCAAqC,EAClD,KAAK,KAAA,CACP,EACAwB,EAACqH,GAAA,CACC,KAAK,uCACL,MAAO7I,EAAE,oBAAoB,EAC7B,UAAWA,EAAE,wBAAwB,EACrC,KAAK,KAAA,CACP,EACAwB,EAACqH,GAAA,CACC,KAAK,kDACL,MAAO7I,EAAE,2BAA2B,EACpC,UAAWA,EAAE,+BAA+B,EAC5C,KAAK,KAAA,CACP,IAEC6E,GACC,CAAA,SAAA,CAACrD,EAAAsD,EAAA,CAAO,QAAQ,WAAW,QAAShB,EAAM,cAAY,gBACnD,SAAE9D,EAAA,MAAM,CACX,CAAA,EACAwB,EAACsD,EAAO,CAAA,QAAQ,OAAO,QAASf,EAAO,cAAY,kBAChD,SAAE/D,EAAA,QAAQ,CACb,CAAA,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,EChEa4L,GAAkC,CAAC,CAC9C,KAAA9H,EACA,MAAAC,EACA,mBAAAC,CACF,IAA4C,CACpC,KAAA,CAAE,GAAM/D,IACR,CAAE,QAAAoD,GAAYC,KAElB,OAAAzB,EAACyC,GAAA,CACC,KAAK,iBACL,kBAAmBN,EACnB,aAAY,GAEZ,SAAA,CAAAxC,EAACQ,EAAA,CACC,MAAO,EAAE,+CAA+C,EACxD,QAAQ,gDACR,gBAAe,GACf,UACER,EAACS,EAAA,CACC,SAAU,EAAE,mDAAmD,EAC/D,aAAa,+CAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,qDACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,GAAG,uDACH,MAAO,EAAE,IAAI,EACb,SAAU,EAAE,KAAK,EACjB,UAAWhB,EAAM,QAAU,OAC3B,SAAWnB,GAAUmB,EAAM,SAASnB,EAAM,UAAU,EACpD,aAAY,EAAE,+CAA+C,CAAA,CAC/D,CAAA,CAEJ,CAAA,CACF,EACAd,EAACQ,EAAA,CACC,MAAO,EAAE,yCAAyC,EAClD,QAAQ,0CACR,gBAAe,GACf,UACER,EAACS,EAAA,CACC,SAAU,EAAE,6CAA6C,EACzD,aAAa,yCAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,8CACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,GAAG,iDACH,MAAO,EAAE,IAAI,EACb,SAAU,EAAE,KAAK,EACjB,UAAWhB,EAAM,QAAU,OAC3B,SAAWnB,GAAUmB,EAAM,SAASnB,EAAM,UAAU,EACpD,aAAY,EAAE,yCAAyC,CAAA,CACzD,CAAA,CAEJ,CAAA,CACF,EACAd,EAACQ,EAAA,CACC,MAAO,EAAE,kBAAkB,EAC3B,QAAQ,mBACR,gBAAe,GACf,UACER,EAACS,EAAA,CACC,SAAU,EAAE,sBAAsB,EAClC,aAAa,kBAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,+BACF,EACA,aAAa,OACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,GAAG,mBACH,MAAO,EAAE,IAAI,EACb,SAAU,EAAE,KAAK,EACjB,UAAWhB,EAAM,QAAU,OAC3B,SAAWnB,GAAUmB,EAAM,SAASnB,EAAM,UAAU,EACpD,aAAY,EAAE,kBAAkB,CAAA,CAClC,CAAA,CAEJ,CAAA,CACF,EACAd,EAACQ,EAAA,CACC,MAAO,EAAE,0CAA0C,EACnD,QAAQ,2CACR,gBAAe,GACf,UACER,EAACS,EAAA,CACC,SAAU,EAAE,8CAA8C,EAC1D,aAAa,0CAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,iDACF,EACA,aAAa,QACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,GAAG,2CACH,MAAO,EAAE,IAAI,EACb,SAAU,EAAE,KAAK,EACjB,UAAWhB,EAAM,QAAU,OAC3B,SAAWnB,GAAUmB,EAAM,SAASnB,EAAM,UAAU,EACpD,aAAY,EAAE,0CAA0C,CAAA,CAC1D,CAAA,CAEJ,CAAA,CACF,EACAd,EAACQ,EAAA,CACC,MAAO,EAAE,wBAAwB,EACjC,QAAQ,yBACR,gBAAe,GACf,UACER,EAACS,EAAA,CACC,SAAU,EAAE,4BAA4B,EACxC,aAAa,wBAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,kDACF,EACA,aAAa,QACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,GAAG,yBACH,MAAO,EAAE,IAAI,EACb,SAAU,EAAE,KAAK,EACjB,UAAWhB,EAAM,QAAU,OAC3B,SAAWnB,GAAUmB,EAAM,SAASnB,EAAM,UAAU,EACpD,aAAY,EAAE,wBAAwB,CAAA,CACxC,CAAA,CAEJ,CAAA,CACF,IACCuC,GACC,CAAA,SAAA,CAAArD,EAACsD,EAAA,CACC,QAAQ,YACR,QAAShB,EACT,cAAY,wBAEX,WAAE,MAAM,CAAA,CACX,EACAtC,EAACsD,EAAA,CACC,QAAQ,OACR,QAASf,EACT,cAAY,0BAEX,WAAE,QAAQ,CAAA,CACb,CAAA,EACF,CAAA,CAAA,CAAA,CAGN,ECxKa8H,GAAkB,CAAC,CAC9B,KAAA/H,EACA,OAAQ,CAAE,GAAApE,EAAI,SAAAoM,EAAU,OAAA7E,CAAO,CACjC,IAAqB,CACnB,MAAM8E,EAAsB,YACtBC,EAA0BC,KAE1B,CAAE,EAAAjM,GAAMC,IACR,CAAE,MAAAH,GAAUC,KACZ,CAAE,SAAAsG,GAAaE,KACfW,EAAaC,KAEb,CAAE,UAAA+E,EAAW,SAAAC,EAAU,SAAAnG,GAAa1C,GAAe,EAEnD8I,EAAe,CAACC,EAAcC,IAAuB,CACzDH,EAASJ,EAAqBM,CAAI,EAC7BvI,EAAA,CAAE,WAAAwI,EAAY,CAAA,EAGrB/K,GAAU,IAAM,CACdyE,EAAS+F,CAAmB,CAAA,EAC3B,CAAC/F,CAAQ,CAAC,EAEb,MAAMuG,EAAoB,IAAM,CACxB,MAAAC,EAAON,EAAUH,CAAmB,EAC1C,OAAIS,EAAO,EACFtF,EAAW,IAAI,KAAKsF,EAAO,GAAI,EAAG9D,EAAoB,EAEtD1I,EAAE,MAAM,CACjB,EAGIyM,EAAO,SAAY,CACvB,MAAMzE,EAAS,MAAM5G,EAAY,QAAQ,eAAe,CACtD,GAAA1B,CAAA,CACD,EACWuI,GAAAD,EAAQ,gBAAiB3B,EAAUrG,CAAC,CAAA,EAGlD,OAEI6B,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACkL,IAAK,UAAU,aACd,SAAC7K,EAAA8K,GAAA,CAAM,QAAQ,iBAAiB,SAAA,CAAA,6CAE7BnL,EAAAoL,GAAA,CAAK,GAAIC,GAAS,CAAE,MAAA/M,EAAO,SAAUJ,EAAK,IAAK,UAAW,CAAC,EACzD,SAAAM,EAAE,UAAU,EACf,EAAO,KAAA,CAAA,CAET,CACF,CAAA,EACA6B,EAACyC,GAAA,CACC,KAAK,iBACL,kBAAmB2C,GAAQ,UAC3B,aAAY,GAEZ,SAAA,CAAAzF,EAACQ,EAAA,CACC,MAAOhC,EAAE,WAAW,EACpB,QAAQ,gBACR,YACGiC,EAAS,CAAA,SAAUjC,EAAE,eAAe,EAAG,aAAa,YAAY,EAGnE,WAAC8M,GACC,CAAA,SAAA,CAAAtL,EAACsF,GAAA,CACC,KAAK,OACL,GAAG,gBACH,KAAK,YACL,WAAU,GACV,MAAOyF,EAAkB,CAAA,CAC3B,EACA/K,EAACsD,EAAA,CACC,GAAG,WACH,QAAQ,UACR,QAAS,IAAM,CACbsH,EAAa,KAAK,IAAQ,EAAA,IAAM,mBAAmB,CACrD,EAEC,WAAE,UAAU,CAAA,CACf,EACA5K,EAACsD,EAAA,CACC,GAAG,QACH,QAAQ,UACR,QAAS,IAAM,CACbsH,EAAa,EAAG,mBAAmB,CACrC,EAEC,WAAE,OAAO,CAAA,CACZ,CAAA,EACF,CAAA,CACF,IACCvH,GACE,CAAA,SAAA,CAAA,CAACiH,GACAtK,EAACuL,GAAA,CACC,UAAWf,EACX,QAAShM,EAAE,kBAAkB,CAAA,CAC/B,EAEFwB,EAACsD,EAAA,CACC,GAAG,OACH,QAAQ,YACR,QAAS2H,EACT,eAAgB,CAACX,EACjB,IAAKE,EAEJ,WAAE,MAAM,CAAA,CACX,CAAA,EACF,CAAA,CAAA,CACF,CACF,CAAA,CAAA,CAEJ,ECnHa/D,GAAc,CACzBD,EACAgF,EACA3G,EACA,IACG,CACG,MAAA4G,EAAejF,EAAO,iBAAiB,QAAU,EACjDkF,EAAclF,EAAO,gBAAgB,QAAU,EAEjDiF,IAAiB,GAAKC,IAAgB,EACxC7G,EAAS,EAAE,eAAe,EAAGK,EAAa,OAAO,EACxCwG,EAAc,GACvB7G,EACE,EAAE2G,EAAY,UAAW,CAAE,aAAchF,EAAO,gBAAiB,EACjEtB,EAAa,OAAA,EAEfL,EACE,EAAE2G,EAAY,OAAQ,CAAE,YAAahF,EAAO,eAAgB,EAC5DtB,EAAa,MAAA,GAGfL,EACE,EAAE2G,EAAY,UAAW,CAAE,aAAchF,EAAO,gBAAiB,EACjEtB,EAAa,OAAA,CAGnB,EAOayG,GAAc,CAAC,CAAE,KAAArJ,EAAM,OAAAsJ,KAA4B,CACxD,KAAA,CAAE,EAAApN,GAAMC,IACRoN,EAAgB,iBAEhB,CAAE,SAAAlB,GAAa7I,KACf,CACJ,aAAAgK,EACA,WAAAC,EACA,SAAA1N,EACA,mCAAA2N,CACE,EAAAJ,EAEEK,EAAeC,GAAoB,CACvC,UAAW7K,KAAQ6K,EACjBvB,EACE5H,EAAuC,cAAc1B,CAAI,EAAE,EAC3D0K,IAAa1K,CAAI,GAAK,EAAA,CAE1B,EAGF,OACGrB,EAAAmM,GAAA,CAAY,QAAQ,QAAQ,UAAU,YACrC,SAAAnM,EAACoM,GAAA,CACC,MAAO5N,EAAE,eAAe,EACxB,SAAU,CACR,CACE,MAAOA,EAAE,YAAY,EACrB,SAAUH,IAAawN,EACvB,MAAO7L,EAACqK,GAAgB,CAAA,OAAAuB,EAAgB,KAAAtJ,CAAY,CAAA,CACtD,EACA,CACE,MAAO9D,EAAE,YAAY,EACrB,SAAU,CAACsN,EACX,MAAO9L,EAACuF,GAAgB,CAAA,OAAAqG,EAAgB,KAAAtJ,CAAY,CAAA,CACtD,EACA,CACE,MAAO9D,EAAE,qCAAqC,EAC9C,SAAUH,IAAawN,EACvB,MAEIxL,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACkL,GAAK,CAAA,UAAU,aACb,SAAA1M,EAAE,yCAAyC,EAC9C,EACAwB,EAACsH,GAAA,CACC,KAAAhF,EACA,MAAO,IAAM,CACC2J,EAAA,CACV,UACA,YACA,SACA,mCACA,+BACA,kCACA,kCACA,mCACA,mCACA,mCACA,+BACA,gCACA,gCACA,0BACA,eACA,oCACA,uCACA,sCAAA,CACD,CACH,CAAA,CACF,CAAA,EACF,CAEJ,EACA,CACE,MAAOzN,EAAE,iCAAiC,EAC1C,SAAUH,IAAawN,EACvB,MAEIxL,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACkL,GAAK,CAAA,UAAU,aACb,SAAA1M,EAAE,qCAAqC,EAC1C,EACAwB,EAACoK,GAAA,CACC,KAAM,IAAM9H,EAAK,EACjB,MAAO,IACL2J,EAAY,CACV,2CACA,qBACA,uCACA,uCAAA,CACD,CAAA,CAEL,CAAA,EACF,CAEJ,EACA,CACE,MAAOzN,EAAE,6BAA6B,EACtC,SAAUH,IAAawN,EACvB,MAEIxL,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACkL,GAAK,CAAA,UAAU,aACb,SAAA1M,EAAE,iCAAiC,EACtC,EACAwB,EAACmK,GAAA,CACC,KAAM,IAAM7H,EAAK,EACjB,MAAO,IACL2J,EAAY,CACV,UACA,YACA,SACA,mCACA,uCACA,sCACA,0CACA,0CACA,4BACA,sCAAA,CACD,CAAA,CAEL,CAAA,EACF,CAEJ,EACA,CACE,MAAOzN,EAAE,kBAAkB,EAC3B,MAEI6B,EAAA2C,EAAA,CAAA,SAAA,CAAChD,EAAAkL,GAAA,CAAK,UAAU,aACb,SAAA1M,EAAE,mBAAqB6N,GAAYhO,GAAY,EAAE,CAAC,CACrD,CAAA,EACA2B,EAACqC,GAAA,CACC,SAAAhE,EACA,KAAM,IAAMiE,EAAK,EACjB,MAAO,IAAM,CACC2J,EAAA,CACV,0BACA,wBACA,6CACA,4BAAA,CACD,CACH,CAAA,CACF,CAAA,EACF,CAEJ,EACA,CACE,MAAOzN,EAAE,yBAAyB,EAClC,MAEI6B,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACkL,GAAK,CAAA,UAAU,aACb,SAAA1M,EAAE,6BAA6B,EAClC,EACAwB,EAACuD,GAAA,CACC,SAAAlF,EACA,KAAM,IAAMiE,EAAK,EACjB,MAAO,IAAM,CACXqI,EACE,6CACAqB,GAAoC,OAAA,EAEtCrB,EACE,kDACAqB,GAAoC,YAAA,CAExC,CAAA,CACF,CAAA,EACF,CAEJ,CACF,EACA,QAAO,EAAA,CAEX,CAAA,CAAA,CAEJ,ECpNaM,GAAiB,CAAC,CAAE,OAAAV,KAAkC,CAC3D,KAAA,CAAE,EAAApN,GAAMC,IA6Bd,OACGuB,EAAAmM,GAAA,CAAY,QAAQ,QAAQ,UAAU,WACrC,SAAAnM,EAACuM,GAAA,CACC,OA9BoD,MACxDC,EACAC,IACG,CACG,MAAAC,EACHC,GAAkBC,GACjBA,EAAS,IAAKC,IAAa,CACzB,KAAAF,EACA,GAAGE,CACH,EAAA,EAeN,OAboB,MAAM,QAAQ,IAAI,CACpCjN,EAAY,QACT,aAAa,CAAE,GAAIgM,EAAO,GAAK,MAAAY,EAAO,IAAAC,CAAK,CAAA,EAC3C,KAAKC,EAAkBlO,EAAE,yBAAyB,CAAC,CAAC,EACvDoB,EAAY,QACT,oBAAoB,CACnB,GAAIgM,EAAO,GACX,MAAAY,EACA,IAAAC,CACD,CAAA,EACA,KAAKC,EAAkBlO,EAAE,sBAAsB,CAAC,CAAC,CAAA,CACrD,GAEkB,MAAK,EAOpB,cAAe,CAAC,SAAS,EACzB,kBAAmBA,EAAE,qBAAqB,CAAA,CAE9C,CAAA,CAAA,CAEJ,ECtCasO,GAAiB,CAAC,CAC7B,OAAAlB,EACA,KAAAtJ,EACA,MAAAC,CACF,IAA2B,CACnB,KAAA,CAAE,GAAM9D,IACR,CAAE,SAAA+F,EAAU,MAAAuI,CAAM,EAAIjL,GAA2B,EAEjD,CAAE,UAAAkL,GAAcC,KAChBC,EAAYF,EAAU,gBAAgB,GAAKpB,EAAO,QAAQ,UAE1DvN,EAAW0O,EAAM,UAAU,EAG/B,OAAA1M,EAACyC,GAAA,CACC,aAAY,GACZ,kBAAmB8I,EAAO,QAAQ,UAClC,KAAK,iBAEJ,SAAA,CAAA,CAACA,EAAO,YAAe5L,EAAAmN,GAAA,CAAc,SAAA9O,CAAoB,CAAA,EACzDA,IAAa,QACZ2B,EAACQ,EAAA,CACC,MAAO,EAAE,UAAU,EACnB,QAAQ,eACR,YACGC,EAAS,CAAA,SAAU,EAAE,cAAc,EAAG,aAAa,WAAW,EAGjE,SAAAT,EAACsF,GAAA,CACC,GAAG,eACH,KAAK,MACJ,GAAGd,EAAS,UAAU,CAAA,CACzB,CAAA,CACF,EAEDoH,EAAO,YACN5L,EAACoN,GAAA,CACC,KAAK,WACL,KAAA9K,EACA,MAAAC,EACA,SAAU,CAAC2K,CAAA,CACb,CAAA,CAAA,CAAA,CAIR,ECxCaG,GAAqB,CAAC,CAAE,OAAA5H,KAAmC,CAChE,KAAA,CAAE,EAAAjH,GAAMC,IACR,CAAE,SAAA+F,EAAU,QAAA3C,EAAS,MAAAkL,GAAUjL,GAA2B,EAE1D,CAACwL,EAAgBC,CAAiB,EAAIvO,EAAS,EAAK,EACpDwO,EAAc3O,GAAA,EAAgB,OAAQ,MACtC4O,EAAkBV,EAAM,iBAAiB,EACzCW,EAAiCX,EACrChK,EACE,sCACF,CAAA,EAGF,SACGD,GAAW,CAAA,aAAY,GAAC,kBAAmB2C,EAAQ,KAAK,iBACvD,SAAA,CAAAzF,EAACQ,EAAA,CACC,MAAOhC,EAAE,YAAY,EACrB,YACGiC,EAAS,CAAA,SAAUjC,EAAE,gBAAgB,EAAG,aAAa,aAAa,EAErE,QAAQ,aAER,SAAAwB,EAACgC,EAAA,CACC,KAAK,yBACL,aAAa,GACb,QAAAH,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,aACT,SAAU6M,EACV,SAAU,CAAC1M,EAAGC,IAAU,CAChBmB,EAAA,SAASnB,EAAM,SAAU,CAAA,EAC/ByM,EAAkB,EAAK,CACzB,EACA,WAAYtL,EAAM,OAASzD,EAAE,QAAQ,EACrC,QAASoC,EAAc,OACvB,aAAYpC,EAAE,YAAY,EAC1B,OAAQ8O,EAEP,SAAA,GACEtM,EAAyB,CAAA,MAAM,GAC7B,SAAExC,EAAA,QAAQ,GADK,OAElB,EACA,GAAGgP,EAAY,IAAKG,GAClB3N,EAACgB,EAAA,CACC,SAAU2M,EAAM,OAAS1L,EAAM,MAE/B,MAAO0L,EAAM,IAAA,EADRA,EAAM,IAAA,CAGd,CACH,CAAA,CACF,CAAA,CAEJ,CAAA,CACF,EACA3N,EAACQ,EAAA,CACC,MAAOhC,EAAE,iBAAiB,EAC1B,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,qBAAqB,EACjC,aAAa,iBAAA,CACf,EAEF,QAAQ,aACR,gBAAe,GAEf,SAAAwB,EAACgC,EAAA,CACC,KAAK,kBACL,aAAc,GACd,QAAAH,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,GAAG,oBACH,MAAOzE,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,UAAWyD,EAAM,MACjB,SAAUA,EAAM,SAChB,aAAYzD,EAAE,iBAAiB,CAAA,CACjC,CAAA,CAEJ,CAAA,CACF,EACAwB,EAACQ,EAAA,CACC,MAAOhC,EAAE,iBAAiB,EAC1B,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,qBAAqB,EACjC,aAAa,iBAAA,CACf,EAEF,QAAQ,uBACR,gBAAe,GAEf,SAAAwB,EAACgC,EAAA,CACC,KAAMe,EACJ,sCACF,EACA,aAAc,GACd,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,GAAG,8BACH,MAAOzE,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,UAAWyD,EAAM,QAAU,OAC3B,SAAWnB,GAAUmB,EAAM,SAAS,GAAKnB,CAAK,EAC9C,WAAY,CAAC2M,EACb,aAAYjP,EAAE,iBAAiB,CAAA,CACjC,CAAA,CAEJ,CAAA,CACF,EACAwB,EAACQ,EAAA,CACC,MAAOhC,EAAE,mBAAmB,EAC5B,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,uBAAuB,EACnC,aAAa,mBAAA,CACf,EAEF,QAAQ,yBAER,SAAAwB,EAACiB,GAAA,CACC,GAAG,yBACF,GAAGuD,EACFzB,EACE,gCACF,CACF,EACA,WAAY,EAAE0K,GAAmBC,IAA2B,OAAA,CAC9D,CAAA,CACF,CACF,CAAA,CAAA,CAEJ,EC3IME,GAAc,CAACC,EAAyB1I,KAC1C0I,GAAK,WAAW,UAAU,GAAKA,GAAK,WAAW,SAAS,IACxD,CAACA,EAAI,SAAS,GAAG,GACnBA,IAAQ,IACR1I,EAEW2I,GAAc,CAAC,CAC1B,KAAAxL,EACA,MAAAC,EACA,OAAQ,CAAE,OAAAkD,CAAO,CACnB,IAA2B,CACnB,KAAA,CAAE,GAAMhH,IACR,CACJ,SAAA+F,EACA,QAAA3C,EACA,MAAAkL,EACA,UAAW,CAAE,OAAAgB,CAAO,GAClBjM,GAA2B,EAEzB,CAAE,UAAAkL,GAAcC,KAChBC,EAAYF,EAAU,gBAAgB,GAAKvH,GAAQ,UAEnDpH,EAAW0O,EAAM,UAAU,EAC3BiB,EAAqBjB,EAAM,oBAAoB,EAGnD,OAAA1M,EAACyC,GAAA,CACC,aAAY,GACZ,kBAAmB2C,GAAQ,UAC3B,KAAK,iBAEL,SAAA,CAAAzF,EAACQ,EAAA,CACC,MAAO,EAAE,oBAAoB,EAC7B,UACER,EAACS,EAAA,CACC,SAAU,EAAE,wBAAwB,EACpC,aAAa,oBAAA,CACf,EAEF,QAAQ,wBACR,gBAAe,GAEf,SAAAT,EAACgC,EAAA,CACC,KAAK,qBACL,aAAc,GACd,QAAAH,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,GAAG,+BACH,MAAO,EAAE,IAAI,EACb,SAAU,EAAE,KAAK,EACjB,UAAWhB,EAAM,MACjB,SAAUA,EAAM,SAChB,aAAY,EAAE,oBAAoB,CAAA,CACpC,CAAA,CAEJ,CAAA,CACF,EACC5D,IAAa,kBAAoB2P,GAChChO,EAACQ,EAAA,CACC,MAAO,EAAE,uBAAuB,EAChC,QAAQ,wBACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,2BAA2B,EACvC,aAAa,uBAAA,CACf,EAEF,kBACEsN,EAAO,aAAaE,GAAQ,yBAAyB,CAAC,GAClD,QAEN,UACEF,EAAO,aAAaE,GAAQ,yBAAyB,CAAC,GAAG,QACrDC,GAAiB,MACjBA,GAAiB,QAGvB,SAAAlO,EAACsF,GAAA,CACC,GAAG,wBACH,KAAK,MACJ,GAAGd,EACFzB,EACE,oCACF,EACA,CACE,SAAW8K,GACTD,GAAYC,EAAK,EAAE,wBAAwB,EAAE,UAAU,CAC3D,CACF,EACA,UACEE,EAAO,aAAaE,GAAQ,yBAAyB,CAAC,GAAG,QACrDC,GAAiB,MACjBA,GAAiB,OAAA,CAEzB,CAAA,CACF,EAED7P,IAAa,kBAEVgC,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACQ,EAAA,CACC,MAAO,EAAE,sBAAsB,EAC/B,QAAQ,uBACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,0BAA0B,EACtC,aAAa,sBAAA,CACf,EAEF,kBACEsN,EAAO,aAAaE,GAAQ,wBAAwB,CAAC,GACjD,QAEN,UACEF,EAAO,aAAaE,GAAQ,wBAAwB,CAAC,GAAG,QACpDC,GAAiB,MACjBA,GAAiB,QAGvB,SAAAlO,EAACsF,GAAA,CACC,GAAG,uBACH,KAAK,MACJ,GAAGd,EACFzB,EACE,mCACF,EACA,CACE,SAAW8K,GACTD,GAAYC,EAAK,EAAE,uBAAuB,EAAE,UAAU,CAC1D,CACF,EACA,UACEE,EAAO,aAAaE,GAAQ,wBAAwB,CAAC,GAAG,QACpDC,GAAiB,MACjBA,GAAiB,OAAA,CAEzB,CAAA,CACF,EACAlO,EAACQ,EAAA,CACC,MAAO,EAAE,kCAAkC,EAC3C,UACER,EAACS,EAAA,CACC,SAAU,EAAE,sCAAsC,EAClD,aAAa,kCAAA,CACf,EAEF,QAAQ,mCACR,gBAAe,GAEf,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,gDACF,EACA,aAAa,OACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,GAAG,mCACH,MAAO,EAAE,IAAI,EACb,SAAU,EAAE,KAAK,EACjB,UAAWhB,EAAM,QAAU,OAC3B,SAAWnB,GAAUmB,EAAM,SAASnB,EAAM,UAAU,EACpD,aAAY,EAAE,kCAAkC,CAAA,CAClD,CAAA,CAEJ,CAAA,CACF,EACAd,EAACQ,EAAA,CACC,MAAO,EAAE,wCAAwC,EACjD,UACER,EAACS,EAAA,CACC,SAAU,EAAE,4CAA4C,EACxD,aAAa,wCAAA,CACf,EAEF,QAAQ,yCACR,gBAAe,GAEf,SAAAT,EAACgC,EAAA,CACC,KAAMe,EACJ,qDACF,EACA,aAAa,QACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,GAAG,yCACH,MAAO,EAAE,IAAI,EACb,SAAU,EAAE,KAAK,EACjB,UAAWhB,EAAM,QAAU,OAC3B,SAAWnB,GAAUmB,EAAM,SAASnB,EAAM,UAAU,EACpD,aAAY,EAAE,wCAAwC,CAAA,CACxD,CAAA,CAEJ,CAAA,CACF,CAAA,EACF,EAEFd,EAACoN,GAAA,CACC,KAAK,WACL,KAAA9K,EACA,MAAAC,EACA,SAAU2K,CAAA,CACZ,CAAA,CAAA,CAAA,CAGN,ECvMaiB,GAAS,CAAC,CAAE,KAAA9M,EAAM,MAAA+M,KAAyB,CAChD,KAAA,CAAE,EAAA5P,GAAMC,IACR,CAAE,QAAAoD,GAAYC,KAGlB,OAAA9B,EAACQ,EAAA,CACC,gBAAe,GACf,MAAOhC,EAAE4P,CAAK,EACd,QAASA,EACT,UAAYpO,EAAAS,EAAA,CAAS,SAAUjC,EAAE,GAAG4P,CAAK,MAAM,EAAG,aAAcA,CAAO,CAAA,EAEvE,SAAApO,EAACgC,EAAA,CACC,KAAAX,EACA,aAAa,QACb,QAAAQ,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,GAAI5B,EACJ,cAAa+M,EACb,MAAO5P,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,UAAWyD,EAAM,QAAU,OAC3B,SAAWnB,GAAUmB,EAAM,SAASnB,EAAM,UAAU,EACpD,aAAYtC,EAAE4P,CAAK,CAAA,CACrB,CAAA,CAEJ,CAAA,CAAA,CAGN,EAEaC,GAAa,IAAM,CACxB,KAAA,CAAE,EAAA7P,GAAMC,IACR,CAAE,QAAAoD,GAAYC,KAEd,CAACwM,EAAgBC,CAAiB,EAAIvP,EAAS,EAAK,EAExD,OAAAqB,EAACyC,GAAA,CACC,aAAY,GACZ,KAAK,iBACL,UAAU,oCAEV,SAAA,CAAA9C,EAACQ,EAAA,CACC,MAAOhC,EAAE,cAAc,EACvB,QAAQ,eACR,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,kBAAkB,EAC9B,aAAa,cAAA,CACf,EAGF,SAAAwB,EAACgC,EAAA,CACC,KAAK,iCACL,aAAa,WACb,QAAAH,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,mBACT,SAAU6N,EACV,SAAU,CAAC1N,EAAGC,IAAU,CAChBmB,EAAA,SAASnB,EAAM,SAAU,CAAA,EAC/ByN,EAAkB,EAAK,CACzB,EACA,WAAYtM,EAAM,MAClB,QAASrB,EAAc,OACvB,aAAYpC,EAAE,cAAc,EAC5B,OAAQ8P,EAEP,SAAA,CAAC,WAAY,QAAS,YAAa,YAAY,EAAE,IAAKjN,GACrDrB,EAACgB,EAAA,CACC,SAAUK,IAASY,EAAM,MAEzB,MAAOZ,CAAA,EADFA,CAAA,CAGR,CAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACArB,EAACmO,GAAA,CACC,KAAK,uCACL,MAAM,mBAAA,CACR,EACAnO,EAACmO,GAAA,CACC,KAAMpL,EAA2B,oCAAoC,EACrE,MAAM,kBAAA,CACR,EACA/C,EAACmO,GAAA,CACC,KAAMpL,EAA2B,kCAAkC,EACnE,MAAM,sBAAA,CACR,EACA/C,EAACmO,GAAA,CACC,KAAMpL,EAA2B,gCAAgC,EACjE,MAAM,uBAAA,CACR,EACA/C,EAACmO,GAAA,CACC,KAAMpL,EACJ,sCACF,EACA,MAAM,4BAAA,CACR,EACA/C,EAACmO,GAAA,CACC,KAAMpL,EACJ,8CACF,EACA,MAAM,gBAAA,CACR,EACA/C,EAACmO,GAAA,CACC,KAAMpL,EAA2B,gCAAgC,EACjE,MAAM,cAAA,CACR,CAAA,CAAA,CAAA,CAGN,ECtHMyL,GAAuB,CAC3B,WACA,aACA,kBACA,aACA,kBACA,UACF,EAEMC,GAAsB,CAAC,OAAQ,SAAU,cAAc,EAEvDC,GAAmB,CACvB,CAAE,KAAM,YAAa,MAAO,yCAA0C,EACtE,CACE,KAAM,0BACN,MAAO,qDACT,EACA,CACE,KAAM,YACN,MAAO,iDACT,EACA,CACE,KAAM,0BACN,MAAO,8DACT,CACF,EAEaC,GAAgB,IAAM,CAC3B,KAAA,CAAE,EAAAnQ,GAAMC,IACR,CAACmQ,EAASC,CAAU,EAAI7P,EAAS,EAAK,EACtC,CAAC8P,EAASC,CAAU,EAAI/P,EAAS,EAAK,EACtC,CAACgQ,EAASC,CAAU,EAAIjQ,EAAS,EAAK,EAEtC,CAAE,QAAA6C,EAAS,MAAAkL,CAAM,EAAIjL,GAA2B,EAEhDoN,EAAWnC,EACfhK,EAAuC,kCAAkC,CAAA,EAErEoM,EAAgBpC,EACpBhK,EACE,qCACF,CAAA,EAIA,OAAA1C,EAACyC,GAAA,CACC,aAAY,GACZ,KAAK,iBACL,UAAU,oCAEV,SAAA,CAAA9C,EAACmO,GAAA,CACC,KAAMpL,EAA2B,kCAAkC,EACnE,MAAM,eAAA,CACR,EACA/C,EAACmO,GAAA,CACC,KAAMpL,EAA2B,qCAAqC,EACtE,MAAM,gBAAA,CACR,GACEmM,IAAa,QAAUC,IAAkB,SAEvC9O,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACQ,EAAA,CACC,MAAOhC,EAAE,oBAAoB,EAC7B,QAAQ,qBACR,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,wBAAwB,EACpC,aAAa,oBAAA,CACf,EAGF,SAAAwB,EAACgC,EAAA,CACC,KAAMe,EACJ,qCACF,EACA,aAAcyL,GAAqB,CAAC,EACpC,QAAA3M,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,qBACT,SAAUmO,EACV,SAAU,CAAChO,EAAGC,IAAU,CAChBmB,EAAA,SAASnB,EAAM,SAAU,CAAA,EAC/B+N,EAAW,EAAK,CAClB,EACA,WAAY5M,EAAM,MAClB,QAASrB,EAAc,OACvB,aAAYpC,EAAE,oBAAoB,EAClC,OAAQoQ,EAEP,SAAAJ,GAAqB,IAAKY,GACzBpP,EAACgB,EAAA,CACC,SAAUoO,IAAcnN,EAAM,MAE9B,MAAOmN,CAAA,EADFA,CAAA,CAGR,CAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACApP,EAACQ,EAAA,CACC,MAAOhC,EAAE,kBAAkB,EAC3B,QAAQ,mBACR,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,sBAAsB,EAClC,aAAa,kBAAA,CACf,EAGF,SAAAwB,EAACgC,EAAA,CACC,KAAMe,EACJ,0EACF,EACA,aAAc0L,GAAoB,CAAC,EACnC,QAAA5M,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,mBACT,SAAUqO,EACV,SAAU,CAAClO,EAAGC,IAAU,CAChBmB,EAAA,SAASnB,EAAM,SAAU,CAAA,EAC/BiO,EAAW,EAAK,CAClB,EACA,WAAY9M,EAAM,MAClB,QAASrB,EAAc,OACvB,aAAYpC,EAAE,kBAAkB,EAChC,OAAQsQ,EAEP,SAAAL,GAAoB,IAAKrI,GACxBpG,EAACgB,EAAA,CACC,SAAUoF,IAAQnE,EAAM,MAExB,MAAOmE,CAAA,EADFA,CAAA,CAGR,CAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACApG,EAACQ,EAAA,CACC,MAAOhC,EAAE,kBAAkB,EAC3B,QAAQ,mBACR,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,sBAAsB,EAClC,aAAa,kBAAA,CACf,EAGF,SAAAwB,EAACgC,EAAA,CACC,KAAK,oDACL,aAAc0M,GAAiB,CAAC,EAAE,MAClC,QAAA7M,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,mBACT,SAAUuO,EACV,SAAU,CAACpO,EAAGC,IAAU,CAChBmB,EAAA,SAASnB,EAAM,SAAU,CAAA,EAC/BmO,EAAW,EAAK,CAClB,EACA,WACEP,GAAiB,KAAMW,GAAQA,EAAI,QAAUpN,EAAM,KAAK,GACpD,KAEN,QAASrB,EAAc,OACvB,aAAYpC,EAAE,kBAAkB,EAChC,OAAQwQ,EAEP,SAAAN,GAAiB,IAAKW,GACrBrP,EAACgB,EAAA,CACC,SAAUqO,EAAI,QAAUpN,EAAM,MAE9B,MAAOoN,EAAI,MAEV,SAAIA,EAAA,IAAA,EAHAA,EAAI,IAAA,CAKZ,CAAA,CACH,CAAA,CAEJ,CAAA,CACF,CAAA,EACF,CAAA,CAAA,CAAA,CAIR,ECvLaC,GAAkBlS,GAA+B,CACtD,KAAA,CAAE,EAAAoB,GAAMC,IAER,CAAE,MAAAsO,GAAUjL,KACZzD,EAAW0O,EAAM,UAAU,EAE3B,CAAE,OAAAnB,CAAW,EAAAxO,EAGjB,OAAA4C,EAACoM,GAAA,CACC,MAAO5N,EAAE,eAAe,EACxB,UAAU,wBACV,SAAU,CACR,CACE,MAAOA,EAAE,iBAAiB,EAC1B,MACEwB,EAACI,GAAK,CAAA,aAAY,GAChB,SAAAJ,EAACuP,GAAA,CACC,SAAU3D,EAAO,SACjB,mBAAoBA,EAAO,QAAQ,SAAA,CAAA,EAEvC,CAEJ,EACA,CACE,MAAOpN,EAAE,gBAAgB,EACzB,MAAOwB,EAAC8M,GAAgB,CAAA,GAAG1P,CAAO,CAAA,CACpC,EACA,CACE,MAAOoB,EAAE,sBAAsB,EAC/B,SAAUH,IAAa,QAAUuN,EAAO,WACxC,QAAQyC,GAAW,EAAA,CACrB,EACA,CACE,MAAO7P,EAAE,wBAAwB,EACjC,SAAUH,IAAa,QAAUuN,EAAO,WACxC,QAAQ+C,GAAc,EAAA,CACxB,EACA,CACE,MAAOnQ,EAAE,kBAAkB,EAC3B,SAAUH,IAAa,kBAAoBuN,EAAO,WAClD,QAAQ4D,GAAiB,EAAA,CAC3B,EACA,CACE,MAAOhR,EAAE,eAAe,EACxB,SAAUoN,EAAO,WACjB,MAAQ5L,EAAAqN,GAAA,CAAmB,OAAQzB,EAAO,QAAQ,UAAW,CAC/D,EACA,CACE,MAAOpN,EAAE,gBAAgB,EACzB,SAAUoN,EAAO,WACjB,MAAO5L,EAAC8N,GAAa,CAAA,GAAG1Q,CAAO,CAAA,CACjC,CACF,CAAA,CAAA,CAGN,EC3BMqS,GAAa,CAAC,CAClB,KAAApO,EACA,SAAAqO,EACA,UAAAC,EACA,iBAAAC,EACA,UAAAC,CACF,IAAuB,CACf,KAAA,CAAE,EAAArR,GAAMC,IACR,CAAE,QAAAoD,EAAS,SAAA2C,EAAU,UAAAkG,GAAc5I,GAAe,EAClD,CAACgO,EAAkBC,CAAmB,EAAI/Q,EAAS,CAAC,EAAK,CAAC,EAE1DgR,EAAoB,CAACN,EAAkBvR,IAAkB,CACvD,MAAA8R,EAAM,CAAC,GAAGH,CAAgB,EAChCG,EAAIP,CAAQ,EAAIvR,EAChB4R,EAAoBE,CAAG,CAAA,EAGnBC,EAAkB5Q,GAAQ,IAAM,CACpC,IAAI6Q,EAAsC,CAAA,EAE1C,OAAIP,IACFO,EAASC,GAAyB,KAC/BC,GAASA,EAAK,MAAQ3F,IAAY,UAAUgF,CAAQ,GAAG,GACvD,GAAA,QAGES,CAAA,EACN,CAACzF,CAAS,CAAC,EAER4F,EAAyB,IAAM,CACnC,MAAMC,EAAcV,GAAW,KAC5BW,GAAaA,EAAS,OAAS9F,IAAY,YAAYgF,CAAQ,GAAG,GAClE,GAAA,OAEC,GAAAQ,GAAiB,QAAU,CAACL,EAC9B,OAAOK,EAAgB,IAAKG,GACzBrQ,EAAAgB,EAAA,CAA4B,MAAOqP,EAAK,IACtC,SAAAA,EAAK,IADW,EAAAA,EAAK,GAExB,CACD,EACH,GAAWE,GAAa,OACtB,OAAOA,EAAY,IAAKE,GACrBzQ,EAAAgB,EAAA,CAA8B,MAAOyP,EAAM,KACzC,SAAAA,EAAM,IADU,EAAAA,EAAM,IAEzB,CACD,CACH,EAGIC,EAAuBC,GAC3BC,GAAUD,CAAa,EAAE,QAAQ,MAAO,EAAE,EAE5C,OACG3Q,EAAA6Q,EAAA,CACE,SAAahB,GAAAK,GAAiB,OAC7BlQ,EAACgC,EAAA,CACC,KAAM,GAAGX,CAAI,IAAIqO,CAAQ,SACzB,aAAc,CAAC,EACf,QAAA7N,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAU,GAAGiP,EAAU,EAAE,SACzB,UAAU,gCACV,KAAM,GAAGtO,CAAI,IAAIqO,CAAQ,SACzB,eAAgB,CACd,SAAU,EACV,aAAclR,EAAE,MAAM,EACtB,cAAeA,EAAE,eAAe,CAClC,EACA,SAAWL,GAAS6R,EAAkBN,EAAUvR,CAAI,EACpD,OAAQ2R,EAAiBJ,CAAQ,EACjC,QAAS9O,EAAc,UACvB,mBAAoBpC,EAAE,kBAAkB,EACxC,gBAAiBA,EAAE,kBAAkB,EACrC,WAAYyD,EAAM,MAClB,SAAU,CAACpB,EAAGqC,IAAM,CAClBjB,EAAM,SAASiB,CAAC,EAEhB8M,EAAkBN,EAAU,EAAK,CACnC,EAEC,SAAuBY,EAAA,CAAA,CAC1B,CAAA,CAAA,EAIJtQ,EAACsF,GAAA,CACC,GAAI,GAAGoL,EAAoBf,EAAU,GAAG,CAAC,SACzC,UAAU,cACV,aAAcA,EAAU,MACxB,cAAY,wBACZ,aAAYnR,EAAE,OAAO,EACpB,GAAGgG,EAAS,GAAGnD,CAAI,IAAIqO,CAAQ,QAAQ,CAAA,CAG9C,CAAA,CAAA,CAEJ,EAEaoB,GAAyB,CAAC,CACrC,KAAAzP,EACA,iBAAAuO,EACA,UAAAC,CACF,IAA2B,CACnB,KAAA,CAAE,GAAMpR,IACR,CAAE,QAAAoD,EAAS,MAAAkL,CAAM,EAAIjL,GAAe,EACpC,CAAE,OAAAiP,EAAQ,OAAAC,EAAQ,OAAAC,CAAA,EAAWC,GAAc,CAC/C,QAAArP,EACA,KAAAR,CAAA,CACD,EAEK,CAAC8P,EAAgBC,CAAiB,EAAIpS,EAAS,CAAC,EAAK,CAAC,EACtDqS,EAAkB,CAAC3B,EAAkBvR,IAAkB,CACrD,MAAA8R,EAAM,CAAC,GAAGkB,CAAc,EAC9BlB,EAAIP,CAAQ,EAAIvR,EAChBiT,EAAkBnB,CAAG,CAAA,EAGvBlQ,GAAU,IAAM,CACTgR,EAAO,QACHC,EAAA,CAAE,IAAK,GAAI,MAAO,IAAM,CAAE,YAAa,EAAA,CAAO,CACvD,EACC,CAACD,CAAM,CAAC,EAEL,MAAAO,EAAiBvE,EAAM,GAAG1L,CAAI,IAAI0P,EAAO,OAAS,CAAC,SAAU,EAAE,EAGnE,OAAA1Q,EAACkR,GAAA,CACC,UAAU,uBACV,aAAW,iCACX,QAAQ,UAER,SAAA,CAACvR,EAAAwR,GAAA,CACC,WAACC,GACC,CAAA,SAAA,CAAAzR,EAAC0R,EAAG,CAAA,MAAO,GAAK,SAAA,EAAE,KAAK,EAAE,IACxBA,EAAG,CAAA,MAAO,GAAK,SAAA,EAAE,OAAO,EAAE,CAAA,CAAA,CAC7B,CACF,CAAA,IACCC,GACE,CAAA,SAAA,CAAAZ,EAAO,IAAI,CAACpB,EAAWD,IACrBrP,EAAAoR,GAAA,CAAsB,cAAY,gBACjC,SAAA,CAAAzR,EAAC6Q,EACC,CAAA,SAAA7Q,EAACgC,EAAA,CACC,KAAM,GAAGX,CAAI,IAAIqO,CAAQ,OACzB,aAAa,GACb,QAAA7N,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAU,GAAGW,CAAI,IAAIqO,CAAQ,OAC7B,UAAU,8BACV,KAAM,GAAGrO,CAAI,IAAIqO,CAAQ,OACzB,SAAWvR,GAASkT,EAAgB3B,EAAUvR,CAAI,EAClD,OAAQgT,EAAezB,CAAQ,EAC/B,QAAS9O,EAAc,UACvB,mBAAoB,EAAE,kBAAkB,EACxC,gBAAiB,EAAE,kBAAkB,EACrC,WAAYqB,EAAM,MAClB,SAAU,CAACpB,EAAGqC,IAAM,CACZjB,EAAA,SAASiB,EAAE,SAAU,CAAA,EAE3BmO,EAAgB3B,EAAU,EAAK,CACjC,EAEC,SAAAE,GAAkB,IAAKD,GACtB3P,EAACgB,EAAA,CACC,SAAU2O,EAAU,OAAS1N,EAAM,MAEnC,MAAO4N,EAAYF,EAAU,KAAOA,EAAU,IAE7C,SAAAA,EAAU,IAAA,EAHNA,EAAU,GAAA,CAKlB,CAAA,CACH,CAAA,CAAA,EAGN,EACA3P,EAACyP,GAAA,CACC,KAAApO,EACA,UAAAsO,EACA,SAAAD,EACA,iBAAAE,EACA,UAAAC,CAAA,CACF,IACCgB,EACC,CAAA,SAAA7Q,EAACsD,EAAA,CACC,GAAI,GAAGjC,CAAI,iBAAiBqO,CAAQ,GACpC,QAAQ,OACR,UAAU,4BACV,QAAS,IAAMuB,EAAOvB,CAAQ,EAC9B,aAAY,EAAE,QAAQ,EAEtB,WAACkC,GAAgB,EAAA,CAAA,CAAA,EAErB,CAAA,GArDOjC,EAAU,EAsDnB,CACD,EACD3P,EAACyR,GACC,CAAA,SAAAzR,EAAC6Q,EACC,CAAA,SAAA7Q,EAACsD,EAAA,CACC,aAAY,EAAE,cAAc,EAC5B,GAAI,GAAGjC,CAAI,aACX,QAAQ,OACR,UAAU,2BACV,QAAS,IAAM,CACb2P,EAAO,CAAE,IAAK,GAAI,MAAO,EAAI,CAAA,EAC7BI,EAAkB,CAAC,GAAGD,EAAgB,EAAK,CAAC,CAC9C,EACA,OAAOU,GAAe,EAAA,EACtB,WAAY,CAACP,EACb,cAAY,oBAEX,WAAE,cAAc,CAAA,GAErB,CACF,CAAA,CAAA,EACF,CAAA,CAAA,CAAA,CAGN,ECxPaQ,GAAyB,CAAC,CACrC,KAAAC,CACF,IAAmC,CAC3B,KAAA,CAAE,EAAAvT,GAAMC,IACR,CAACuT,EAAMC,CAAM,EAAIC,GAAU,EAEjC,OAEI7R,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACsD,EAAA,CACC,cAAY,uBACZ,QAAS2O,EACT,QAAQ,YAEP,WAAE,cAAc,CAAA,CACnB,EACAjS,EAACoF,GAAA,CACC,QAASjF,GAAa,OACtB,OAAQ6R,EACR,aAAYxT,EAAE,UAAU,EACxB,SACG2T,GACC,CAAA,SAAA,CAAAnS,EAACkL,IAAK,UAAWkH,GAAa,GAAK,SAAA5T,EAAE,UAAU,EAAE,EAChDwB,EAAAkL,GAAA,CAAM,SAAE1M,EAAA,qBAAqB,CAAE,CAAA,CAAA,EAClC,EAEF,QAASyT,EACT,QAAS,CACPjS,EAACsD,EAAA,CACC,cAAY,SACZ,GAAG,eAEH,QAAS2O,EAER,WAAE,QAAQ,CAAA,EAHP,QAIN,CACF,EAEA,SAAAjS,EAACiB,IAAiB,SAAQ,GAAC,KAAM,GAAI,MAAOnB,GAAgBiS,CAAI,CAAG,CAAA,CAAA,CACrE,CACF,CAAA,CAAA,CAEJ,EChCaM,GAAwC,CAAC,CACpD,IAAAC,EACA,SAAA5C,EACA,YAAA6C,EACA,SAAA/B,CACF,IAAa,CACX,KAAM,CAAC1K,EAAUC,CAAW,EAAI/G,EAAkB,EAAK,EACjD,CAAE,EAAAR,GAAMC,IACR,CAAE,MAAAH,GAAUC,KACZ,CAAE,SAAAiU,GAAaC,KAGnB,OAAApS,EAACsR,GAAgB,CAAA,WAAY7L,EAC3B,SAAA,CAAAzF,EAACoR,GACC,CAAA,SAAA,CAAAzR,EAAC6Q,EAAA,CACC,OAAQ,CACN,SAAAnB,EACA,WAAY5J,EACZ,SAAU,IAAMC,EAAa2M,GAAS,CAACA,CAAI,CAC7C,CAAA,CACF,IACC7B,EAAG,CAAA,cAAa,eAAeL,EAAS,QAAQ,GAC/C,SAAAxQ,EAACoL,GAAA,CACC,GAAIuH,GAAoB,CACtB,MAAArU,EACA,GAAIkU,EACJ,eAAgBD,EAAY,QAAQ,KACpC,aAAcA,EAAY,QAAQ,EAAA,CACnC,EAEA,WAAY,QAAQ,IAAA,CAAA,EAEzB,EACCvS,EAAA6Q,EAAA,CAAG,GAAI0B,EAAY,QAAQ,YAAA,EACzB,SAAA/T,EAAE+T,EAAY,QAAQ,YAAY,CAAW,CAChD,CAAA,EACAvS,EAAC6Q,EAAI,CAAA,SAAArS,EAAE,GAAG+T,EAAY,QAAQ,kBAAkB,aAAa,EAAE,CAAE,CAAA,EAChEvS,EAAA6Q,EAAA,CACE,SAAY0B,EAAA,SAAWK,GAAe,OACnCpC,EAAS,WAAWd,CAAQ,GAAG,QAAQ,KAAK,IAAI,EAChD,IACN,EACA1P,EAAC6Q,GACE,SAAY0B,EAAA,SAAWK,GAAe,MACvCpC,EAAS,WAAWd,CAAQ,GAAG,QAAQ,OACnCc,EAAS,SAASd,CAAQ,EAAE,QAAQ,KAAK,IAAI,EAC7C,IACN,CAAA,EACF,EACArP,EAACoR,GAAsC,CAAA,WAAY3L,EACjD,SAAA,CAAA9F,EAAC6Q,EAAG,EAAA,IACHA,EAAG,CAAA,QAAS,EACV,SAAA/K,KACE+M,GACC,CAAA,SAAA7S,EAAC8S,GAAA,CACC,aAAY,GACZ,UAAU,4BAEV,SAAA9S,EAACmS,GACC,CAAA,SAAAnS,EAACrC,GACE,CAAA,SAAA4U,EAAY,oBAAoB,IAAKQ,GACpC1S,EAACrC,GACC,CAAA,SAAA,CAAAgC,EAACoL,GAAA,CACC,GAAI4H,GAAgB,CAClB,MAAA1U,EACA,GAAIkU,EACJ,WAAYO,EAAK,QAAQ,KACzB,SAAUA,EAAK,QAAQ,EAAA,CACxB,EAEA,WAAK,QAAQ,IAAA,CAChB,EAECvU,EAAE,gBAAiB,CAClB,OAAQyU,GAAWF,EAAK,MAAgB,CAAA,CACzC,CAde,CAAA,EAAA,eAelB,CACD,CACH,CAAA,EACF,CAAA,GAEJ,CAEJ,CAAA,CAlCO,CAAA,EAAA,SAASvC,EAAS,QAAQ,EAmCnC,CAAA,CAAA,EAxEU8B,CAyEZ,CAEJ,EC7FaY,GAAgC,CAAC,CAC5C,SAAAxD,EACA,SAAAc,EACA,gBAAA2C,CACF,IAAa,CACX,KAAM,CAACrN,EAAUC,CAAW,EAAI/G,EAAkB,EAAK,EACjD,CAAE,EAAAR,GAAMC,IAGZ,OAAA4B,EAACsR,GAAM,CAAA,WAAY7L,EACjB,SAAA,CAAAzF,EAACoR,GACC,CAAA,SAAA,CAAAzR,EAAC6Q,EAAA,CACC,OAAQ,CACN,SAAAnB,EACA,WAAY5J,EACZ,SAAU,IAAMC,EAAa2M,GAAS,CAACA,CAAI,CAC7C,CAAA,CACF,EACA1S,EAAC6Q,GAAG,cAAa,eAAeL,EAAS,QAAQ,GAC9C,SAASA,EAAA,UAAU,IACtB,CAAA,EACCxQ,EAAA6Q,EAAA,CAAG,GAAIL,EAAS,QAAQ,cACtB,SAAEhS,EAAA,GAAGgS,EAAS,QAAQ,YAAa,CAAA,EAAE,EACxC,EACCxQ,EAAA6Q,EAAA,CACE,SAASL,EAAA,eAAe,OACrBA,EAAS,cAAc,IAAKuC,GAASA,EAAK,IAAI,EAC9C,IACN,CAAA,EACF,EACA1S,EAACoR,GAAsC,CAAA,WAAY3L,EACjD,SAAA,CAAA9F,EAAC6Q,EAAG,EAAA,IACHA,EAAG,CAAA,QAAS,EACX,SAAA7Q,EAAC6S,IACE,SACC/M,GAAA9F,EAAC8S,GAAA,CACC,aAAY,GACZ,UAAU,4BAEV,SAACzS,EAAAkR,GAAA,CAAgB,aAAY/S,EAAE,mBAAmB,EAChD,SAAA,CAACwB,EAAAwR,GAAA,CACC,WAACC,GACC,CAAA,SAAA,CAACzR,EAAA0R,EAAA,CAAG,cAAY,MAAO,CAAA,EACtB1R,EAAA0R,EAAA,CAAI,SAAElT,EAAA,YAAY,CAAE,CAAA,EACpBwB,EAAA0R,EAAA,CAAI,SAAElT,EAAA,SAAS,CAAE,CAAA,EACjBwB,EAAA0R,EAAA,CAAI,SAAElT,EAAA,kBAAkB,CAAE,CAAA,EAC1BwB,EAAA0R,EAAA,CAAI,SAAElT,EAAA,eAAe,CAAE,CAAA,EACvBwB,EAAA0R,EAAA,CAAI,SAAElT,EAAA,cAAc,CAAE,CAAA,EACvBwB,EAAC0R,EAAG,CAAA,cAAY,MAAO,CAAA,CAAA,CAAA,CACzB,CACF,CAAA,EACC,OAAO,OAAOyB,EAAgBzD,CAAQ,EAAE,QAAQ,EAAE,IACjD,CAAC6C,EAAaD,IACZtS,EAACqS,GAAA,CAEC,IAAAC,EACA,SAAA5C,EACA,YAAA6C,EACA,SAAA/B,CAAA,EAJK8B,CAKP,CAEJ,CAAA,EACF,CAAA,GAGN,CACF,CAAA,CApCO,CAAA,EAAA,SAAS9B,EAAS,QAAQ,EAqCnC,CACF,CAAA,CAAA,CAEJ,ECpDA,SAAS4C,GACPC,EACAC,EACA,CACA,OAAQA,EAAQ,CACd,IAAK,mBACH,OAAOD,EAAQ,OAAO,CAAC,CAAE,OAAAE,CAAO,IAAMA,IAAW,QAAQ,EAC3D,IAAK,gBACH,OAAOF,EAAQ,OAAO,CAAC,CAAE,OAAAE,CAAO,IAAMA,IAAW,MAAM,EACzD,QACS,OAAAF,CACX,CACF,CAEO,MAAMG,GAAU,CAAC,CAAE,eAAAC,EAAgB,QAAAnN,EAAS,KAAAoN,KAAwB,CACnE,KAAA,CAAE,GAAMjV,IAER,CAACkV,EAAoBC,CAAoB,EAAI1B,GAAU,EAEvD,CAACoB,EAAQO,CAAS,EAAI7U,EAAS,KAAiB,EAChD,CAAC8U,EAAaC,CAAc,EAAI/U,EAAS,EAAE,EAC3C,CAACgV,EAAaC,CAAc,EAAIjV,EAAS,EAAE,EAE3CkV,EAAqB,IAAM,CAC/BH,EAAeC,CAAW,CAAA,EAGtBG,EAAiBC,GAAuC,CACxDA,EAAE,MAAQ,SACOF,GACrB,EAGIG,EAAoB/U,GACxB,IACE8T,GAAcK,EAAe,QAAUH,CAAM,EAAE,OAC7C,CAAC,CAAE,SAAA9C,CAAS,IAAMA,GAAU,MAAM,SAASsD,CAAW,GAAK,EAC7D,EACF,CAACL,EAAe,QAASH,EAAQQ,CAAW,CAAA,EAGxCQ,EAAkBb,EAAe,QAAS,SAAW,EACrDc,EAAiBF,EAAkB,SAAW,EAEpD,SACGlI,GACC,CAAA,SAAA,CAAAnM,EAACwU,GACC,CAAA,SAAAnU,EAACoU,GAAa,CAAA,UAAU,oBACtB,SAAA,CAACzU,EAAAiH,GAAA,CACC,WAACqE,GACC,CAAA,SAAA,CAAAtL,EAAC0U,GAAA,CACC,KAAM,iBACN,GAAI,iBACJ,KAAK,SACL,aAAY,EAAE,QAAQ,EACtB,YAAa,EAAE,QAAQ,EACvB,SAAUT,EACV,UAAWE,CAAA,CACb,EACAnU,EAACsD,EAAA,CACC,QAAS+B,GAAc,QACvB,aAAY,EAAE,QAAQ,EACtB,QAAS,IAAM6O,EAAmB,EAElC,WAACS,GAAW,EAAA,CAAA,CACd,CAAA,CAAA,CACF,CACF,CAAA,IACC1N,GACC,CAAA,SAAA5G,EAACK,EAAA,CACC,MAAO,IACP,cAAY,qBACZ,OAAQiT,EACR,UAAU,wBACV,QAAS/S,EAAc,OACvB,SAAUgT,EACV,SAAU,CAAC/S,EAAGC,IAAU,CACtB+S,EAAU/S,CAAsB,EACX8S,IACbtN,GACV,EACA,WAAYgN,EAEZ,SAAA,CAAAtT,EAACgB,EAAA,CACC,cAAY,qBACZ,MAAO,MACP,cAAa,GAEZ,WAAE,YAAY,CAAA,CACjB,EACAhB,EAACgB,EAAA,CACC,cAAY,uBACZ,MAAO,mBAEN,WAAE,cAAc,CAAA,CACnB,EACAhB,EAACgB,EAAA,CACC,cAAY,qBACZ,MAAO,gBAEN,WAAE,YAAY,CAAA,CACjB,CAAA,CAAA,CAAA,EAEJ,CAAA,CAAA,CACF,CACF,CAAA,EACC,CAACuT,GACAlU,EAACkR,IAAgB,aAAY,EAAE,mBAAmB,EAChD,SAAA,CAACvR,EAAAwR,GAAA,CACC,WAACC,GACC,CAAA,SAAA,CAACzR,EAAA0R,EAAA,CAAG,cAAY,MAAO,CAAA,EACtB1R,EAAA0R,EAAA,CAAI,SAAE,EAAA,UAAU,CAAE,CAAA,EAClB1R,EAAA0R,EAAA,CAAI,SAAE,EAAA,gBAAgB,CAAE,CAAA,EACxB1R,EAAA0R,EAAA,CAAI,SAAE,EAAA,QAAQ,CAAE,CAAA,EACjB1R,EAAC0R,EAAG,CAAA,cAAY,MAAO,CAAA,CAAA,CAAA,CACzB,CACF,CAAA,EACC2C,EAAkB,IAAI,CAAC7D,EAAUd,IAChC1P,EAACkT,GAAA,CAEC,SAAAxD,EACA,SAAAc,EACA,gBAAiBiD,EAAe,OAAA,EAH3B/D,CAAA,CAKR,CAAA,EACH,GAEA6E,GAAkBD,IAEhBjU,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAAC4U,GAAQ,EAAA,EACT5U,EAACmH,GAAA,CACC,gBAAe,GACf,QAAS,EAAE,iBAAiB,EAC5B,aAAc,EAAE,6BAA6B,CAAA,CAC/C,CAAA,EACF,EAEDnH,EAAAI,GAAA,CACC,SAACC,EAAA+M,GAAA,CAAkB,KAAK,gBACtB,SAAA,CAACpN,EAAAsD,EAAA,CAAO,cAAY,qBAAqB,GAAG,WAAW,QAASoQ,EAC7D,SAAE,EAAA,MAAM,CACX,CAAA,EAAU,IACV1T,EAACsD,EAAA,CACC,cAAY,2BACZ,GAAG,iBACH,QAAQ,YACR,QAASgD,EAER,WAAE,YAAY,CAAA,CACjB,EAAU,IACTtG,EAAA8R,GAAA,CAAuB,KAAM2B,EAAe,GAAM,CAAA,CAAA,CAAA,CACrD,CACF,CAAA,CACF,CAAA,CAAA,CAEJ,EC/GaoB,GAAyBzX,GAAiB,CAC/C,KAAA,CAAE,UAAA4P,GAAcC,KAElB,OAACD,EAAU,YAAY,EAIpBhN,EAAC8U,GAA8B,CAAA,GAAG1X,CAAO,CAAA,EAHvC4C,EAAC+U,GAAiB,CAAA,iBAAiB,YAAa,CAAA,CAI3D,EAEMD,GAA+B,CAAC,CAAE,OAAAlJ,KAAoB,CAC1D,MAAMoJ,EAAOpQ,GAA4B,CAAE,KAAM,UAAY,CAAA,EACvD,CACJ,QAAA/C,EACA,SAAA2C,EACA,MAAAjC,EACA,QAAA0S,EACA,UAAW,CAAE,QAAAtQ,EAAS,OAAAoJ,CAAO,CAC3B,EAAAiH,EACE,CAAE,EAAAxW,GAAMC,IACR,CAAE,SAAAqG,GAAaC,KACfzG,EAAQC,KAER,CAAC2W,EAAoBC,CAAqB,EAAInW,EAAS,EAAK,EAE5D,CAACoW,EAAkBC,CAAmB,EAAIrW,EAAS,EAAK,EACxD,CAAC2B,EAAY2U,CAAa,EAAItW,EAAS,EAAK,EAC5C,CAACuW,EAAqBC,CAAsB,EAAIxW,EAAS,EAAK,EAC9D,CAAC6Q,EAAW4F,CAAY,EAAIzW,EAAmC,CAAE,CAAA,EACjE,CAAC0W,EAAQC,CAAS,EAAI3W,EAAgC,CAAE,CAAA,EACxD,CAACyU,EAAgBmC,CAAiB,EACtC5W,EAAmC,EAE/B,CAAC6W,EAAaC,CAAc,EAAI9W,EAA+B,CAAE,CAAA,EAEvES,GACE,IAAMG,EAAY,MAAM,KAAK,EAC5BmW,GAAU,CACTD,EAAeC,CAAK,CACtB,EACA,CAAC,CAAA,EAGHtW,GACE,IACE,QAAQ,IAAI,CACVG,EAAY,QAAQ,cAAc,CAChC,GAAIgM,EAAO,EAAA,CACZ,EACDhM,EAAY,QAAQ,cAAc,CAChC,GAAIgM,EAAO,EAAA,CACZ,CAAA,CACF,EACH,CAAC,CAACiE,EAAW6F,CAAM,IAAM,CACvBD,EAAa5F,CAAS,EACtB8F,EAAUD,CAAM,CAClB,EACA,CAAC,CAAA,EAGH,MAAMM,EAAW,SAAY,CACvB,GAAA,CAAE,MAAMf,IACV,OAEI,MAAAgB,EAAajB,EAAK,YAClBkB,EAAOC,GAAgBF,EAAW,SAA2B,EAC7DG,EAA8B,CAClC,QAASH,EAAW,SAAW,CAAC,EAChC,SAAUA,EAAW,OAAO,GAC5B,OAAQA,EAAW,KAAM,CAAC,EAC1B,UAAWpG,EACR,OAAQW,GAAa,OAAO,KAAK0F,CAAI,EAAE,SAAS1F,EAAS,IAAK,CAAC,EAC/D,IAAK6F,IAAO,CACX,GAAGA,EACH,OAAQA,EAAE,QAAQ,OAAQC,IACxB,OAAO,OAAOJ,CAAI,EACf,QAAShT,IAAMA,EAAC,EAChB,SAASoT,GAAE,IAAK,CACrB,CAAA,EACA,EACJ,aAAc,GACd,QAAS,CACP,WAAY,OAAO,YACjBL,EAAW,QAAQ,WAChB,OAAQlD,GAASA,EAAK,KAAOA,EAAK,QAAU,EAAE,EAC9C,IAAI,CAAC,CAAE,IAAA3M,EAAK,MAAAtF,MAAY,CAACsF,EAAKtF,EAAK,CAAC,CACzC,CACF,CAAA,EAGE,GAAA,CACI,MAAAyV,EAAa,MAAM3W,EAAY,QAAQ,iBAC3C,CAAE,GAAIgM,EAAO,GAAK,MAAOtN,EAAM,KAAM,EACrC8X,CAAA,EAGFR,EAAkBW,CAAU,QACrBpR,EAAO,CACdL,EAAS,gBAAiBK,CAAK,CACjC,CAAA,EAGIqR,EAAOC,GAAS,CAAE,QAAA5U,EAAS,KAAM,OAAQ,aAAc,CAAC,CAAA,CAAG,EAC3DkU,EAAQU,GAAS,CAAE,QAAA5U,EAAS,KAAM,UAAW,aAAc,CAAC,CAAA,CAAG,EAErE,OAAI4R,EAEAzT,EAACwT,GAAA,CACC,eAAAC,EACA,QAASuC,EACT,KAAM,IAAMJ,EAAkB,MAAS,CAAA,CAAA,EAM1C5V,EAAAmM,GAAA,CACC,SAAC9L,EAAAqW,GAAA,CAAc,GAAG1B,EAChB,SAAA,CAAA3U,EAACsW,GACC,CAAA,SAAA,CAAC3W,EAAAvC,GAAA,CACC,WAACmZ,GAAM,CAAA,aAAa,KAAM,SAAEpY,EAAA,qBAAqB,EAAE,CACrD,CAAA,IACCqY,GACC,CAAA,SAAAxW,EAACyC,IAAW,aAAY,GAAC,KAAK,eAC5B,SAAA,CAAA9C,EAAC8W,GAAA,CACC,KAAK,SACL,MAAM,SACN,SAAU,aACV,aAAclL,EAAO,QAAA,CACvB,EACA5L,EAAC+W,GAAA,CACC,KAAK,OACL,MAAM,QACN,SAAUvY,EAAE,YAAY,EACxB,aAAc,CAAC,EACf,QAASoC,EAAc,UACvB,WAAYmV,GAAO,SAAW,CAAA,CAChC,EACA/V,EAACQ,EAAA,CACC,MAAOhC,EAAE,OAAO,EAChB,YACGiC,EAAS,CAAA,SAAUjC,EAAE,WAAW,EAAG,aAAa,QAAQ,EAE3D,QAAQ,YACR,UAAWuP,EAAO,QAAU,QAAU,UACtC,kBAAmBvP,EAAE,UAAU,EAC/B,WAAYgY,EAAK,SAAW,EAE5B,SAAAxW,EAACgC,EAAA,CACC,KAAK,UACL,QAAAH,EACA,aAAc,CAAC,EACf,MAAO,CACL,SAAWf,IACRA,GAAS,IAAI,OAAS,GAAK0V,EAAK,OAAS,CAC9C,EACA,OAAQ,CAAC,CAAE,MAAAvU,CAAA,IACTjC,EAACU,EAAA,CACC,gBAAiBlC,EAAE,aAAa,EAChC,QAASoC,EAAc,eACvB,SAAS,OACT,SAAUyU,EACV,WAAYpT,EAAM,MAClB,SAAU,CAACpB,EAAGqC,IAAM,CACZ,MAAA8T,EAAS9T,EAAE,WACbjB,EAAM,OAAO,SAAS+U,CAAM,EACxB/U,EAAA,SACJA,EAAM,MAAM,OACT8Q,IAAiBA,KAASiE,CAC7B,CAAA,EAGI/U,EAAA,SAAS,CAAC,GAAIA,EAAM,OAAS,CAAC,EAAI+U,CAAM,CAAC,EAEjD3B,EAAoB,EAAK,CAC3B,EACA,QAAU4B,GAAU,CAClBA,EAAM,gBAAgB,EAChBhV,EAAA,SAAS,CAAA,CAAE,CACnB,EACA,aAAYzD,EAAE,WAAW,EACzB,OAAQ4W,EAEP,SAAAS,EAAY,IAAKqB,GAChBlX,EAACgB,EAAA,CACC,SAAUkW,EAAK,OAASjV,EAAM,MAE9B,MAAOiV,EAAK,IAAA,EADPA,EAAK,IAAA,CAGb,CAAA,CACH,CAAA,CAEJ,CAAA,CACF,CAAA,CAAA,CACF,CACF,CAAA,CAAA,EACF,IACCP,GACC,CAAA,SAAA,CAAC3W,EAAAvC,GAAA,CACC,WAACmZ,GAAM,CAAA,aAAa,KAAM,SAAEpY,EAAA,qBAAqB,EAAE,CACrD,CAAA,IACCqY,GACC,CAAA,SAAAxW,EAACyC,IAAW,aAAY,GAAC,KAAK,eAC5B,SAAA,CAAA9C,EAACQ,EAAA,CACC,MAAOhC,EAAE,qBAAqB,EAC9B,QAAQ,sBACR,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,yBAAyB,EACrC,aAAa,qBAAA,CACf,EAGF,SAAAwB,EAACiD,GAAA,CACC,GAAG,yBACH,MAAOzE,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,UAAW+W,EACX,SAAUC,EACV,aAAYhX,EAAE,qBAAqB,CAAA,CACrC,CAAA,CACF,EAEE+W,EAuBElV,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACQ,EAAA,CACC,MAAOhC,EAAE,cAAc,EACvB,WAAU,GACV,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,kBAAkB,EAC9B,aAAa,cAAA,CACf,EAEF,QAAQ,SACR,UAAWuP,EAAO,MAAQ,QAAU,UACpC,kBAAmBvP,EAAE,UAAU,EAE/B,SAAAwB,EAACsF,GAAA,CACC,GAAG,QACH,aAAW,gBACX,cAAY,QACX,GAAGd,EAAS,QAAS,CAAE,SAAU,GAAM,CAAA,CAC1C,CAAA,CACF,EACAxE,EAACQ,EAAA,CACC,MAAOhC,EAAE,YAAY,EACrB,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,cAAc,EAC1B,aAAa,QAAA,CACf,EAEF,QAAQ,aAER,SAAAwB,EAACgC,EAAA,CACC,KAAK,aACL,aAAc,CAAC,EACf,QAAAH,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,aACT,SAAUyU,EACV,SAAU,CAACtU,EAAGqC,IAAM,CACZ,MAAA8T,EAAS9T,EAAE,WACbjB,EAAM,MAAM,SAAS+U,CAAM,EACvB/U,EAAA,SACJA,EAAM,MAAM,OACT8Q,IAAiBA,KAASiE,CAC7B,CAAA,EAGF/U,EAAM,SAAS,CAAC,GAAGA,EAAM,MAAO+U,CAAM,CAAC,EAEzC7B,EAAsB,EAAK,CAC7B,EACA,WAAYlT,EAAM,MAClB,QAASrB,EAAc,eACvB,mBAAoBpC,EAAE,YAAY,EAClC,OAAQ0W,EAEP,SAAAQ,EAAO,IAAKjF,GACXzQ,EAACgB,EAAA,CACC,SAAUiB,EAAM,MAAM,SAASwO,EAAM,IAAK,EAE1C,MAAOA,EAAM,IAAA,EADRA,EAAM,EAAA,CAGd,CAAA,CACH,CAAA,CAEJ,CAAA,CACF,CAAA,EACF,EAzFAzQ,EAACQ,EAAA,CACC,MAAOhC,EAAE,oBAAoB,EAC7B,GAAG,qBACH,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,0BAA0B,EACtC,aAAc,oBAAA,CAChB,EAEF,QAAQ,qBAER,SAAAwB,EAAC8Q,GAAA,CACC,iBAAkBjB,EAAU,IAAoBkD,IAAU,CACxD,KAAMA,EAAK,KACX,IAAKA,EAAK,GAAA,EACV,EACF,UAAAlD,EACA,KAAK,WAAA,CACP,CAAA,CAAA,EAyEJ7P,EAAC8G,GAAA,CACC,WAAYtI,EAAE,gBAAgB,EAC9B,SAAU,IAAM8W,EAAc,CAAC3U,CAAU,EACzC,WAAAA,EAEA,SAAAX,EAACQ,EAAA,CACC,MAAOhC,EAAE,sBAAsB,EAC/B,GAAG,uBACH,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,0BAA0B,EACtC,aAAc,sBAAA,CAChB,EAEF,kBAAmBA,EAAE,UAAU,EAC/B,QAAQ,uBAER,SAAAwB,EAAC8Q,GAAA,CACC,iBAAkBV,GAClB,KAAK,oBAAA,CACP,CAAA,CACF,CAAA,CACF,CAAA,CAAA,CACF,CACF,CAAA,CAAA,EACF,IACC/M,GACC,CAAA,SAAA,CAAArD,EAACsD,EAAA,CACC,cAAY,qBACZ,GAAG,qBACH,UAAU,aACV,WAAY,CAACqB,EACb,QAAS,IAAMqR,EAAS,EAEvB,WAAE,UAAU,CAAA,CACf,EACAhW,EAACsD,EAAA,CACC,cAAY,uBACZ,GAAG,uBACH,UAAU,aACV,QAAQ,OACR,QAAS,IAAMf,EAAM,EAEpB,WAAE,QAAQ,CAAA,CACb,CAAA,EACF,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,ECzaa4U,GAAsB,IAAM,CACjC,KAAA,CAAE,EAAA3Y,GAAMC,IACR,CAAE,SAAA+T,GAAaC,KACf,CAAE,SAAA5N,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAEnC,CAACqS,EAAMC,CAAO,EAAIrY,EAAiB,EACnC,CAACsY,EAAsBC,CAAuB,EAClDvY,EAAuC,EAEzCS,GACE,IACEG,EAAY,QAAQ,eAAe,CACjC,GAAI4S,CAAA,CACL,EAEFgF,GAAgB,CACfH,EAAQ,KAAK,UAAUG,EAAa,KAAM,CAAC,CAAC,EAC5CD,EAAwBC,CAAW,CACrC,EACA,CAAC,CAAA,EAGH,MAAMC,EAAoB,IAAM,CAC1B,GAAA,CACFvX,GAAA,OACE,IAAI,KAAK,CAACJ,GAAgBwX,CAAoB,CAAC,EAAG,CAChD,KAAM,kBAAA,CACP,EACD,wBAAA,EAEFzS,EAASrG,EAAE,0BAA0B,EAAG0G,EAAa,OAAO,QACrDC,EAAO,CACdL,EAAS,yBAA0BK,CAAK,CAC1C,CAAA,EAGF,OAAKiS,IAKFjL,GACC,CAAA,SAAA9L,EAACyC,GAAA,CACC,aAAY,GACZ,KAAK,uBACL,UAAU,aAEV,SAAA,CAAA9C,EAACQ,EAAA,CACC,MAAOhC,EAAE,aAAa,EACtB,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,iBAAiB,EAC7B,aAAa,aAAA,CACf,EAEF,QAAQ,SAER,SAAAwB,EAACiB,GAAA,CACC,GAAG,uBACH,SAAQ,GACR,kBAAkB,WAClB,MAAOmW,EACP,aAAY5Y,EAAE,aAAa,EAC3B,KAAM,EAAA,CACR,CAAA,CACF,IACC6E,GACC,CAAA,SAAA,CAAArD,EAACsD,EAAA,CACC,cAAY,gCACZ,QAAS,IAAMmU,EAAkB,EAEhC,WAAE,UAAU,CAAA,CACf,EACAzX,EAACsD,EAAA,CACC,cAAY,4BACZ,QAAQ,YACR,QAAS,SAAY,CACf,GAAA,CACI,MAAA,UAAU,UAAU,UAAU8T,CAAK,EACzCvS,EAASrG,EAAE,QAAQ,EAAG0G,EAAa,OAAO,QACnCC,EAAO,CACLL,EAAAtG,EAAE,WAAW,EAAG2G,CAAK,CAChC,CACF,EAEC,WAAE,MAAM,CAAA,CACX,CAAA,EACF,CAAA,CAAA,CAEJ,CAAA,CAAA,IApDQuS,GAAgB,CAAA,CAAA,CAsD5B,ECpGO,SAASC,GAAqBva,EAAkC,CAC9D,OAAA4C,EAAC4X,GAAuB,CAAA,GAAGxa,CAAO,CAAA,CAC3C,CAMO,SAASwa,GAAyB,CACvC,KAAAvW,EACA,MAAAwW,EACA,QAAAC,EACA,KAAAC,CACF,EAAkC,CAC1B,KAAA,CAAE,EAAAvZ,GAAMC,IACd,SACGuZ,GACC,CAAA,SAAA,CAAChY,EAAAiY,GAAA,CAAqB,SAAEzZ,EAAA6C,CAAI,CAAE,CAAA,IAC7B6W,GACE,CAAA,SAAA,CAAOL,GAAA,IAAKM,GAAY,CACvB,MAAMrX,EACJ,OAAOqX,GAAY,SAAWA,EAAUL,EAASK,CAAO,EAC1D,OAAOJ,EACJ/X,EAAAoL,GAAA,CAAiB,GAAI2M,EAAKI,CAAY,EAAG,UAAU,aACjD,SAAArX,CAAA,EADQA,CAEX,EAEAd,EAAC,QAAiB,UAAU,aACzB,YADQc,CAEX,CAAA,CAEH,EACA+W,GAAO,SAAW,KAAM,IAAG,CAAA,SAAArZ,EAAE,MAAM,EAAE,CAAA,EACxC,CACF,CAAA,CAAA,CAEJ,CC5BA,MAAM4Z,GAAc,CAAC,CACnB,eAAAC,EACA,SAAAC,EAAW,GACX,SAAA9F,CACF,IAAwB,CAChB,KAAA,CAAE,GAAM/T,IACR,CAAE,MAAAH,GAAUC,KACZga,EAAWC,KAEf,OAAAxY,EAACsD,EAAA,CACC,cAAa,UAAU+U,CAAc,GACrC,UACEC,EAAW,sCAAwC,YAErD,QAAQ,YACR,QAAS,IACP,CAACA,GACDC,EAASE,GAAgB,CAAE,MAAAna,EAAO,GAAIkU,EAAU,eAAA6F,CAAe,CAAC,CAAC,EAGlE,SAAE,EAAA,SAAShM,GAAYgM,CAAc,CAAC,iBAAiB,CAAA,CAAA,CAG9D,EAEMK,GAAqB,CAAC,CAC1B,eAAAL,EACA,SAAAC,EACA,GAAGlb,CACL,IAAwB,CAChB,KAAA,CAAE,GAAMqB,IACP,OAAA6Z,EACJtY,EAAAuL,GAAA,CAAQ,QAAS,EAAE,KAAKc,GAAYgM,CAAc,CAAC,YAAY,EAC9D,SAAArY,EAACoY,GAAA,CACE,GAAGhb,EACJ,SAAAkb,EACA,eAAAD,CAAA,GAEJ,EAEArY,EAACoY,GAAA,CACE,GAAGhb,EACJ,SAAAkb,EACA,eAAAD,CAAA,CAAA,CAGN,EAQaM,GAAwB,CAAC,CACpC,SAAAnG,EACA,kBAAAoG,EACA,eAAAC,CACF,IAAkC,CAC1B,KAAA,CAAE,GAAMpa,IACd,OACG4B,EAAAyY,GAAA,CAAW,cAAY,cAAc,QAAQ,QAC5C,SAAA,CAAC9Y,EAAA+Y,GAAA,CAAe,KAAMlH,EAAgB,CAAA,EACtC7R,EAAC4W,IAAM,aAAa,KAAK,KAAK,KAC3B,SAAA,EAAE,kBAAkB,EACvB,EACC5W,EAAAgZ,GAAA,CAAgB,SAAE,EAAA,6BAA6B,CAAE,CAAA,EAClDhZ,EAAC0Y,GAAA,CACC,eAAe,WACf,SAAUE,EACV,SAAApG,CAAA,CACF,IACC,KAAG,EAAA,EACJxS,EAAC0Y,GAAA,CACC,eAAe,QACf,SAAUG,EACV,SAAArG,CAAA,CACF,CACF,CAAA,CAAA,CAEJ,EC/FayG,GAAY,CAAC,CAAE,MAAApB,KAA4B,CAChD,KAAA,CAAE,EAAArZ,GAAMC,IAEd,MAAI,CAACoZ,GAASA,EAAM,QAAU,EACrB,KAED7X,EAAAkZ,GAAA,CAAM,MAAM,OAAQ,SAAE1a,EAAA,OAAQ,CAAE,MAAOqZ,EAAM,OAAS,CAAG,CAAA,CAAE,CAAA,CACrE,ECuBasB,GAAiB,CAAC,CAC7B,MAAAC,EACA,OAAAC,EACA,SAAAC,EACA,WAAAC,EAAa,EACf,IAA2B,CACnB,KAAA,CAAE,EAAA/a,GAAMC,IACR,CACJ,SAAA+F,EACA,QAAA3C,EACA,MAAAU,EACA,UAAW,CAAE,QAAAmC,CAAQ,EACrB,aAAAD,CACE,EAAAG,GAAoB,CAAE,KAAM,UAAY,CAAA,EAEtC,CAACzG,EAAM8T,CAAM,EAAIC,GAAU,EAC3B,CAACsH,EAAUC,CAAU,EAAIvH,GAAU,EAEnCwH,EAAU1E,GAAqB,CAC5B/C,IACPqH,EAAStE,CAAI,CAAA,EAGfjV,GAAU,IAAMwC,EAAM8W,CAAM,EAAG,CAACA,CAAM,CAAC,EAEjC,MAAAM,EAAe7Y,GAAmB,GACrCE,EAAyB,CAAA,MAAM,GAC7B,SAAExC,EAAA,UAAU,GADG,OAElB,EACA,IAAI4a,GAAS,CAAA,GAAI,IAAKzM,GACpB3M,EAACgB,EAAA,CACC,SAAU2L,EAAK,OAAS7L,EAExB,MAAO6L,EAAK,KAEX,SAAKA,EAAA,IAAA,EAHDA,EAAK,IAAA,CAKb,CAAA,EAID,OAAA3M,EAAC4Z,GAAA,CACC,cAAY,0BACZ,UAAU,aACV,OACE5Z,EAAC6Z,GAAA,CACC,SAAU5H,EACV,UAAU,kDAET,WAAE,qBAAqB,CAAA,CAC1B,EAEF,OAAQ9T,EAER,SAAAkC,EAACD,GAAA,CACC,aAAY,GACZ,UAAU,uDACV,SAAUqE,EAAaiV,CAAM,EAE7B,SAAA,CAAA1Z,EAACQ,GAAU,MAAOhC,EAAE,MAAM,EAAG,QAAQ,OACnC,SAAAwB,EAACsF,GAAA,CACC,GAAG,OACH,cAAY,sBACX,GAAGd,EAAS,MAAM,CAAA,CAAA,EAEvB,EACC+U,GAEGlZ,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACQ,GAAU,MAAOhC,EAAE,MAAM,EAAG,QAAQ,OACnC,SAAAwB,EAACsF,GAAA,CACC,GAAG,OACH,cAAY,sBACX,GAAGd,EAAS,MAAM,CAAA,CAAA,EAEvB,IACChE,EAAU,CAAA,MAAOhC,EAAE,MAAM,EAAG,QAAQ,MACnC,SAAAwB,EAACsF,GAAA,CACC,GAAG,MACH,cAAY,qBACX,GAAGd,EAAS,KAAK,CAAA,CAAA,EAEtB,IACChE,EAAU,CAAA,MAAOhC,EAAE,OAAO,EAAG,QAAQ,QACpC,SAAAwB,EAACsF,GAAA,CACC,GAAG,QACH,cAAY,uBACX,GAAGd,EAAS,OAAO,CAAA,CAAA,EAExB,CAAA,EACF,EAED,CAAC+U,GACCvZ,EAAAQ,EAAA,CAAU,MAAOhC,EAAE,UAAU,EAAG,QAAQ,WACvC,SAAAwB,EAACsF,GAAA,CACC,GAAG,WACH,cAAY,0BACX,GAAGd,EAAS,UAAU,CAAA,CAAA,EAE3B,IAEDhE,EAAU,CAAA,MAAOhC,EAAE,OAAO,EAAG,QAAQ,QACpC,SAAAwB,EAACsF,GAAA,CACC,GAAG,QACH,cAAY,uBACX,GAAGd,EAAS,OAAO,CAAA,CAAA,EAExB,EACC,CAAC+U,GACCvZ,EAAAQ,EAAA,CAAU,MAAOhC,EAAE,MAAM,EAAG,QAAQ,OACnC,SAAAwB,EAACgC,EAAA,CACC,KAAK,OACL,aAAa,GACb,QAAAH,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,OACT,SAAU+Y,EACV,SAAU,CAACxC,EAAOnW,IAAU,CAC1BmW,EAAM,gBAAgB,EACtBhV,EAAM,SAASnB,CAAK,EACT2Y,GACb,EACA,WAAYxX,EAAM,OAASzD,EAAE,UAAU,EACvC,QAASoC,EAAc,OACvB,aAAYpC,EAAE,MAAM,EACpB,OAAQgb,EAEP,SAAAG,EAAY1X,EAAM,KAAK,CAAA,CAC1B,CAAA,CAAA,EAGN,IAEDoB,GACC,CAAA,SAAA,CAAArD,EAACsD,EAAA,CACC,QAAQ,UACR,KAAK,SACL,cAAY,aACZ,WAAY,CAACoB,EAEZ,WAAE,QAAQ,CAAA,CACb,EACA1E,EAACsD,EAAA,CACC,QAAQ,OACR,cAAY,aACZ,QAAS,IAAMgW,EAAS,EAAE,EAEzB,WAAE,OAAO,CAAA,CACZ,CAAA,EACF,CAAA,CAAA,CACF,CAAA,CAAA,CAGN,ECvIMQ,GAA6B,CAAC,CAClC,IAAAC,CACF,IAKO1Z,EAAA2C,EAAA,CAAA,SAAA,CAAI+W,EAAA,qBAAqB,CAAC,GAAG,KAAM,IACnC/Z,EAAAiZ,GAAA,CAAU,MAAOc,EAAI,kBAAoB,CAAA,CAC5C,CAAA,CAAA,EAISC,GAA2B,CAAC,CAAE,SAAAxH,KAAiC,CACpE,KAAA,CAAE,EAAAhU,GAAMC,IACR8Z,EAAWC,KACX,CAAE,SAAA3T,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnC,CAAE,MAAAzG,GAAUC,KAEZ,CAAC0b,EAAaC,CAAc,EAChClb,EAA2C,EACvC,CAACmb,EAAoBC,CAAqB,EAC9Cpb,EAA+B,EAC3B,CAACqb,EAAiBC,CAAkB,EACxCtb,EAAyC,EACrC,CAACub,EAAgBC,CAAiB,EAAIxb,EAGzC,EACG,CAACyb,EAAYC,CAAY,EAAIxI,GAAU,EACvC,CAACmH,EAAQsB,CAAS,EAAI3b,EAAqB,CAAE,CAAA,EAE7C,CAACoH,EAAKC,CAAM,EAAIrH,EAAS,CAAC,EAC1BsH,EAAU,IAAMD,EAAOD,EAAM,CAAC,EAE9B,CAACqG,EAAKmO,CAAM,EAAI5b,EAAS,EAAE,EAC3B,CAACwN,EAAOqO,CAAQ,EAAI7b,EAAS,CAAC,EAEpCS,GACE,SAAY,CACV,MAAMwa,EAAc,MAAMra,EAAY,QAAQ,gBAAgB,CAC5D,MAAA4M,EACA,IAAKC,EAAM,EACX,GAAI+F,EACJ,GAAG6G,CAAA,CACJ,EAED,OAAO,MAAM,QAAQ,IACnBY,EAAY,IAAI,MAAOa,GAAe,CACpC,MAAMC,EACJ,MAAMnb,EAAY,QAAQ,sBAAsB,CAC9C,GAAI4S,EACJ,aAAcsI,EAAW,EAAA,CAC1B,EAEI,MAAA,CACL,GAAGA,EACH,mBAAAC,EACA,WAAY,EAAA,CACd,CACD,CAAA,CAEL,EACAb,EACA,CAAC9T,EAAKiT,EAAQ7M,EAAOC,CAAG,CAAA,EAG1BhN,GACE,SAAY,CACV,MAAMub,EAAS,CACb,MAAO,EACP,IAAK,CAAA,EAED,CAACC,EAAUpL,EAAW6F,CAAM,EAAI,MAAM,QAAQ,IAAI,CACtD9V,EAAY,QAAQ,oBAAoB,CACtC,GAAI4S,CAAA,CACL,EACD5S,EAAY,QAAQ,cAAc,CAAE,GAAGob,EAAQ,GAAIxI,EAAU,EAC7D5S,EAAY,QAAQ,cAAc,CAAE,GAAGob,EAAQ,GAAIxI,EAAU,CAAA,CAC9D,EACM,MAAA,CACL,SAAUyI,EAAS,OAChBvR,GAAMA,EAAE,OAAS,YAAcA,EAAE,OAAS,OAC7C,EACA,UAAWmG,EAAU,SAAW,EAChC,OAAQ6F,EAAO,SAAW,CAAA,CAE9B,EACA,CAAC,CAAE,SAAAuF,EAAU,UAAApL,EAAW,OAAA6F,KAAa,CACnC4E,EAAmBW,CAAQ,EACTT,EAAA,CAAE,UAAA3K,EAAW,OAAA6F,CAAA,CAAQ,CACzC,EACA,CAAC,CAAA,EAGH,KAAM,CAACwF,EAAoBC,CAAa,EAAIvU,GAAiB,CAC3D,SAAU,mBACV,WAAYpI,EAAE,0BAA2B,CACvC,WAAY2b,GAAoB,IAAA,CACjC,EACD,sBAAuB9U,GAAc,OACrC,oBAAqB,UACrB,UAAW,SAAY,CACjB,GAAA,CACI,MAAAzF,EAAY,QAAQ,cAAc,CACtC,GAAI4S,EACJ,KAAM2H,GAAoB,KAC1B,aAAcA,GAAoB,EAAA,CACnC,EACDtV,EAASrG,EAAE,0BAA0B,EAAG0G,EAAa,OAAO,EACpDoB,UACDnB,EAAO,CACdL,EAAS,yBAA0BK,CAAK,CAC1C,CACF,CAAA,CACD,EAED,GAAI,CAAC8U,EACH,SAAQvC,GAAgB,CAAA,CAAA,EAGpB,MAAA0D,EAASnB,EAAY,SAAW,EAChCoB,EAAY,OAAO,KAAKhC,CAAM,EAAE,SAAW,EACjD,OACGhZ,EAAA8L,GAAA,CAAY,QAAQ,QAAQ,UAAU,WACrC,SAAA,CAAAnM,EAACmb,EAAc,EAAA,GACb,CAACC,GAAUC,IACXrb,EAACsb,GAAA,CACC,MAAOrB,EAAY,OACnB,MAAAzN,EACA,IAAAC,EACA,YAAaoO,EACb,gBAAiBA,EACjB,gBAAiB,CAACrO,EAAOC,IAAQ,CAC/BoO,EAASrO,CAAK,EACdoO,EAAOnO,CAAG,CACZ,EACA,YAEIpM,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACiH,GACC,CAAA,SAAAjH,EAACmZ,GAAA,CACC,MAAOkB,EACP,OAAAhB,EACA,SAAUsB,CAAA,CAAA,EAEd,IACC1T,GACC,CAAA,SAAAjH,EAAC4Z,GAAA,CACC,OACE5Z,EAAC6Z,GAAA,CACC,SAAUa,EACV,UAAS,GACT,cAAY,2BAEX,WAAE,kBAAkB,CAAA,CACvB,EAEF,OAAQD,EACR,cAAe,CACbza,EAACub,GAAA,CACC,cAAY,kBAEZ,WAAYhB,GAAgB,UAC5B,UAAU,SACV,QAAS,IACPhC,EACEE,GAAgB,CACd,MAAAna,EACA,GAAIkU,EACJ,eAAgB,UAAA,CACjB,CACH,EAGD,WAAE,+BAA+B,CAAA,EAb9B,+BAcN,EACAxS,EAACwb,MAAsB,WAAY,EACnCnb,EAACkb,GAAA,CACC,cAAY,eAEZ,WAAYhB,GAAgB,OAC5B,UAAU,SACV,QAAS,IACPhC,EACEE,GAAgB,CACd,MAAAna,EACA,GAAIkU,EACJ,eAAgB,OAAA,CACjB,CACH,EAGD,SAAA,CAAAhU,EAAE,4BAA4B,EAC9B+b,GAAgB,QACfva,EAACyb,GAAA,CACC,UAAU,aACV,QAAQ,UACR,SAAQ,GACR,QAAO,GACP,MAAOjd,EAAE,mBAAmB,CAAA,CAC9B,CAAA,CAAA,EArBE,4BAuBN,CACF,CAAA,CAAA,EAEJ,CAAA,EACF,EAGD,SAAA,CAAC4c,GACC/a,EAAAkR,GAAA,CAAgB,aAAY/S,EAAE,WAAW,EAAG,QAAQ,UACnD,SAAA,CAACwB,EAAAwR,GAAA,CACC,WAACC,GACC,CAAA,SAAA,CAACzR,EAAA0R,EAAA,CAAG,cAAY,MAAO,CAAA,EACtB1R,EAAA0R,EAAA,CAAI,SAAElT,EAAA,MAAM,CAAE,CAAA,EACdwB,EAAA0R,EAAA,CAAI,SAAElT,EAAA,MAAM,CAAE,CAAA,EACdwB,EAAA0R,EAAA,CAAI,SAAElT,EAAA,kBAAkB,CAAE,CAAA,EAC1BwB,EAAA0R,EAAA,CAAI,SAAElT,EAAA,aAAa,CAAE,CAAA,EACtBwB,EAAC0R,EAAG,CAAA,cAAY,MAAO,CAAA,CAAA,CAAA,CACzB,CACF,CAAA,EACCuI,EAAY,IAAI,CAACa,EAAYpL,IAC3BrP,EAAAsR,GAAA,CAA0B,WAAYmJ,EAAW,WAChD,SAAA,CAAAza,EAACoR,GACC,CAAA,SAAA,CAAAzR,EAAC6Q,EAAA,CACC,OAAQ,CACN,SAAAnB,EACA,WAAYoL,EAAW,WACvB,SAAU,CAACja,EAAG6O,IAAa,CACzB,MAAMgM,EAAOzB,EAAY,IAAI,CAACvQ,GAAGiS,KAC/BA,KAAUjM,EACN,CAAE,GAAGhG,GAAG,WAAY,CAACA,GAAE,UACvB,EAAAA,EAAA,EAENwQ,EAAewB,CAAI,CACrB,CACF,CAAA,CACF,IACC7K,EAAG,CAAA,cAAa,eAAeiK,EAAW,IAAI,GAC7C,SAAA9a,EAACoL,GAAA,CACC,GAAIuH,GAAoB,CACtB,MAAArU,EACA,GAAIkU,EACJ,eAAgBsI,EAAW,KAC3B,aAAcA,EAAW,EAAA,CAC1B,EAEA,SAAWA,EAAA,IAAA,CAAA,EAEhB,EACA9a,EAAC6Q,EAEG,CAAA,SAAAwJ,GAAiB,KAAM3Q,GAAMA,EAAE,OAASoR,EAAW,IAAI,GACnD,IAER,CAAA,IACCjK,EACC,CAAA,SAAA7Q,EAAC8Z,GAA2B,CAAA,IAAKgB,CAAY,CAAA,EAC/C,EACA9a,EAAC6Q,EAAI,CAAA,SAAAiK,EAAW,WAAY,CAAA,EAC5B9a,EAAC6Q,EAAA,CACC,QAAS,CACP,MAAO,CACL,CACE,MAAOrS,EAAE,QAAQ,EACjB,QAAS,SAAY,CACnB4b,EAAsBU,CAAU,EACbI,GACrB,CACF,CACF,CACF,CAAA,CACD,CAAA,EACH,EACA7a,EAACoR,GAAA,CAEC,WAAYqJ,EAAW,WAEvB,SAAA,CAAA9a,EAAC6Q,EAAG,EAAA,IACHA,EAAG,CAAA,QAAS,EACX,SAAC7Q,EAAA6S,GAAA,CACE,WAAW,YACV7S,EAAC8S,GAAA,CACC,aAAY,GACZ,UAAU,4BAEV,SAAA9S,EAAC4X,GAAA,CACC,KAAK,mBACL,MAAOkD,EAAW,mBAClB,QAAUpR,GAAMA,EAAE,KAClB,KAAOA,GACLsJ,GAAgB,CACd,GAAIR,EACJ,MAAAlU,EACA,SAAUoL,EAAE,GACZ,WAAYA,EAAE,IAAA,CACf,CAAA,CAEL,CAAA,GAGN,CACF,CAAA,CAAA,CAAA,EA3BK,SAASoR,EAAW,EAAE,EA4B7B,CAAA,GAjFUA,EAAW,EAkFvB,CACD,CAAA,EACH,CAAA,CAEJ,EAEDM,GAAU,CAACC,GACVrb,EAAC2Y,GAAA,CACC,SAAAnG,EACA,kBAAmB+H,GAAgB,UACnC,eAAgBA,GAAgB,MAAA,CAClC,EAEDa,GAAUC,GACTrb,EAACmH,GAAA,CACC,gBAAe,GACf,QAAS3I,EAAE,iBAAiB,EAC5B,aAAcA,EAAE,6BAA6B,CAAA,CAC/C,CAEJ,CAAA,CAAA,CAEJ,EC3UMod,GAA4B,CAAC,CACjC,IAAA7B,CACF,IAKO1Z,EAAA2C,EAAA,CAAA,SAAA,CAAI+W,EAAA,oBAAoB,CAAC,GAAG,KAAM,IAClC/Z,EAAAiZ,GAAA,CAAU,MAAOc,EAAI,iBAAmB,CAAA,CAC3C,CAAA,CAAA,EAIS8B,GAAwB,CAAC,CAAE,SAAArJ,KAA8B,CAC9D,KAAA,CAAE,EAAAhU,GAAMC,IACR,CAAE,SAAAoG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnC,CAAE,MAAAzG,GAAUC,KACZga,EAAWC,KAEX,CAACyC,EAAUa,CAAW,EAAI9c,EAA2C,EACrE,CAAC+c,EAAgBC,CAAiB,EACtChd,EAAyC,EACrC,CAACqb,EAAiBC,CAAkB,EACxCtb,EAAyC,EAErC,CAACoH,EAAKC,CAAM,EAAIrH,EAAS,CAAC,EAC1BsH,EAAU,IAAMD,EAAOD,EAAM,CAAC,EAE9B,CAACqG,EAAKmO,CAAM,EAAI5b,EAAS,EAAE,EAC3B,CAACwN,EAAOqO,CAAQ,EAAI7b,EAAS,CAAC,EAC9B,CAACqa,EAAQsB,CAAS,EAAI3b,EAAqB,CAAE,CAAA,EAC7C,CAACid,EAAW7d,CAAY,EAAI8T,GAAU,EAE5CzS,GACE,SAAY,CACV,MAAMwb,EAAW,MAAMrb,EAAY,QAAQ,aAAa,CACtD,MAAA4M,EACA,IAAKC,EAAM,EACX,GAAI+F,EACJ,WAAY,QACZ,GAAG6G,CAAA,CACJ,EAEM,OAAA,MAAM,QAAQ,IAAI,CACvBzZ,EAAY,QAAQ,oBAAoB,CAAE,GAAI4S,EAAU,EACxD,IAAIyI,GAAY,CAAA,GAAI,IAAI,MAAOiB,GAAW,CACxC,MAAMC,EACJ,MAAMvc,EAAY,QAAQ,sBAAsB,CAC9C,GAAI4S,EACJ,SAAU0J,EAAO,EAAA,CAClB,EAEI,MAAA,CACL,GAAGA,EACH,kBAAAC,EACA,WAAY,EAAA,CACd,CACD,CAAA,CACF,CACH,EACA,CAAC,CAAC5U,EAAc0T,GAAAA,CAAQ,IAAM,CAC5BX,EACE/S,EAAU,OAAQmC,GAAMA,EAAE,OAAS,YAAcA,EAAE,OAAS,OAAO,CAAA,EAErEoS,EAAYb,CAAQ,CACtB,EACA,CAAC7U,EAAKiT,EAAQ7M,EAAOC,CAAG,CAAA,EAG1B,KAAM,CAACyO,EAAoBC,CAAa,EAAIvU,GAAiB,CAC3D,SAAU,eACV,SAEKvG,EAAA2C,EAAA,CAAA,SAAA,CAAAxE,EAAE,qBAAqB,EACvBud,GAAgB,mBACfA,EAAe,kBAAkB,OAAS,GACxC/b,EAACyb,GAAA,CACC,QAAQ,UACR,SAAQ,GACR,QAAO,GACP,UAAU,IACV,MAAOjd,EAAE,qBAAqB,EAC9B,UAAU,aAEV,WAAC,IAAE,CAAA,UAAU,aACV,SAAeud,EAAA,kBAAkB,IAAKG,GACpClc,EAAA,SAAA,CAAuB,UAAU,aAC/B,SAAAkc,EAAO,MADGA,EAAO,EAEpB,CACD,EACH,CAAA,CACF,CAAA,EAEN,EAEF,oBAAqB,UACrB,UAAW,SAAY,CACjB,GAAA,CACI,MAAAtc,EAAY,QAAQ,UAAU,CAClC,GAAI4S,EACJ,SAAUuJ,GAAgB,EAAA,CAC3B,EACDlX,EAASrG,EAAE,sBAAsB,EAAG0G,EAAa,OAAO,EAChDoB,UACDnB,EAAO,CACdL,EAAS,qBAAsBK,CAAK,CACtC,CACF,CAAA,CACD,EAED,GAAI,CAAC8V,EACH,SAAQvD,GAAgB,CAAA,CAAA,EAGpB,MAAA0D,EAASH,EAAS,SAAW,EAC7BI,EAAY,OAAO,KAAKhC,CAAM,EAAE,SAAW,EACjD,OACGhZ,EAAA8L,GAAA,CAAY,QAAQ,QAAQ,UAAU,WACrC,SAAA,CAAAnM,EAACmb,EAAc,EAAA,GACb,CAACC,GAAUC,IAERhb,EAAA2C,EAAA,CAAA,SAAA,CACCiZ,GAAAjc,EAACoc,GAAA,CACC,gBAAA/B,EACA,SAAW3Q,GACT6O,EACE8D,GAAe,CAAE,GAAI7J,EAAU,MAAAlU,EAAO,WAAYoL,EAAE,KAAO,CAC7D,EAEF,aAAAtL,CAAA,CACF,EAGF4B,EAACsb,GAAA,CACC,MAAOL,EAAS,OAChB,MAAAzO,EACA,IAAAC,EACA,YAAaoO,EACb,gBAAiBA,EACjB,gBAAiB,CAACrO,EAAOC,IAAQ,CAC/BoO,EAASrO,CAAK,EACdoO,EAAOnO,CAAG,CACZ,EACA,YAEIpM,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACiH,GACC,CAAA,SAAAjH,EAACmZ,GAAA,CACC,MAAOkB,EACP,OAAAhB,EACA,SAAUsB,CAAA,CAAA,EAEd,EACA3a,EAACiH,GACC,CAAA,SAAAjH,EAACsD,EAAO,CAAA,cAAY,eAAe,QAASlF,EACzC,SAAAI,EAAE,cAAc,CACnB,CAAA,EACF,CAAA,EACF,EAGD,SAAA,CAAC4c,GACC/a,EAAAkR,GAAA,CAAgB,aAAY/S,EAAE,WAAW,EAAG,QAAQ,UACnD,SAAA,CAACwB,EAAAwR,GAAA,CACC,WAACC,GACC,CAAA,SAAA,CAACzR,EAAA0R,EAAA,CAAG,cAAY,MAAO,CAAA,EACtB1R,EAAA0R,EAAA,CAAI,SAAElT,EAAA,MAAM,CAAE,CAAA,EACdwB,EAAA0R,EAAA,CAAI,SAAElT,EAAA,MAAM,CAAE,CAAA,EACdwB,EAAA0R,EAAA,CAAI,SAAElT,EAAA,qBAAqB,CAAE,CAAA,EAC7BwB,EAAA0R,EAAA,CAAI,SAAElT,EAAA,aAAa,CAAE,CAAA,EACtBwB,EAAC0R,EAAG,CAAA,cAAY,MAAO,CAAA,CAAA,CAAA,CACzB,CACF,CAAA,EACCuJ,EAAS,IAAI,CAACiB,EAAQxM,IACpBrP,EAAAsR,GAAA,CAAsB,WAAYuK,EAAO,WACxC,SAAA,CAAA7b,EAACoR,GACC,CAAA,SAAA,CAAAzR,EAAC6Q,EAAA,CACC,OAAQ,CACN,SAAAnB,EACA,WAAYwM,EAAO,WACnB,SAAU,CAACrb,EAAG6O,IAAa,CACzB,MAAMgM,EAAOT,EAAS,IAAI,CAACiB,EAAQP,IACjCA,IAAUjM,EACN,CAAE,GAAGwM,EAAQ,WAAY,CAACA,EAAO,UACjCA,EAAAA,CAAA,EAENJ,EAAYJ,CAAI,CAClB,CACF,CAAA,CACF,IACC7K,EAAG,CAAA,cAAa,eAAeqL,EAAO,IAAI,GACzC,SAAAlc,EAACoL,GAAA,CACC,GAAI4H,GAAgB,CAClB,MAAA1U,EACA,GAAIkU,EACJ,WAAY0J,EAAO,KACnB,SAAUA,EAAO,EAAA,CAClB,EAEA,SAAOA,EAAA,IAAA,CAAA,EAEZ,EACClc,EAAA6Q,EAAA,CAAI,SAAYxE,GAAA6P,EAAO,IAAK,EAAE,IAC9BrL,EACC,CAAA,SAAA7Q,EAAC4b,GAA0B,CAAA,IAAKM,CAAQ,CAAA,EAC1C,EACAlc,EAAC6Q,EAAI,CAAA,SAAAqL,EAAO,WAAY,CAAA,EACxBlc,EAAC6Q,EAAA,CACC,QAAS,CACP,MAAO,CACL,CACE,MAAOrS,EAAE,QAAQ,EACjB,QAAS,SAAY,CACnBwd,EAAkBE,CAAM,EACLhB,GACrB,CACF,CACF,CACF,CAAA,CACF,CAAA,EACF,EACA7a,EAACoR,GAAA,CAEC,WAAYyK,EAAO,WAEnB,SAAA,CAAAlc,EAAC6Q,EAAG,EAAA,IACHA,EAAG,CAAA,QAAS,EACX,SAAC7Q,EAAA6S,GAAA,CACE,WAAO,YACN7S,EAAC8S,GAAA,CACC,aAAY,GACZ,UAAU,4BAEV,SAAA9S,EAAC4X,GAAA,CACC,KAAK,sBACL,MAAOsE,EAAO,kBACd,QAAUxS,GAAMA,EAAE,KAClB,KAAOoR,GACLnI,GAAoB,CAClB,MAAArU,EACA,GAAIkU,EACJ,aAAcsI,EAAW,GACzB,eAAgBA,EAAW,IAAA,CAC5B,CAAA,CAEL,CAAA,GAGN,CACF,CAAA,CAAA,CAAA,EA3BK,SAASoB,EAAO,EAAE,EA4BzB,CAAA,GA5EUA,EAAO,EA6EnB,CACD,CAAA,EACH,CAAA,CAEJ,CAAA,EACF,EAEDd,GAAUC,GACTrb,EAACmH,GAAA,CACC,gBAAe,GACf,QAAS3I,EAAE,iBAAiB,EAC5B,aAAcA,EAAE,6BAA6B,CAAA,CAC/C,EAED4c,GAAU,CAACC,GAEPhb,EAAA2C,EAAA,CAAA,SAAA,CACCiZ,GAAAjc,EAACoc,GAAA,CACC,gBAAiB/B,GAAiB,OAC/B3Q,GAAMA,EAAE,OAAS,WACpB,EACA,SAAWA,GACT6O,EACE8D,GAAe,CAAE,GAAI7J,EAAU,MAAAlU,EAAO,WAAYoL,EAAE,KAAO,CAC7D,EAEF,aAAAtL,CAAA,CACF,EAEF4B,EAACmH,GAAA,CACC,QAAS3I,EAAE,eAAe,EAC1B,aAAcA,EAAE,2BAA2B,EAC3C,kBAAmBA,EAAE,cAAc,EACnC,gBAAiBJ,CAAA,CACnB,CAAA,EACF,CAEJ,CAAA,CAAA,CAEJ,EC7Take,GAAa,CAAC,CAAE,GAAApe,EAAI,SAAAsU,EAAU,KAAA+J,KAA4B,CAC/D,KAAA,CAAE,MAAAje,GAAUC,KACZ,CAACkS,EAAO+L,CAAQ,EAAIxd,EAAgB,EACpC,CAACib,EAAaC,CAAc,EAChClb,EAAyC,EAqBvC,OAnBJS,GACE,IACE,QAAQ,IAAI,CACVG,EAAY,QAAQ,qBAAqB,CACvC,GAAI4S,EACJ,aAActU,CAAA,CACf,EACD0B,EAAY,QAAQ,0BAA0B,CAC5C,GAAI4S,EACJ,WAAYtU,CAAA,CACb,CAAA,CACF,EACH,CAAC,CAACwX,EAAQuE,CAAW,IAAM,CACzBuC,EAAS9G,CAAM,EACfwE,EAAeD,CAAW,CAC5B,EACA,CAAC,CAAA,EAGC,CAACA,GAAe,CAACxJ,IACXiH,GAAgB,CAAA,CAAA,EAIvBrX,EAAAyS,GAAA,CAAgB,aAAY,GAAC,UAAU,4BACtC,SAAA,CAAA9S,EAAC2X,GAAkB,CAAA,KAAK,OAAO,MAAO4E,EAAM,EAC5Cvc,EAAC4X,GAAA,CACC,KAAK,SACL,MAAOnH,EACP,QAAU6F,GAAMA,EAAE,KAClB,KAAO7F,GACLgM,GAAe,CAAE,GAAIjK,EAAU,MAAAlU,EAAO,QAASmS,EAAM,GAAK,CAAA,CAE9D,EACAzQ,EAAC4X,GAAA,CACC,KAAK,wBACL,MAAOqC,EACP,QAAUvQ,GAAMA,EAAE,KAClB,KAAOoR,GACLnI,GAAoB,CAClB,GAAIH,EACJ,MAAAlU,EACA,aAAcwc,EAAW,GACzB,eAAgB,UAAA,CACjB,CAAA,CAEL,CACF,CAAA,CAAA,CAEJ,EChCM4B,GAAc,CAAC,CAAE,IAAA3C,CAAA,IAElB1Z,EAAA2C,EAAA,CAAA,SAAA,CAAA+W,EAAI,OAAO,CAAC,EAAE,IAAE/Z,EAAAiZ,GAAA,CAAU,MAAOc,EAAI,IAAM,CAAA,CAAA,CAC9C,CAAA,EAGW4C,GAAyB,CAAC,CAAE,SAAAnK,KAA+B,CAChE,KAAA,CAAE,EAAAhU,GAAMC,IACR8Z,EAAWC,KACX,CAAE,SAAA3T,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnC,CAAE,MAAAzG,GAAUC,KAEZ,CAACsR,EAAW4F,CAAY,EAC5BzW,EAA6C,EACzC,CAAC4d,EAAkBC,CAAmB,EAC1C7d,EAAiC,EAC7B,CAACib,EAAa6C,CAAa,EAC/B9d,EAAyC,EAErC,CAACoH,EAAKC,CAAM,EAAIrH,EAAS,CAAC,EAC1BsH,EAAU,IAAMD,EAAOD,EAAM,CAAC,EAE9B,CAACqG,EAAKmO,CAAM,EAAI5b,EAAS,EAAE,EAC3B,CAACwN,EAAOqO,CAAQ,EAAI7b,EAAS,CAAC,EAC9B,CAACqa,EAAQsB,CAAS,EAAI3b,EAAqB,CAAE,CAAA,EAEnDS,GACE,IAAM,CACJ,MAAMub,EAAS,CACb,MAAAxO,EACA,IAAKC,EAAM,EACX,KAAM,GACN,GAAG4M,CAAA,EAEE,OAAAzZ,EAAY,QAAQ,cAAc,CACvC,GAAGob,EACH,GAAIxI,CAAA,CACL,CACH,EACC3C,GACC4F,EACE5F,EAAU,IAAKW,IAAc,CAAE,GAAGA,EAAU,WAAY,EAAA,EAAQ,CAClE,EACF,CAACpK,EAAKiT,EAAQ7M,EAAOC,CAAG,CAAA,EAGpB,MAAAsQ,EAAmB,MAAO7e,GACvB0B,EAAY,QAAQ,0BAA0B,CACnD,GAAI4S,EACJ,WAAYtU,CAAA,CACb,EAGG,CAACgd,EAAoBC,CAAa,EAAIvU,GAAiB,CAC3D,SAAU,iBACV,SAEKvG,EAAA2C,EAAA,CAAA,SAAA,CAAAxE,EAAE,uBAAuB,EACzByb,GAAa,QACZja,EAACyb,GAAA,CACC,QAAQ,UACR,SAAQ,GACR,QAAO,GACP,MAAOjd,EAAE,uBAAuB,EAChC,UAAU,aAEV,WAAC,IAAE,CAAA,UAAU,aACV,SAAAyb,EAAY,IAAKa,GACf9a,EAAA,SAAA,CAA2B,UAAU,aACnC,SAAA8a,EAAW,MADDA,EAAW,EAExB,CACD,EACH,CAAA,CACF,CAAA,EAEJ,EAEF,oBAAqB,UACrB,UAAW,SAAY,CACjB,GAAA,CACI,MAAAlb,EAAY,QAAQ,YAAY,CACpC,GAAI4S,EACJ,WAAYoK,GAAkB,GAAA,CAC/B,EACD/X,EAASrG,EAAE,wBAAwB,EAAG0G,EAAa,OAAO,EAClDoB,UACDnB,EAAO,CACdL,EAAS,uBAAwBK,CAAK,CACxC,CACF,CAAA,CACD,EAED,GAAI,CAAC0K,EACH,SAAQ6H,GAAgB,CAAA,CAAA,EAGpB,MAAA0D,EAASvL,EAAU,SAAW,EAC9BwL,EAAY,OAAO,KAAKhC,CAAM,EAAE,SAAW,EACjD,OACGhZ,EAAA8L,GAAA,CAAY,QAAQ,QAAQ,UAAU,WACrC,SAAA,CAAAnM,EAACmb,EAAc,EAAA,GACb,CAACC,GAAUC,IACXrb,EAACsb,GAAA,CACC,MAAOzL,EAAU,OACjB,MAAArD,EACA,IAAAC,EACA,YAAaoO,EACb,gBAAiBA,EACjB,gBAAiB,CAACrO,EAAOC,IAAQ,CAC/BoO,EAASrO,CAAK,EACdoO,EAAOnO,CAAG,CACZ,EACA,YAEIpM,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACiH,GACC,CAAA,SAAAjH,EAACmZ,GAAA,CACC,OAAAE,EACA,SAAUsB,EACV,WAAU,EAAA,CAAA,EAEd,IAEC1T,GACC,CAAA,SAAAjH,EAACsD,EAAA,CACC,cAAY,iBACZ,UAAYlG,GACV4C,EAACoL,GAAA,CACE,GAAGhO,EACJ,GAAI4f,GAAiB,CAAE,MAAA1e,EAAO,GAAIkU,EAAU,CAAA,CAC9C,EAGD,WAAE,gBAAgB,CAAA,CAAA,EAEvB,CAAA,EACF,EAGD,SAAA,CAAC4I,GACC/a,EAAAkR,GAAA,CAAgB,aAAY/S,EAAE,WAAW,EAAG,QAAQ,UACnD,SAAA,CAACwB,EAAAwR,GAAA,CACC,WAACC,GACC,CAAA,SAAA,CAACzR,EAAA0R,EAAA,CAAG,cAAY,MAAO,CAAA,EACtB1R,EAAA0R,EAAA,CAAI,SAAElT,EAAA,MAAM,CAAE,CAAA,EACdwB,EAAA0R,EAAA,CAAI,SAAElT,EAAA,aAAa,CAAE,CAAA,EACrBwB,EAAA0R,EAAA,CAAI,SAAElT,EAAA,MAAM,CAAE,CAAA,EACdwB,EAAA0R,EAAA,CAAI,SAAElT,EAAA,OAAO,CAAE,CAAA,EACfwB,EAAA0R,EAAA,CAAI,SAAElT,EAAA,MAAM,CAAE,CAAA,EACfwB,EAAC0R,EAAG,CAAA,cAAY,MAAO,CAAA,EACvB1R,EAAC0R,EAAG,CAAA,cAAY,MAAO,CAAA,CAAA,CAAA,CACzB,CACF,CAAA,EACC7B,EAAU,IAAI,CAACW,EAAUd,IACvBrP,EAAAsR,GAAA,CAAyB,WAAYnB,EAAS,WAC7C,SAAA,CAAAnQ,EAACoR,GACC,CAAA,SAAA,CAAAzR,EAAC6Q,EAAA,CACC,OAAQ,CACN,SAAAnB,EACA,WAAYc,EAAS,WACrB,SAAU,CAAC3P,EAAG6O,IAAa,CACzB,MAAMgM,EAAO7L,EAAU,IAAI,CAACW,EAAUmL,IACpCA,IAAUjM,EACN,CACE,GAAGc,EACH,WAAY,CAACA,EAAS,UAAA,EAExBA,CAAA,EAENiF,EAAaiG,CAAI,CACnB,CACF,CAAA,CACF,IACC7K,EAAG,CAAA,cAAa,eAAeL,EAAS,IAAI,GAC3C,SAAAxQ,EAACoL,GAAA,CACC,GAAI6R,GAAkB,CACpB,MAAA3e,EACA,GAAIkU,EACJ,WAAYhC,EAAS,GAAA,CACtB,EAEA,SAASA,EAAA,IAAA,CAAA,EAEd,EACAxQ,EAAC6Q,EAAI,CAAA,SAAAL,EAAS,WAAY,CAAA,EAC1BxQ,EAAC6Q,EAAI,CAAA,SAAAL,EAAS,IAAK,CAAA,EAClBxQ,EAAA6Q,EAAA,CAAI,SAASL,EAAA,OAAO,KAAK,IACzBK,EACC,CAAA,SAAA7Q,EAAC0c,GAAY,CAAA,IAAKlM,CAAU,CAAA,EAC9B,EACAxQ,EAAC6Q,EAAG,CAAA,MAAO,GACT,SAAA7Q,EAACsD,EAAA,CACC,QAAQ,OACR,UAAYlG,GACV4C,EAACoL,GAAA,CACE,GAAGhO,EACJ,GAAIqb,GAAgB,CAClB,MAAAna,EACA,GAAIkU,EACJ,eAAgB,WAChB,WAAYhC,EAAS,GAAA,CACtB,CAAA,CACH,EAGD,WAAE,kBAAkB,CAAA,CAAA,EAEzB,EACAxQ,EAAC6Q,EAAA,CACC,QAAS,CACP,MAAO,CACL,CACE,MAAOrS,EAAE,QAAQ,EACjB,QAAS,SAAY,CACnBqe,EAAoBrM,CAAQ,EAC5BsM,EACE,MAAMC,EAAiBvM,EAAS,GAAI,CAAA,EAEnB0K,GACrB,CACF,CACF,CACF,CAAA,CACF,CAAA,EACF,EACA7a,EAACoR,GAAA,CAEC,WAAYjB,EAAS,WAErB,SAAA,CAAAxQ,EAAC6Q,EAAG,EAAA,IACHA,EAAG,CAAA,QAAS,EACX,SAAC7Q,EAAA6S,GAAA,CACE,WAAS,YACR7S,EAACsc,GAAA,CACC,SAAA9J,EACA,GAAIhC,EAAS,IACb,KAAMA,EAAS,IAAA,GAGrB,CACF,CAAA,CAAA,CAAA,EAdK,SAASA,EAAS,GAAG,EAe5B,CAAA,GAvFUA,EAAS,GAwFrB,CACD,CAAA,EACH,CAAA,CAEJ,EAED4K,GAAUC,GACTrb,EAACmH,GAAA,CACC,gBAAe,GACf,QAAS3I,EAAE,iBAAiB,EAC5B,aAAcA,EAAE,6BAA6B,CAAA,CAC/C,EAED4c,GAAU,CAACC,GACVrb,EAACmH,GAAA,CACC,QAAS3I,EAAE,gBAAgB,EAC3B,aAAcA,EAAE,4BAA4B,EAC5C,kBAAmBA,EAAE,gBAAgB,EACrC,gBAAiB,IACf+Z,EAASyE,GAAiB,CAAE,MAAA1e,EAAO,GAAIkU,CAAS,CAAC,CAAC,CAAA,CAEtD,CAEJ,CAAA,CAAA,CAEJ,ECrQa0K,GAAsB,CAAC,CAAE,SAAA1K,KAA4B,CAC1D,KAAA,CAAE,EAAAhU,GAAMC,IACR8Z,EAAWC,KACX,CAAE,MAAAla,GAAUC,KAEZ,CAAC4e,EAAcjC,CAAkB,EAAIhJ,GAAU,EAC/C,CAACwD,EAAQC,CAAS,EAAI3W,EAA0C,EAChE,CAACoe,EAAeC,CAAgB,EACpCre,EAAwC,EACpC,CAACse,EAAWC,CAAY,EAAIve,EAA0B,CAAE,CAAA,EAExD,CAACoH,EAAKC,CAAM,EAAIrH,EAAS,CAAC,EAC1BsH,EAAU,IAAMD,EAAOD,EAAM,CAAC,EAE9B,CAACqG,EAAKmO,CAAM,EAAI5b,EAAS,EAAE,EAC3B,CAACwN,EAAOqO,CAAQ,EAAI7b,EAAS,CAAC,EAC9B,CAACqa,EAAQsB,CAAS,EAAI3b,EAAS,EAAE,EAEvCS,GACE,IAAM,CACJ,MAAMub,EAAS,CACb,MAAAxO,EACA,IAAKC,EAAM,EACX,KAAM,GACN,KAAM4M,CAAA,EAED,OAAAzZ,EAAY,QAAQ,cAAc,CACvC,GAAGob,EACH,GAAIxI,CAAA,CACL,CACH,EACCkD,GAAW,CACAA,EAAAA,EAAO,IAAKY,IAAO,CAAE,GAAGA,EAAG,SAAU,IAAQ,CAAC,EAC3CZ,EAAAA,EAAO,IAAKY,IAAO,CAAE,GAAIA,EAAE,GAAK,WAAY,EAAM,EAAE,CAAC,CACpE,EACA,CAAClQ,EAAKiT,EAAQ7M,EAAOC,CAAG,CAAA,EAGpB,MAAA+Q,EAAYtf,GAAewX,GAAQ,KAAMjF,GAAUA,EAAM,KAAOvS,CAAE,EAClEyC,EAAczC,GAClBof,EAAU,KAAMG,GAAMA,EAAE,KAAOvf,CAAE,GAAG,YAAc,GAiDpD,GA/CAuB,GACE,IAAM,CACE,MAAAie,EAAcJ,EACjB,OAAQvD,GAAQA,EAAI,UAAU,EAC9B,IAAI,CAAC,CAAE,GAAA7b,KAASsf,EAAStf,CAAE,CAAC,EAC5B,OAAQoY,GAAM,CAACA,EAAE,QAAQ,EAE5B,OAAO,QAAQ,IACboH,EAAY,IAAI,MAAOjN,GAAU,CAC/B,KAAM,CAACZ,EAAWoK,CAAW,EAAI,MAAM,QAAQ,IAAI,CACjDra,EAAY,QAAQ,wBAAwB,CAC1C,GAAI4S,EACJ,QAAS/B,EAAM,EAAA,CAChB,EACD7Q,EAAY,QAAQ,0BAA0B,CAC5C,GAAI4S,EACJ,QAAS/B,EAAM,EAAA,CAChB,CAAA,CACF,EAEM,MAAA,CACL,GAAGA,EACH,UAAAZ,EACA,YAAAoK,EACA,SAAU,EAAA,CACZ,CACD,CAAA,CAEL,EACC0D,GAAoB,CACnB,IAAInX,EAAS,CAAC,GAAIkP,GAAU,CAAG,CAAA,EACfiI,EAAA,QAASC,GAAkB,CACzC,MAAMjC,EAAQjG,GAAQ,UACnBjF,GAAUmN,EAAc,KAAOnN,EAAM,EAAA,EAE/BjK,EAAA,CACP,GAAGA,EAAO,MAAM,EAAGmV,CAAK,EACxBiC,EACA,GAAGpX,EAAO,MAAMmV,EAAQ,CAAC,CAAA,CAC3B,CACD,EAEDhG,EAAUnP,CAAM,CAClB,EACA,CAAC8W,CAAS,CAAA,EAGR,CAAC5H,EACH,SAAQgC,GAAgB,CAAA,CAAA,EAGpB,MAAA0D,EAAS1F,EAAO,SAAW,EAC3B2F,EAAYhC,IAAW,GAC7B,OACGhZ,EAAA8L,GAAA,CAAY,QAAQ,QAAQ,UAAU,WACrC,SAAA,CAAAnM,EAAC6d,GAAA,CACC,SAAArL,EACA,KAAM2K,EACN,aAAcjC,EACd,cAAAkC,EACA,QAAA9W,CAAA,CACF,GACE,CAAC8U,GAAUC,IACXrb,EAACsb,GAAA,CACC,MAAO5F,EAAO,OACd,MAAAlJ,EACA,IAAAC,EACA,YAAaoO,EACb,gBAAiBA,EACjB,gBAAiB,CAACrO,EAAOC,IAAQ,CAC/BoO,EAASrO,CAAK,EACdoO,EAAOnO,CAAG,CACZ,EACA,eAAe,SACf,sBAAuBjO,EAAE,cAAc,EACvC,kBAAmBmc,EACnB,cACG1T,GACC,CAAA,SAAAjH,EAACsD,EAAA,CACC,cAAY,2BACZ,UAAYlG,GACV4C,EAACoL,IAAM,GAAGhO,EAAO,GAAI0gB,GAAW,CAAE,MAAAxf,EAAO,GAAIkU,CAAA,CAAU,CAAG,CAAA,EAG3D,WAAE,0BAA0B,CAAA,CAAA,EAEjC,EAGD,SAAA,CAAC4I,GACC/a,EAAAkR,GAAA,CAAgB,aAAY/S,EAAE,QAAQ,EAAG,QAAQ,UAChD,SAAA,CAACwB,EAAAwR,GAAA,CACC,WAACC,GACC,CAAA,SAAA,CAACzR,EAAA0R,EAAA,CAAG,cAAY,MAAO,CAAA,EACtB1R,EAAA0R,EAAA,CAAI,SAAElT,EAAA,MAAM,CAAE,CAAA,EACdwB,EAAA0R,EAAA,CAAI,SAAElT,EAAA,aAAa,CAAE,CAAA,EACtBwB,EAAC0R,EAAG,CAAA,cAAY,MAAO,CAAA,EACvB1R,EAAC0R,EAAG,CAAA,cAAY,MAAO,CAAA,CAAA,CAAA,CACzB,CACF,CAAA,EACCgE,EAAO,IAAI,CAACjF,EAAOf,IACjBrP,EAAAsR,GAAA,CAAqB,WAAYhR,EAAW8P,EAAM,EAAE,EACnD,SAAA,CAAApQ,EAACoR,GACC,CAAA,SAAA,CAAAzR,EAAC6Q,EAAA,CACC,OAAQ,CACN,SAAAnB,EACA,WAAY/O,EAAW8P,EAAM,EAAE,EAC/B,SAAU,CAACsN,EAAQpC,EAAOhb,IAAe,CAC1B4c,EAAA,CACX,GAAGD,EAAU,MAAM,EAAG3B,CAAK,EAC3B,CAAE,GAAIlL,EAAM,GAAK,WAAA9P,CAAW,EAC5B,GAAG2c,EAAU,MAAM3B,EAAQ,CAAC,CAAA,CAC7B,CACH,CACF,CAAA,CACF,IACC9K,EAAG,CAAA,cAAa,eAAeJ,EAAM,IAAI,GACxC,SAAAzQ,EAACoL,GAAA,CACC,GAAIqR,GAAe,CACjB,MAAAne,EACA,GAAIkU,EACJ,QAAS/B,EAAM,EAAA,CAChB,EAEA,SAAMA,EAAA,IAAA,CAAA,EAEX,EACAzQ,EAAC6Q,EAAI,CAAA,SAAAJ,EAAM,WAAY,CAAA,EACvBzQ,EAAC6Q,EAAG,CAAA,MAAO,GACT,SAAA7Q,EAACsD,EAAA,CACC,QAAQ,OACR,UAAYlG,GACV4C,EAACoL,GAAA,CACE,GAAGhO,EACJ,GAAIqb,GAAgB,CAClB,MAAAna,EACA,GAAIkU,EACJ,eAAgB,QAChB,WAAY/B,EAAM,EAAA,CACnB,CAAA,CACH,EAGD,WAAE,kBAAkB,CAAA,CAAA,EAEzB,EACAzQ,EAAC6Q,EAAA,CACC,aAAY,GACZ,QAAS,CACP,MAAO,CACL,CACE,MAAOrS,EAAE,QAAQ,EACjB,QAAS,IAAM,CACb6e,EAAiB5M,CAAK,EACHyK,GACrB,CACF,CACF,CACF,CAAA,CACF,CAAA,EACF,EACA7a,EAACoR,GAAA,CAEC,WAAY9Q,EAAW8P,EAAM,EAAE,EAE/B,SAAA,CAAAzQ,EAAC6Q,EAAG,EAAA,EACJ7Q,EAAC6Q,EAAG,CAAA,QAAS,EACX,SAAA7Q,EAAC6S,GACE,CAAA,SAAAlS,EAAW8P,EAAM,EAAE,GAAKA,EAAM,SAC7BpQ,EAACyS,GAAA,CACC,aAAY,GACZ,UAAU,4BAEV,SAAA,CAAA9S,EAAC4X,GAAA,CACC,KAAK,YACL,MAAOnH,EAAM,UACb,QAAU4F,GAAMA,EAAE,KAClB,KAAOA,GACL4G,GAAkB,CAChB,GAAIzK,EACJ,MAAAlU,EACA,WAAY+X,EAAE,GAAA,CACf,CAAA,CAEL,EACArW,EAAC4X,GAAA,CACC,KAAK,wBACL,MAAOnH,EAAM,YACb,QAAU/G,GAAMA,EAAE,KAClB,KAAOA,GACLiJ,GAAoB,CAClB,GAAIH,EACJ,MAAAlU,EACA,aAAcoL,EAAE,GAChB,eAAgBA,EAAE,IAAA,CACnB,CAAA,CAEL,CAAA,CAAA,CAGF,EAAA1J,EAAC0X,GAAgB,EAAA,CAAA,CAErB,CACF,CAAA,CAAA,CAAA,EAzCK,SAASjH,EAAM,EAAE,EA0CxB,CAAA,GAvGUA,EAAM,EAwGlB,CACD,CAAA,EACH,CAAA,CAEJ,EAED2K,GAAU,CAACC,GACVrb,EAACmH,GAAA,CACC,QAAS3I,EAAE,0BAA0B,EACrC,aAAcA,EAAE,gCAAgC,EAChD,gBAAiB,IAAM+Z,EAASuF,GAAW,CAAE,GAAItL,EAAU,MAAAlU,CAAM,CAAC,CAAC,EACnE,kBAAmBE,EAAE,0BAA0B,CAAA,CACjD,EAED4c,GAAUC,GACTrb,EAACmH,GAAA,CACC,gBAAe,GACf,QAAS3I,EAAE,iBAAiB,EAC5B,aAAcA,EAAE,6BAA6B,CAAA,CAC/C,CAEJ,CAAA,CAAA,CAEJ,ECzSawf,GAAe,CAAC,CAAE,UAAAC,EAAW,YAAAC,KAAqC,CACvE,KAAA,CAAE,EAAA1f,GAAMC,IACR,CAAC0f,EAAUC,CAAW,EAAIpf,EAAuC,CAAE,CAAA,EAEvE,OAAAqB,EAAC+E,GAAA,CACC,MAAO5G,EAAE,QAAQ,EACjB,OAAM,GACN,QAAQ,QACR,QAAS0f,EACT,QAAS,CACPle,EAACsD,EAAA,CACC,GAAG,gBAEH,QAAS,IAAM,CACb2a,EAAUE,CAAQ,EACND,GACd,EACA,cAAY,UAEX,WAAE,SAAS,CAAA,EAPR,SAQN,EACAle,EAACsD,EAAA,CACC,cAAY,SACZ,GAAG,eAEH,QAAS+B,GAAc,KACvB,QAAS,IAAM,CACD6Y,GACd,EAEC,WAAE,QAAQ,CAAA,EANP,QAON,CACF,EAEA,SAAA,CAAAle,EAACI,IACC,SAACJ,EAAAqe,GAAA,CAAe,GAAG,kBAAkB,SAAUD,EAAa,CAC9D,CAAA,EACC,OAAO,KAAKD,CAAQ,EAAE,SAAW,GAE9B9d,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAAC4U,GAAQ,EAAA,IACR,IAAE,CAAA,UAAU,aAAc,SAAApW,EAAE,iBAAiB,EAAE,EAChD6B,EAACD,GAAK,CAAA,aAAY,GAChB,SAAA,CAAAJ,EAACQ,EAAA,CACC,MAAOhC,EAAE,uBAAuB,EAChC,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,2BAA2B,EACvC,aAAa,uBAAA,CACf,EAEF,QAAQ,wBACR,gBAAe,GAEf,SAAAwB,EAACse,GAAA,CACC,GAAG,wBACH,KAAK,wBACL,MAAO9f,EACL,0BAA0B2f,EAAS,qBAAqB,EAC1D,EACA,UAAS,GACT,WAAU,GACV,UAAU,YAAA,CACZ,CAAA,CACF,EACAne,EAACQ,EAAA,CACC,MAAOhC,EAAE,kBAAkB,EAC3B,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,sBAAsB,EAClC,aAAa,kBAAA,CACf,EAEF,QAAQ,mBACR,gBAAe,GAEf,SAAAwB,EAACse,GAAA,CACC,GAAG,mBACH,KAAK,mBACL,UAAS,GACT,WAAU,GACV,MAAO9f,EAAE,sBAAsB2f,EAAS,gBAAgB,EAAE,EAC1D,UAAU,YAAA,CACZ,CAAA,CACF,EACAne,EAACQ,EAAA,CACC,gBAAe,GACf,MAAOhC,EAAE,+BAA+B,EACxC,QAAQ,gCACR,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,+BAA+B,EAC3C,aAAa,+BAAA,CACf,EAGF,SAAAwB,EAACiD,GAAA,CACC,GAAG,gCACH,MAAOzE,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,UAAW2f,EAAS,8BACpB,WAAU,GACV,aAAY3f,EAAE,+BAA+B,CAAA,CAC/C,CAAA,CACF,CAAA,EACF,EACAwB,EAAC,MAAI,CAAA,UAAU,aACZ,SAAA,OAAO,QAAQme,CAAQ,EACrB,OAAO,CAAC,CAAA,CAAGrd,CAAK,IAAM,MAAM,QAAQA,CAAK,CAAC,EAC1C,IAAI,CAAC,CAACsF,EAAKtF,CAAK,IACdkC,EAAAA,GAAA,CACC,SAAA,CAAAhD,EAAC4U,GAAQ,EAAA,EACR5U,EAAA,IAAA,CAAE,UAAU,aACX,WAAC,SACE,CAAA,SAAA,CAAMc,EAAA,OAAO,IAAEtC,EAAE4H,CAAG,CAAA,CAAA,CACvB,CACF,CAAA,CAAA,GANaA,CAOf,CACD,EACL,IACCwO,GAAQ,EAAA,EACT5U,EAACyb,GAAA,CACC,QAAQ,UACR,UAAU,aACV,SAAQ,GACR,MAAOjd,EAAE,eAAe,CAAA,CAC1B,CAAA,EACF,CAAA,CAAA,CAAA,CAIR,EChIM+f,GAA2B,CAC/B,YACA,aACA,UACF,EAOaC,GAAwB,CAAC,CAAE,SAAAhM,KAAqC,CACrE,KAAA,CAAE,EAAAhU,GAAMC,IACR,CAAC+R,EAAUiO,CAAW,EAAIzf,EAAuC,EACjE,CAAC0f,EAAcC,CAAkB,EAAIzM,GAAU,EAE/C8C,EAAOpQ,GAAoB,CAAA,CAAE,EAC7B,CAAE,QAAA/C,EAAS,MAAAU,EAAO,aAAAkC,CAAA,EAAiBuQ,EAEnC,CAAE,SAAAnQ,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAEzCtF,GACE,IAAMG,EAAY,QAAQ,kBAAkB,CAAE,GAAI4S,EAAU,EAC3DhC,GAAa,CACZiO,EAAYjO,CAAQ,EACpBjO,EAAMiO,CAAQ,CAChB,EACA,CAAC,CAAA,EAGG,MAAAoO,EAAiB,MAAO9d,GAAwC,CAChE,GAAA,CACF,MAAMlB,EAAY,QAAQ,eAAe,CAAE,GAAI4S,CAAA,EAAY1R,CAAK,EAChE+D,EAASrG,EAAE,uBAAuB,EAAG0G,EAAa,OAAO,EACnD3C,EAAA,CAAE,GAAGzB,CAAA,CAAO,QACXqE,EAAO,CACdL,EAAS,sBAAuBK,CAAK,CACvC,CAAA,EAGIH,EAAW,MAAOwL,GAA2C,CAC7D,GAAA,CACF,MAAM5Q,EAAY,QAAQ,qBACxB,CAAE,GAAI4S,CAAS,EACfhC,CAAA,EAEF3L,EAASrG,EAAE,uBAAuB,EAAG0G,EAAa,OAAO,QAClDC,EAAO,CACdL,EAAS,oBAAqBK,CAAK,CACrC,CAAA,EAGF,OAAKqL,EAKHnQ,EAAC8L,GAAY,CAAA,QAAQ,QAClB,SAAA,CACCuS,GAAA1e,EAACge,GAAA,CACC,UAAWY,EACX,YAAaD,CAAA,CACf,EAEFte,EAACyC,GAAA,CACC,KAAK,eACL,aAAY,GACZ,SAAU2B,EAAaO,CAAQ,EAE/B,SAAA,CAAAhF,EAACQ,EAAA,CACC,MAAOhC,EAAE,QAAQ,EACjB,QAAQ,SACR,YACGiC,EAAS,CAAA,SAAUjC,EAAE,YAAY,EAAG,aAAa,SAAS,EAG7D,SAAAwB,EAACsD,GAAO,QAAQ,YAAY,QAASqb,EAClC,SAAAngB,EAAE,QAAQ,CACb,CAAA,CAAA,CACF,IACCoW,GAAQ,EAAA,EACT5U,EAACQ,EAAA,CACC,MAAOhC,EAAE,uBAAuB,EAChC,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,2BAA2B,EACvC,aAAa,uBAAA,CACf,EAEF,QAAQ,wBACR,gBAAe,GAEf,SAAAwB,EAACgC,EAAA,CACC,KAAK,wBACL,cAAY,wBACZ,aAAcuc,GAAyB,CAAC,EACxC,QAAA1c,EACA,OAAQ,CAAC,CAAE,MAAAI,KAENjC,EAAAgD,EAAA,CAAA,SAAAub,GAAyB,IAAKM,GAC7B7e,EAACse,GAAA,CACC,GAAIO,EAEJ,cAAaA,EACb,UAAW5c,EAAM,QAAU4c,EAC3B,KAAK,wBACL,SAAU,IAAM5c,EAAM,SAAS4c,CAAI,EACnC,MAAOrgB,EAAE,0BAA0BqgB,CAAI,EAAE,EACzC,UAAU,YAAA,EANLA,CAQR,CAAA,EACH,CAAA,CAEJ,CAAA,CACF,EACA7e,EAAC0W,IAAc,GAAG1B,EAChB,WAAC8J,GAAuB,CAAA,UAAS,GAAC,CACpC,CAAA,EACA9e,EAACQ,EAAA,CACC,gBAAe,GACf,MAAOhC,EAAE,+BAA+B,EACxC,QAAQ,gCACR,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,mCAAmC,EAC/C,aAAa,+BAAA,CACf,EAGF,SAAAwB,EAACgC,EAAA,CACC,KAAK,gCACL,cAAY,gCACZ,aAAc,GACd,QAAAH,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,GAAG,gCACH,MAAOzE,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,UAAWyD,EAAM,MACjB,SAAUA,EAAM,SAChB,aAAYzD,EAAE,+BAA+B,CAAA,CAC/C,CAAA,CAEJ,CAAA,CACF,EACAwB,EAACoN,GAAA,CACC,KAAK,yBACL,MAAO,IAAM7K,EAAMiO,CAAQ,EAC3B,SAAQ,GACR,SAAQ,EAAA,CACV,CAAA,CAAA,CACF,CACF,CAAA,CAAA,IApGQkH,GAAgB,CAAA,CAAA,CAsG5B,EC5KA,SAAwBqH,GACtB1d,EAC8B,CAC9B,KAAM,CAACkS,EAAQyL,CAAS,EAAIhgB,EAAkC,IAAI,EAC5D,CAACigB,EAAaC,CAAc,EAAIlgB,EACpC,IAAA,EAGF,SAASmgB,EAAkBC,EAA6B,CACvCF,EAAA,CACb,KAAME,EAAU,KAChB,MAAOA,EAAU,KAAA,CAClB,CACH,CAGA,OAAArf,GAAU,IAAM,CACdif,EAAU,IAAI,EACdE,EAAe,IAAI,EAET,UAAA,YAAY,MAAM,CAAE,KAAA7d,CAAA,CAAM,EAAE,KAAM+d,GAAc,CACxDJ,EAAUI,CAAS,EACnBD,EAAkBC,CAAS,CAAA,CAC5B,CAAA,EACA,CAAC/d,CAAI,CAAC,EAGTtB,GAAU,IAAM,CACd,GAAI,CAACwT,EACH,OAGF,SAAS8L,GAAiB,CACnB9L,GAIL4L,EAAkB5L,CAAM,CAC1B,CAEO,OAAAA,EAAA,iBAAiB,SAAU8L,CAAc,EACzC,IAAM9L,EAAO,oBAAoB,SAAU8L,CAAc,CAAA,EAC/D,CAAC9L,CAAM,CAAC,EAEJ0L,CACT,CC/BO,MAAMK,GAAwB,CAAC,CACpC,GAAAphB,EACA,MAAAkQ,EACA,KAAAmR,EACA,QAAAC,EAAU,OACZ,IAAkC,CAC1B,KAAA,CAAE,EAAAhhB,GAAMC,IACRghB,EAAaC,KAEbC,EADaZ,GAAmB,iBAAmC,GACpC,QAAU,SACzC,CAACa,EAAWC,CAAY,EAAI7gB,EAAS,CAAe,EAGpD8gB,EAAiBxgB,GAAQ,IAAM,CACnC,GAAIqgB,EACK,MAAA,sBAGT,OAAQC,EAAW,CACjB,IAAK,GACI,MAAA,kBACT,IAAK,GACI,MAAA,cACT,IAAK,GACI,MAAA,oBACX,CAAA,EACC,CAACD,EAAkBC,CAAS,CAAC,EAGhC7f,GAAU,IAAM,CACd,GAAI6f,IAAc,EAChB,OAAOH,EAAW,IAAMI,EAAa,GAAkB,GAAI,CAC7D,EACC,CAACD,EAAWH,CAAU,CAAC,EAEpB,MAAAM,EAAkB,MAAOR,GAAiB,CAC1C,GAAA,CACI,MAAA,UAAU,UAAU,UAAUA,CAAI,EACxCM,EAAa,CAAgB,OACf,CACdA,EAAa,CAAe,CAC9B,CAAA,EAIA,OAAA7f,EAACggB,GAAA,CACC,GAAI,eAAe9hB,CAAE,GACrB,OAAQkQ,EACR,aAAY5P,EAAE,iBAAiB,EAC/B,QAAS,IAAMuhB,EAAgBR,CAAI,EACnC,UAAW,IACX,QAAAC,EAEC,WAAEM,CAAc,CAAA,CAAA,CAGvB,EC9CMG,GAAc,CAAC,CACnB,GAAA/hB,EACA,YAAAgiB,EACA,OAAAtU,EACA,OAAAuU,EACA,OAAAlO,CACF,IAAwB,CAChB,KAAA,CAAE,EAAAzT,GAAMC,IACRuW,EAAOlT,KACP,CAAE,UAAAkL,GAAcC,KAChBC,EAAYF,EAAU,gBAAgB,GAAKpB,EAAO,QAAQ,UAG9D,OAAAvL,EAAC6B,GAAM,CAAA,UAAS,GACd,SAAA,CAAAlC,EAACmC,GAAU,CAAA,SAAQ,GACjB,SAAA9B,EAACiL,GACC,CAAA,SAAA,CAAAtL,EAACogB,GAAc,CAAA,GAAAliB,EAAQ,MAAOiiB,EAAQ,WAAU,GAAC,EACjDngB,EAACsf,GAAA,CACC,GAAAphB,EACA,KAAMiiB,EACN,MAAM,eACN,QAAQ,SAAA,CACV,CAAA,CAAA,CACF,CACF,CAAA,IACChe,GACC,CAAA,SAAAnC,EAACsD,EAAA,CACC,QAAQ,YACR,WAAY0R,EAAK,UAAU,SAAW,CAAC9H,EACvC,QAAS+E,EAER,WAAEiO,CAAW,CAAA,CAAA,EAElB,CACF,CAAA,CAAA,CAEJ,EAEMG,GAAsB,CAAC,CAAE,KAAAxV,KAA6B,CACpD,KAAA,CAAE,EAAArM,GAAMC,IACRiH,EAAaC,KAWnB,SAAQ,MAAI,CAAA,UAAU,aAAc,UAVVkF,GACxBA,EACIrM,EAAE,kBAAmB,CACnB,KAAMkH,EAAW,IAAI,KAAKmF,EAAO,GAAI,EAAG,CACtC,UAAW,OACX,UAAW,MAAA,CACZ,CAAA,CACF,EACD,QAE+CA,CAAI,CAAE,CAAA,CAC7D,EAEayV,GAAe,CAAC,CAAE,OAAA1U,EAAQ,OAAAuU,EAAQ,OAAAlO,KAAgC,CACvE,KAAA,CAAE,GAAMxT,IACR,CAAE,SAAAoG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAEnC,CAACwb,EAAeC,CAAgB,EAAIxhB,EACxC4M,EAAO,aAAa,uBAAuB,CAAA,EAEvC6U,EACJ7U,EAAO,aAAa,+BAA+B,EAC/C8U,EACJ9U,EAAO,aAAa,uCAAuC,EAEvD+U,EAAW9V,GAAiB,IAAI,OAAO,QAAA,GAAaA,EAAO,IAE3D,CAAC+V,EAAyBC,CAAiB,EAAIja,GAAiB,CACpE,SAAU,0BACV,WAAY,iCACZ,oBAAqB,UACrB,UAAW,SAAY,CACjB,GAAA,CACI,MAAAhH,EAAY,QAAQ,iBAAiB,CACzC,GAAIgM,EAAO,EAAA,CACZ,EACD4U,EAAiB,MAAS,EACjB3b,EAAA,EAAE,0BAA0B,CAAC,QAC/BM,EAAO,CACdL,EAAS,yBAA0BK,CAAK,CAC1C,CACF,CAAA,CACD,EAED,OAEI9E,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAAC6gB,EAAkB,EAAA,EACnBxgB,EAACG,EAAA,CACC,MAAO,EAAE,cAAc,EACvB,QAAQ,mBACR,UAAU,aAEV,SAAA,CAAAR,EAACigB,GAAA,CACC,GAAG,mBACH,OAAArU,EACA,OAAAuU,EACA,OAAAlO,EACA,YAAY,YAAA,CACd,EACAjS,EAACqgB,GAAoB,CAAA,KAAMI,CAAsB,CAAA,EAChDE,EAAQF,CAAoB,GAC3BzgB,EAACyb,GAAM,CAAA,QAAQ,UAAU,SAAQ,GAAC,MAAO,EAAE,kBAAkB,CAAG,CAAA,CAAA,CAAA,CAEpE,EACC8E,KACE/f,EAAU,CAAA,MAAO,EAAE,eAAe,EAAG,QAAQ,gBAC5C,SAAA,CAAAR,EAACigB,GAAA,CACC,GAAG,gBACH,OAAArU,EACA,OAAQ2U,EACR,OAAQK,EACR,YAAY,kBAAA,CACd,EACA5gB,EAACqgB,GAAoB,CAAA,KAAMK,CAA6B,CAAA,CAAA,EAC1D,CAEJ,CAAA,CAAA,CAEJ,ECpIaI,GAAY,CAAC,CAAE,wBAAAC,KAA8C,CAClE,KAAA,CAAE,QAAAlf,GAAYC,KACd,CAAE,WAAAkf,GAAeniB,KACjB0I,EACJwZ,IAA4B,aACxBC,GAAY,qCAAuC,GACnDA,GAAY,oCAAsC,GAElD,CAAE,EAAAxiB,GAAMC,IAER,CAACN,EAAMkG,CAAM,EAAIrF,EAAS,EAAK,EAEnC,OAAAgB,EAACQ,EAAA,CACC,MAAOhC,EAAE,oBAAoB,EAC7B,QAAQ,yBACR,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,wBAAwB,EACpC,aAAa,oBAAA,CACf,EAGF,SAAAwB,EAACgC,EAAA,CACC,KAAMe,EACJ,4CACF,EACA,aAAa,GACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACT5B,EAACK,EAAA,CACC,UAAW,IACX,SAAS,yBACT,SAAU2D,EACV,SAAU,CAACxD,EAAGC,IAAU,CAChBmB,EAAA,SAASnB,EAAM,SAAU,CAAA,EAC/BuD,EAAO,EAAK,CACd,EACA,WAAYpC,EAAM,OAASzD,EAAE,cAAc,EAC3C,QAASoC,EAAc,OACvB,aAAYpC,EAAE,oBAAoB,EAClC,OAAQL,EAER,SAAA,CAAC6B,EAAAgB,EAAA,CAAa,SAAUiB,EAAM,QAAU,GAAc,MAAM,GACzD,SAAAzD,EAAE,cAAc,CAAA,EAD6B,KAEhD,EAEGwB,EAAAgD,EAAA,CAAA,SAAAuE,EAAU,IAAKyP,GACdhX,EAACgB,EAAA,CACC,SAAUgW,IAAW/U,EAAM,MAE3B,MAAO+U,CAAA,EADFA,CAGR,CAAA,EACH,CAAA,CAAA,CACF,CAAA,CAEJ,CAAA,CAAA,CAGN,ECtEaiK,GAAO,IAAM,CAClB,KAAA,CAAE,EAAAziB,GAAMC,IACR,CACJ,SAAA+F,EACA,QAAA3C,EACA,UAAW,CAAE,OAAAkM,CAAO,GAClBjM,GAA2B,EAC/B,OAEIzB,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACQ,EAAA,CACC,MAAOhC,EAAE,sBAAsB,EAC/B,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,0BAA0B,EACtC,aAAa,sBAAA,CACf,EAEF,QAAQ,uBACR,gBAAe,GAEf,SAAAwB,EAACgC,EAAA,CACC,KAAMe,EACJ,gDACF,EACA,aAAa,QACb,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,GAAG,uBACH,MAAOzE,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,UAAWyD,EAAM,QAAU,OAC3B,SAAWnB,GAAUmB,EAAM,SAASnB,EAAM,UAAU,EACpD,aAAYtC,EAAE,sBAAsB,CAAA,CACtC,CAAA,CAEJ,CAAA,CACF,EACAwB,EAACQ,EAAA,CACC,MAAOhC,EAAE,SAAS,EAClB,QAAQ,aACR,YACGiC,EAAS,CAAA,SAAUjC,EAAE,aAAa,EAAG,aAAa,UAAU,EAE/D,kBAAmBA,EAAE,UAAU,EAC/B,UACEuP,EAAO,aAAaE,GAAQ,gBAAgB,CAAC,EACzCC,GAAiB,MACjBA,GAAiB,QAEvB,WAAU,GAEV,SAAAlO,EAACsF,GAAA,CACC,KAAK,OACL,GAAG,aACH,UACEyI,EAAO,aAAaE,GAAQ,gBAAgB,CAAC,EACzCC,GAAiB,MACjBA,GAAiB,QAEtB,GAAG1J,EACFzB,EAA2B,2BAA2B,EACtD,CAAE,SAAU,EAAK,CACnB,CAAA,CACF,CAAA,CACF,CACF,CAAA,CAAA,CAEJ,EChCame,GAAc,CAAC,CAAE,OAAAtV,EAAQ,KAAAtJ,EAAM,QAAAgE,KAAgC,CACpE,KAAA,CAAE,GAAM7H,IACR,CAAE,SAAAoG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnCyN,EAAW5G,EAAO,GAElB,CAACrE,EAAW4Z,CAAY,EAAIniB,EAEhC,CAAE,CAAA,EAEE,CACJ,QAAA6C,EACA,UAAW,CAAE,QAAA6C,CAAQ,EACrB,aAAAD,GACE3C,GAA2B,EAEzBif,EAA0BtK,GAAS,CACvC,QAAA5U,EACA,KAAM,0BACN,aAAc,EAAA,CACf,EAEK,CAACse,EAAQiB,CAAS,EAAIpiB,EAAS,EAAE,EACjC,CAACqiB,EAAaC,CAAc,EAAItiB,EAAS,EAAE,EAC3C,CAACb,EAAMkG,CAAM,EAAIrF,EAAS,EAAK,EAErCS,GACE,IACE,QAAQ,IAAI,CACVG,EAAY,yBAAyB,gCAAgC,EACrEA,EAAY,QAAQ,gBAAgB,CAClC,GAAI4S,CAAA,CACL,CAAA,CACF,EACH,CAAC,CAACjL,EAAW4Y,CAAM,IAAM,CACvBgB,EAAa5Z,CAAS,EACtB6Z,EAAUjB,EAAO,KAAM,CACzB,EACA,CAAC,CAAA,EAGY,eAAAoB,EACbC,EACAC,EACwB,CACpB,GAAA,CACI,MAAA1P,EAAO,MAAMyP,EAAKhP,CAAQ,EAChC,OAAA3N,EAAS,EAAE,GAAG4c,CAAO,SAAS,EAAGvc,EAAa,OAAO,EAC9C6M,QACA5M,EAAO,CACLL,EAAA,GAAG2c,CAAO,QAAStc,CAAK,CACnC,CACF,CAEA,MAAMuc,EAAyB,SAAY,CACzC,MAAMvB,EAAS,MAAMoB,EAClB/O,GACC5S,EAAY,QAAQ,wBAAwB,CAAE,GAAI4S,EAAU,EAC9D,cAAA,EAEQ2N,EAAAA,GAAQ,OAAS,EAAE,EACrB7Z,GAAA,EAGJ,CAACqb,EAA2BC,CAAmB,EAAIhb,GAAiB,CACxE,SAAU,2BACV,WAAY,0BACZ,oBAAqB,MACrB,kBAAmB,KACnB,UAAW8a,CAAA,CACZ,EAEKG,EAAwB,SAAY,CACxC,MAAMR,EAAc,MAAME,EACvB/O,GACC5S,EAAY,QAAQ,gCAAgC,CAAE,GAAI4S,EAAU,EACtE,aAAA,EAEa6O,EAAAA,GAAa,yBAA2B,EAAE,CAAA,EAGrD,CAACS,EAA0BC,CAAkB,EAAInb,GAAiB,CACtE,SAAU,0BACV,WAAY,yBACZ,oBAAqB,MACrB,kBAAmB,KACnB,UAAWib,CAAA,CACZ,EAED,SACG1V,GACC,CAAA,SAAA9L,EAACyC,GAAA,CACC,SAAU2B,EAAanC,CAAI,EAC3B,aAAY,GACZ,UAAU,aACV,KAAK,iBACL,kBAAmBsJ,EAAO,QAAQ,UAElC,SAAA,CAAA5L,EAAC4hB,EAAoB,EAAA,IACpBG,EAAmB,EAAA,EACpB1hB,EAAC2hB,GAAK,CAAA,OAAM,GACV,SAAA,CAAA3hB,EAAC4hB,GACC,CAAA,SAAA,CAAAjiB,EAACQ,EAAA,CACC,MAAO,EAAE,qBAAqB,EAC9B,QAAQ,+BACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,6BAA6B,EACzC,aAAa,qBAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAK,0BACL,QAAAH,EACA,aAAa,GACb,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,+BACT,SAAQ,GACR,SAAU2D,EACV,SAAU,CAACxD,EAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAe,EAC9BuD,EAAO,EAAK,CACd,EACA,WAAYpC,EAAM,MAClB,QAASrB,EAAc,OACvB,aAAY,EAAE,qBAAqB,EACnC,OAAQzC,EAEP,SAAAoJ,EAAU,IAAKyP,GACdhX,EAACgB,EAAA,CACC,SAAUgW,EAAO,KAAO/U,EAAM,MAE9B,MAAO+U,EAAO,GAEb,SAAOA,EAAA,WAAA,EAHHA,EAAO,EAAA,CAKf,CAAA,CACH,CAAA,CAEJ,CAAA,CACF,GACE+J,IAA4B,cAC5BA,IAA4B,sBAC5B/gB,EAAC8gB,IAAU,wBAAAC,EAAkD,EAE9DA,IAA4B,cAC1B/gB,EAAAQ,EAAA,CACC,WAACib,GAAM,CAAA,QAAQ,OAAO,SAAQ,GAAC,MAAO,EAAE,kBAAkB,CAAG,CAAA,EAC/D,EAEDsF,IAA4B,eAAiB/gB,EAACihB,GAAK,CAAA,CAAA,EACnDjhB,EAAAqD,GAAA,CACC,SAACrD,EAAAsD,EAAA,CAAO,QAAQ,UAAU,KAAK,SAAS,WAAY,CAACoB,EAClD,SAAE,EAAA,MAAM,CACX,CAAA,EACF,CAAA,EACF,GACEqc,IAA4B,iBAC5BA,IAA4B,wBAAyBnM,GAAQ,EAAA,GAC7DmM,IAA4B,iBAC5BA,IAA4B,wBAC3BkB,GACC,CAAA,SAAAjiB,EAACsgB,GAAA,CACC,OAAA1U,EACA,OAAAuU,EACA,OAAQwB,CAAA,CAAA,EAEZ,CAAA,EAEJ,EACC3hB,EAAAgiB,GAAA,CAAK,OAAM,GACV,WAACC,GACC,CAAA,SAAAjiB,EAACQ,EAAA,CACC,MAAO,EAAE,yBAAyB,EAClC,QAAQ,kBACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,6BAA6B,EACzC,aAAa,yBAAA,CACf,EAGF,SAAAJ,EAAC6B,GAAM,CAAA,UAAS,GACd,SAAA,CAAClC,EAAAmC,GAAA,CAAU,SAAQ,GACjB,SAACnC,EAAAkiB,GAAA,CAAc,GAAG,kBAAkB,WAAU,GAC3C,SAAAb,CACH,CAAA,EACF,IACClf,GACC,CAAA,SAAAnC,EAACsD,EAAA,CACC,QAAQ,YACR,QAASwe,EAER,WAAE,YAAY,CAAA,CAAA,EAEnB,CAAA,EACF,CAAA,GAEJ,CACF,CAAA,CAAA,CAAA,CAEJ,CAAA,CAAA,CAEJ,ECvOMK,GAAqB,CAAC,CAAE,GAAAjkB,EAAI,QAAAkkB,KAAuC,CACjE,KAAA,CAAE,EAAA5jB,GAAMC,IAEZ,OAAAuB,EAACiB,GAAA,CACC,SAAQ,GACR,KAAM,EACN,GAAA/C,EACA,cAAY,cACZ,MAAOkkB,GAAS,YAChB,aAAY5jB,EAAE,aAAa,CAAA,CAAA,CAGjC,EAEa6jB,GAAc,CAAC,CAAE,QAAAD,EAAS,MAAAE,EAAQ,MAA8B,CACrE,KAAA,CAAE,EAAA9jB,GAAMC,IACRP,EAAKqkB,KAEX,OAAOD,EACLtiB,EAACmiB,GAAmB,CAAA,GAAAjkB,EAAQ,QAAAkkB,CAAkB,CAAA,EAE9CpiB,EAACQ,EAAA,CACC,MAAOhC,EAAE,aAAa,EACtB,QAASN,EACT,YAAYuC,EAAS,CAAA,SAAUjC,EAAE,iBAAiB,EAAG,aAAcN,EAAI,EAEvE,SAAA8B,EAACmiB,GAAmB,CAAA,GAAAjkB,EAAQ,QAAAkkB,CAAkB,CAAA,CAAA,CAAA,CAGpD,ECrCaI,GAAgB,CAAC,CAC5B,aAAAC,EAAe,GACf,OAAAC,EAAS,EACX,IAGM,CACE,KAAA,CAAE,EAAAlkB,GAAMC,IACR,CACJ,SAAA+F,EACA,UAAW,CAAE,OAAAuJ,CAAO,GAClBjM,GAA+B,EAEnC,OAEIzB,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACQ,EAAA,CACC,MAAOhC,EAAE,UAAU,EACnB,QAAQ,WACR,WAAU,GACV,YACGiC,EAAS,CAAA,SAAUjC,EAAE,cAAc,EAAG,aAAa,WAAW,EAEjE,kBAAmBA,EAAE,UAAU,EAC/B,UAAWuP,EAAO,SAAW,QAAU,UAEvC,SAAA/N,EAACsF,GAAA,CACC,cAAY,WACZ,GAAG,WACH,UAAWyI,EAAO,SAAW,QAAU,UACtC,GAAGvJ,EAAS,WAAY,CAAE,SAAU,GAAM,CAAA,CAC7C,CAAA,CACF,EACC,CAACie,GACAziB,EAACQ,EAAA,CACC,MAAOhC,EAAE,aAAa,EACtB,QAAQ,cACR,WAAU,GACV,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,iBAAiB,EAC7B,aAAa,aAAA,CACf,EAEF,kBAAmBA,EAAE,UAAU,EAC/B,UAAWuP,EAAO,YAAc,QAAU,UAE1C,SAAA/N,EAACogB,GAAA,CACC,cAAY,cACZ,GAAG,cACH,UAAWrS,EAAO,YAAc,QAAU,UACzC,GAAGvJ,EAAS,cAAe,CAAE,SAAU,GAAM,CAAA,CAChD,CAAA,CACF,EAEDke,GACC1iB,EAACQ,EAAA,CACC,MAAOhC,EAAE,uBAAuB,EAChC,QAAQ,wBACR,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,2BAA2B,EACvC,aAAa,uBAAA,CACf,EAGF,SAAAwB,EAACsF,GAAA,CACC,cAAY,wBACZ,GAAG,wBACF,GAAGd,EAAS,YAAY,CAAA,CAC3B,CAAA,CACF,EAEFxE,EAACQ,EAAA,CACC,MAAOhC,EAAE,eAAe,EACxB,QAAQ,gBACR,WAAU,GACV,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,mBAAmB,EAC/B,aAAa,eAAA,CACf,EAEF,kBAAmBA,EAAE,UAAU,EAC/B,UAAWuP,EAAO,cAAgB,QAAU,UAE5C,SAAA/N,EAACogB,GAAA,CACC,cAAY,gBACZ,GAAG,gBACH,UAAWrS,EAAO,cAAgB,QAAU,UAC3C,GAAGvJ,EAAS,gBAAiB,CAAE,SAAU,GAAM,CAAA,CAClD,CAAA,CACF,CACF,CAAA,CAAA,CAEJ,EC/DMme,GAAW,kBAEXC,OAAiB,IAAI,CACzB,CAAC,SAAU,KAAK,EAChB,CAAC,MAAO,KAAK,EACb,CAAC,QAAS,OAAO,CACnB,CAAC,EAMYC,GAAoBC,GAAmBF,GAAW,IAAIE,CAAM,EAE5DC,GAAU,CAAC,CACtB,OAAAL,EAAS,GACT,OAAAM,EAAS,GACT,QAAAC,EAAU,EACZ,IAAoB,CACZ,KAAA,CAAE,GAAMxkB,IAER,CAACykB,EAAUC,CAAW,EAAInkB,EAAiB,EAC3C,CAACokB,EAAmBC,CAAoB,EAAIrkB,EAAS,EAAK,EAE1D,CAAE,QAAA6C,EAAS,MAAAkL,CAAM,EAAIjL,GAA2B,EAChDghB,EAAS/V,EAAM,QAAQ,EAEvB,CAAE,WAAAiU,GAAeniB,KACjBykB,EAAyB,CAC7B,GAAItC,GAAY,wBAA0B,CAAC,EAC3C,GAAIgC,EAAS,CAACL,EAAQ,EAAI,CAAC,CAAA,EAI3B,OAAAtiB,EAACD,GAAK,CAAA,UAAU,aACd,SAAA,CAAAJ,EAACQ,EAAA,CACC,MAAO,EAAE,eAAe,EACxB,UACER,EAACS,EAAA,CACC,SAAU,EAAE,mBAAmB,EAC/B,aAAa,eAAA,CACf,EAEF,QAAQ,gBAER,SAAAT,EAACgC,EAAA,CACC,KAAK,SACL,aAAcshB,EAAuB,CAAC,EACtC,QAAAzhB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,gBACT,SAAU2iB,EACV,SAAU,CAACxiB,EAAGC,IAAU,CAChBmB,EAAA,SAASnB,EAAM,SAAU,CAAA,EAC/BuiB,EAAqB,EAAK,CAC5B,EACA,WAAYphB,EAAM,MAClB,QAASrB,EAAc,OACvB,aAAY,EAAE,eAAe,EAC7B,OAAQwiB,EACR,aAAa,SAEZ,SAAAE,EAAuB,IAAKtM,GAC3BhX,EAACgB,EAAA,CACC,SAAUgW,IAAW/U,EAAM,MAE3B,MAAO+U,CAAA,EADFA,CAAA,CAGR,CAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACCiM,GACCjjB,EAACQ,EAAA,CACC,MAAO,EAAE,YAAY,EACrB,UACER,EAACS,EAAA,CACC,SAAU,EAAE,gBAAgB,EAC5B,aAAa,YAAA,CACf,EAEF,QAAQ,aAER,SAAAT,EAACgC,EAAA,CACC,KAAK,OACL,aAAa,GACb,QAAAH,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACujB,GAAA,CACC,GAAG,aACH,MAAOthB,EAAM,MACb,SAAAihB,EACA,iBAAkB,EAAE,QAAQ,EAC5B,SAAU,CAACpiB,EAAOoiB,IAAa,CAC7BC,EAAYD,CAAQ,EACpBjhB,EAAM,SAASnB,CAAK,CACtB,CAAA,CACF,CAAA,CAEJ,CAAA,CACF,EAEDgiB,IAAWH,IACV3iB,EAACwiB,GAAc,CAAA,aAAcS,EAAS,OAAAP,EAAgB,CAE1D,CAAA,CAAA,CAEJ,EAEac,GAAoB,CAAC,CAChC,SAAAhR,EACA,KAAAlQ,EACA,aAAAlE,CACF,IAA8B,CACtB,KAAA,CAAE,GAAMK,IACRuW,EAAOpQ,GAAwB,CACnC,cAAe,CAAE,SAAU4N,CAAS,EACpC,KAAM,UAAA,CACP,EAEK,CACJ,aAAA/N,EACA,UAAW,CAAE,QAAAE,CAAQ,CACnB,EAAAqQ,EAGF,OAAA3U,EAAC+E,GAAA,CACC,QAASjF,GAAa,OACtB,MAAO,EAAE,cAAc,EACvB,OAAM,GACN,QAAS/B,EACT,QAAS,CACP4B,EAACsD,EAAA,CACC,GAAG,gBAEH,cAAY,UACZ,WAAY,CAACqB,EACb,QAAS,IAAM,CACbF,EAAclF,GAAW,CACvB+C,EAAK/C,CAAM,EACEnB,GACd,CAAA,GACH,EAEC,WAAE,UAAU,CAAA,EAVT,SAWN,EACA4B,EAACsD,EAAA,CACC,GAAG,eAEH,cAAY,SACZ,QAAS+B,GAAc,KACvB,QAAS,IAAM,CACAjH,GACf,EAEC,WAAE,QAAQ,CAAA,EAPP,QAQN,CACF,EAEA,SAAA,CAAA4B,EAACmS,IACC,SAACnS,EAAAkL,GAAA,CAAM,SAAE,EAAA,yBAAyB,EAAE,CACtC,CAAA,IACCwL,GAAc,CAAA,GAAG1B,EAChB,SAAAhV,EAAC+iB,IAAQ,CAAA,EACX,CAAA,CAAA,CAAA,CAGN,EChLaU,GAAkB,CAAC,CAC9B,KAAAnhB,EACA,aAAAlE,CACF,IAA4B,CACpB,KAAA,CAAE,EAAAI,GAAMC,IACRuW,EAAOpQ,KACP,CAAE,QAAA/C,EAAS,aAAA4C,CAAiB,EAAAuQ,EAE5B,CAACoO,EAAmBC,CAAoB,EAAIrkB,EAAS,EAAK,EAE1D0kB,EAAc7kB,GAAA,EAAgB,YAAY,wBAA0B,CAAA,EAEpE8kB,EAAUD,EAAY,OAAO,CACjC,kBACA,iBACA,kBAAA,CACD,EAEKZ,EAASrM,GAAS,CACtB,QAAA5U,EACA,KAAM,iBACN,aAAc8hB,EAAQ,CAAC,CAAA,CACxB,EAGC,OAAAtjB,EAAC+E,GAAA,CACC,QAASjF,GAAa,OACtB,MAAO3B,EAAE,cAAc,EACvB,OAAM,GACN,QAASJ,EACT,QAAS,CACP4B,EAACsD,EAAA,CACC,GAAG,gBACH,cAAY,UAEZ,QAAS,IAAM,CACbmB,EAAcmf,GAAe,CAC3BthB,EAAKshB,CAAU,EACFxlB,GACd,CAAA,GACH,EAEC,WAAE,QAAQ,CAAA,EARP,SASN,EACA4B,EAACsD,EAAA,CACC,GAAG,eACH,cAAY,SAEZ,QAAS+B,GAAc,KACvB,QAAS,IAAM,CACAjH,GACf,EAEC,WAAE,QAAQ,CAAA,EANP,QAON,CACF,EAEA,SAAA,CAAA4B,EAACmS,IACC,SAACnS,EAAAkL,GAAA,CAAM,SAAE1M,EAAA,yBAAyB,EAAE,CACtC,CAAA,EACA6B,EAACD,GAAK,CAAA,UAAU,aACd,SAAA,CAAAJ,EAACQ,EAAA,CACC,MAAOhC,EAAE,eAAe,EACxB,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,mBAAmB,EAC/B,aAAa,eAAA,CACf,EAEF,QAAQ,gBAER,SAAAwB,EAACgC,EAAA,CACC,KAAK,iBACL,QAAAH,EACA,aAAc8hB,EAAQ,CAAC,EACvB,OAAQ,CAAC,CAAE,MAAA1hB,CAAA,IACTjC,EAACU,EAAA,CACC,SAAS,gBACT,SAAU2iB,EACV,SAAU,CAACxiB,EAAGC,IAAU,CACtBmB,EAAM,SAASnB,CAAe,EAC9BuiB,EAAqB,EAAK,CAC5B,EACA,WAAYphB,EAAM,MAClB,QAASrB,EAAc,OACvB,aAAYpC,EAAE,eAAe,EAC7B,OAAQ4kB,EAEP,SAAAO,EAAQ,IAAK3M,GACZhX,EAACgB,EAAA,CACC,SAAUgW,IAAW/U,EAAM,MAE3B,MAAO+U,CAAA,EADFA,CAAA,CAGR,CAAA,CACH,CAAA,CAEJ,CAAA,CACF,EACC0M,EAAY,SAASZ,CAAM,GACzB9iB,EAAA0W,GAAA,CAAc,GAAG1B,EAChB,SAAChV,EAAAwiB,GAAA,CAAc,aAAY,EAAA,CAAC,CAC9B,CAAA,IAEDhiB,EAAU,CAAA,MAAOhC,EAAE,YAAY,EAAG,QAAQ,aACzC,SAAAwB,EAACgC,EAAA,CACC,KAAK,OACL,QAAAH,EACA,aAAc,CAAE,SAAU,EAAG,EAC7B,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACujB,GAAA,CACC,GAAG,aACH,MAAOthB,EAAM,MAAM,MACnB,SAAUA,EAAM,MAAM,SACtB,SAAU,CAACnB,EAAOoiB,IAChBjhB,EAAM,SAAS,CAAE,MAAAnB,EAAO,SAAAoiB,EAAU,CAAA,CAEtC,CAAA,CAAA,EAGN,CAAA,EACF,CAAA,CAAA,CAAA,CAGN,ECrHM7S,GAAO,iBAEAwT,GAAO,CAAC,CAAE,SAAArR,EAAU,KAAAlQ,EAAM,mBAAAE,KAAoC,CACnE,KAAA,CAAE,GAAM/D,IACR,CACJ,QAAAoD,EACA,SAAA2C,EACA,UAAAkG,EACA,UAAW,CAAE,QAAAhG,CAAQ,GACnB5C,GAA2B,EACzB,CAAE,SAAA+C,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAEnC,CAACqd,EAAS0B,CAAU,EAAI9kB,EAAoC,EAC5D,CAAC+kB,EAAkBC,EAAwBC,CAAmB,EAClE/R,GAAU,EACN,CAACgS,EAAgBC,EAAsBC,CAAiB,EAAIlS,GAAU,EACtE,CAAC9L,EAAKC,CAAM,EAAIrH,EAAS,CAAC,EAC1BsH,EAAU,IAAMD,EAAOD,EAAM,CAAC,EAE9Bie,EAAa5N,GAAS,CAC1B,QAAA5U,EACA,KAAMkB,EAAuC,yBAAyB,EACtE,aAAc,OAAA,CACf,EAEDtD,GACE,IAAMG,EAAY,QAAQ,WAAW,CAAE,GAAI4S,EAAU,KAAAnC,GAAM,EAC1DiU,GAASR,EAAWQ,CAAI,EACzB,CAACle,CAAG,CAAA,EAGA,MAAAme,EAAW,MAAOhlB,GAA2B,CAC7C,GAAA,CACI,MAAAilB,EAAW,MAAM5kB,EAAY,QAAQ,uBACzC,CACE,GAAI4S,EACJ,KAAAnC,EACF,EACA9Q,CAAA,EAEFW,GAAA,OACE,IAAI,KAAK,CAACskB,CAAQ,EAAG,CAAE,KAAM,2BAA4B,EACzD,YAAY3B,GAAiBtjB,EAAO,QAAU,EAAE,CAAC,EAAA,EAEnDsF,EAAS,EAAE,iBAAiB,EAAGK,EAAa,OAAO,EAC3CoB,UACDnB,EAAO,CACdL,EAAS,gBAAiBK,CAAK,CACjC,CAAA,EAGIsf,EAAY,MAAOb,GAA2B,CAC9C,GAAA,CACI,MAAAc,EAAW,IAAI,SACf,CAAE,KAAAC,EAAM,GAAGC,CAAA,EAAShB,EAE1B,SAAW,CAACxd,EAAKtF,CAAK,IAAK,OAAO,QAAQ8jB,CAAI,EACnCF,EAAA,OAAOte,EAAKtF,CAAK,EAGnB4jB,EAAA,OAAO,OAAQC,EAAK,KAAM,EAEnC,MAAM/kB,EAAY,QAAQ,kBACxB,CAAE,GAAI4S,EAAU,KAAAnC,EAAK,EACrBqU,CAAA,EAEF7f,EAAS,EAAE,eAAe,EAAGK,EAAa,OAAO,EACzCoB,UACDnB,EAAO,CACdL,EAAS,cAAeK,CAAK,CAC/B,CAAA,EAGF,OACG9E,EAAA8L,GAAA,CAAY,QAAQ,QAAQ,UAAU,iBACpC,SAAA,CACC4X,GAAA/jB,EAACwjB,GAAA,CACC,SAAU9Y,EAAU,UAAU,EAC9B,aAAcsZ,EACd,KAAMO,CAAA,CACR,EAEDL,GACElkB,EAAAyjB,GAAA,CAAgB,aAAcU,EAAsB,KAAMM,EAAW,EAExEpkB,EAAC2hB,GAAK,CAAA,OAAM,GACV,SAAA,CAAAhiB,EAAC6kB,IACC,SAAC7kB,EAAA8kB,GAAA,CAAW,SAAE,EAAA,eAAe,EAAE,CACjC,CAAA,EACA9kB,EAACiiB,GACC,CAAA,SAAAjiB,EAACmS,GACC,CAAA,SAAAnS,EAACkL,IAAM,SAAE,EAAA,WAAW,CAAE,CAAA,CACxB,CAAA,EACF,IACC+W,GACC,CAAA,SAAA5hB,EAACyC,GAAA,CACC,KAAK,iBACL,kBAAmBN,EACnB,aAAY,GAEZ,SAAA,CAAAxC,EAACQ,EAAA,CACC,gBAAe,GACf,MAAO,EAAE,YAAY,EACrB,QAAQ,aACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,gBAAgB,EAC5B,aAAa,YAAA,CACf,EAGF,SAAAT,EAACgC,EAAA,CACC,KAAMe,EAA2B,yBAAyB,EAC1D,QAAAlB,EACA,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,cAAY,aACZ,GAAG,oBACH,MAAO,EAAE,IAAI,EACb,SAAU,EAAE,KAAK,EACjB,UAAWhB,EAAM,QAAU,OAC3B,SAAWnB,GAAUmB,EAAM,SAAS,GAAGnB,CAAK,EAAE,EAC9C,aAAY,EAAE,YAAY,CAAA,CAC5B,CAAA,CAEJ,CAAA,CACF,EACCujB,IAAe,SACbjC,EACCpiB,EAACqiB,IAAY,MAAK,GAAC,QAAAD,EAAkB,EAErC,oCAEHiC,IAAe,QACdrkB,EAACQ,EAAA,CACC,MAAO,EAAE,SAAS,EAClB,QAAQ,UACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,aAAa,EACzB,aAAa,SAAA,CACf,EAGF,SAAAT,EAACsF,GAAA,CACC,GAAG,UACH,KAAK,MACJ,GAAGd,EACFzB,EAA2B,qBAAqB,CAClD,CAAA,CACF,CAAA,CACF,IAEDM,GACC,CAAA,SAAA,CAAArD,EAACsD,EAAA,CACC,cAAY,WACZ,QAAShB,EACT,WAAY,CAACoC,EAEZ,WAAE,MAAM,CAAA,CACX,EACA1E,EAACsD,EAAA,CACC,cAAY,WACZ,QAAQ,YACR,QAAS,IAAM2gB,EAAoB,EAAI,EAEtC,WAAE,iBAAiB,CAAA,CACtB,EACAjkB,EAACsD,EAAA,CACC,cAAY,SACZ,QAAQ,YACR,QAAS,IAAM8gB,EAAkB,EAAI,EACrC,WAAYC,IAAe,OAE1B,WAAE,QAAQ,CAAA,CACb,CAAA,EACF,CAAA,CAAA,CAAA,EAEJ,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,EC5MaU,GAAsB,CAAC,CAClC,SAAAvS,EACA,MAAAwS,EACA,QAAAC,CACF,IAAgC,CACxB,KAAA,CAAE,GAAMxmB,IACR,CAAE,MAAAH,GAAUC,KAEZ,CAAE,SAAAsG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAEnCiQ,EAAOpQ,GAAwB,CACnC,cAAe,CAAE,WAAYtG,CAAM,CAAA,CACpC,EAEK4mB,EAAW,MAAO3lB,GAA2B,CAC7C,GAAA,CACI,MAAAilB,EAAW,MAAM5kB,EAAY,QAAQ,YACzC,CACE,GAAI4S,EACJ,KAAMyS,CACR,EACA1lB,CAAA,EAEFW,GAAA,OACE,IAAI,KAAK,CAACskB,CAAQ,EAAG,CAAE,KAAM,2BAA4B,EACzD,YAAY3B,GAAiBtjB,EAAO,QAAU,EAAE,CAAC,EAAA,EAE1CsF,EAAA,EAAE,uBAAuB,CAAC,EAC7BmgB,UACC7f,EAAO,CACdL,EAAS,sBAAuBK,CAAK,CACvC,CAAA,EAIA,OAAAnF,EAACoF,GAAA,CACC,QAAQ,SACR,MAAO,EAAE,oBAAoB,EAC7B,OAAM,GACN,QAAS4f,EACT,QAAS,CACPhlB,EAACsD,EAAA,CACC,GAAG,gBACH,cAAY,UAEZ,KAAK,SACL,KAAK,uBAEJ,WAAE,QAAQ,CAAA,EAJP,SAKN,EACAtD,EAACsD,EAAA,CACC,GAAG,eACH,cAAY,SAEZ,QAAQ,OACR,QAAS,IAAM,CACP0hB,GACR,EAEC,WAAE,QAAQ,CAAA,EANP,QAON,CACF,EAEA,SAAAhlB,EAACI,GAAA,CACC,GAAG,uBACH,UAAU,aACV,SAAU4U,EAAK,aAAakQ,CAAQ,EAEpC,SAAAllB,EAAC0W,IAAc,GAAG1B,EAChB,WAAC+N,GAAQ,CAAA,OAAM,GAAC,CAClB,CAAA,CAAA,CACF,CAAA,CAAA,CAGN,EClDaoC,GAAa,MACxBnQ,EACA9W,EACAmS,EACA+U,IACG,CACC,GAAA,CACI,MAAAV,EAAW,IAAI,SACf,CAAE,KAAAC,EAAM,GAAGC,CAAA,EAAS5P,EACnB,OAAA,QAAQ4P,CAAI,EAAE,IAAI,CAAC,CAACxe,EAAKtF,CAAK,IACnC4jB,EAAS,OACPte,IAAQ,SAAW,iBAAmBA,EACtCtF,EAAM,SAAS,CACjB,CAAA,EAEO4jB,EAAA,OAAO,OAAQC,CAAI,EAE5B,MAAM/kB,EAAY,QAAQ,UAAU,CAAE,GAAA1B,EAAI,KAAAmS,CAAA,EAAQqU,CAAQ,EACjDU,UACFjgB,EAAO,CACdigB,EAASjgB,CAAK,CAChB,CACF,EAEakgB,GAAiB,CAAC,CAC7B,GAAAnnB,EACA,KAAAmS,EACA,QAAA9L,EACA,SAAA+gB,CACF,IAA2B,CACnB,KAAA,CAAE,EAAA9mB,GAAMC,IACR,CAACkO,EAAM4Y,CAAO,EAAIvmB,EAAS,EAAK,EAChC,CAACkX,EAAMsP,CAAO,EAAIxmB,EAAoC,EACtDgW,EAAOpQ,GAA4B,CAAE,KAAM,UAAY,CAAA,EACvD,CACJ,aAAAH,EACA,UAAW,CAAE,QAAAE,CAAQ,CACnB,EAAAqQ,EAEE,CAAE,SAAAnQ,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAEnC2U,EAAU1E,GAA6B,CAC3CmQ,GAAWnQ,EAAM9W,EAAImS,EAAOlL,GAAU,CAChCA,EACFL,EAAS,cAAeK,CAAK,EAE7BN,EAASrG,EAAE,eAAe,EAAG0G,EAAa,OAAO,CACnD,CACD,CAAA,EAGGqf,EAAW,SAAY,CACvB,GAAA,CACF,MAAMne,EAAM,MAAMxG,EAAY,QAAQ,YAAY,CAChD,GAAA1B,EACA,KAAAmS,CAAA,CACD,EACDmV,EAAQpf,CAAG,EACXlG,GAAA,OACE,IAAI,KAAK,CAACkG,EAAI,UAAW,EAAG,CAC1B,KAAM,0BAAA,CACP,EACD,aAAA,EAGFvB,EAASrG,EAAE,iBAAiB,EAAG0G,EAAa,OAAO,QAC5CC,EAAO,CACdL,EAAS,gBAAiBK,CAAK,CACjC,CAAA,EAIA,OAAAnF,EAACoF,GAAA,CACC,QAASjF,GAAa,OACtB,kBAAiB3B,EAAE,+BAA+B,EAClD,SACG2T,GACC,CAAA,SAAA,CAAAnS,EAAC4W,GAAM,CAAA,aAAa,KAAM,SAAApY,EAAE,+BAA+B,EAAE,EAC5DwB,EAAAkL,GAAA,CAAM,SAAE1M,EAAA,sCAAsC,CAAE,CAAA,CAAA,EACnD,EAEF,OAAQ,GACR,QAAA+F,EACA,QAAS,CACPvE,EAACsD,EAAA,CACC,GAAG,gBAEH,cAAY,UACZ,QAAQ,UACR,WAAY,CAACqB,GAAW,CAACuR,EACzB,QAAS,IAAM,CACTvJ,GACFlI,EAAaiV,CAAM,IAEbnV,GACV,EAEC,WAAE,SAAS,CAAA,EAXR,SAYN,EACAvE,EAACsD,EAAA,CACC,GAAG,eAEH,cAAY,SACZ,QAAS+B,GAAc,KACvB,QAASigB,EAER,WAAE,QAAQ,CAAA,EALP,QAMN,CACF,EAEA,SAAAjlB,EAACqW,GAAc,CAAA,GAAG1B,EAChB,SAAA,CAAC3U,EAAAD,GAAA,CAAK,aAAY,GAChB,SAAA,CAAAJ,EAACQ,EAAA,CACC,MAAOhC,EAAE,cAAc,EACvB,QAAQ,eACR,gBAAe,GAEf,WAACinB,GACC,CAAA,SAAA,CAAAzlB,EAAC0lB,GACC,CAAA,SAAA1lB,EAACse,GAAA,CACC,UAAW,CAAC3R,EACZ,KAAK,mBACL,SAAU,IAAM4Y,EAAQ,EAAK,EAC7B,MAAO/mB,EAAE,2BAA2B,EACpC,GAAG,2BAAA,CAAA,EAEP,IACCknB,GACC,CAAA,SAAA1lB,EAACse,GAAA,CACC,UAAW3R,EACX,KAAK,mBACL,SAAU,IAAM4Y,EAAQ,EAAI,EAC5B,MAAO/mB,EAAE,yBAAyB,EAClC,GAAG,yBAAA,CAAA,EAEP,CAAA,EACF,CAAA,CACF,EACC,CAACmO,GACA3M,EAACQ,EAAA,CACC,MAAOhC,EAAE,aAAa,EACtB,QAAQ,cACR,UACEwB,EAACS,EAAA,CACC,SAAUjC,EAAE,iBAAiB,EAC7B,aAAa,aAAA,CACf,EAGF,SAAA6B,EAAC6B,GAAM,CAAA,UAAS,GACd,SAAA,CAAClC,EAAAmC,GAAA,CAAU,SAAQ,GACjB,SAAAnC,EAACqiB,IAAY,MAAK,GAAC,QAASnM,CAAA,CAAM,CACpC,CAAA,IACC/T,GACC,CAAA,SAAAnC,EAACsD,EAAA,CACC,QAAQ,YACR,cAAY,WACZ,QAASihB,EAER,WAAE,UAAU,CAAA,CAAA,EAEjB,CAAA,EACF,CAAA,CACF,CAAA,EAEJ,EACC5X,GAAQ3M,EAAC+iB,GAAQ,CAAA,QAAO,EAAC,CAAA,CAAA,EAC5B,CAAA,CAAA,CAGN,ECpMa4C,GAAsB,CAAC,CAClC,GAAAznB,EACA,KAAAmS,EACA,QAAA9L,CACF,IAAgC,CACxB,KAAA,CAAE,GAAM9F,IACRuW,EAAOlT,KACP,CAAE,aAAA2C,CAAiB,EAAAuQ,EAEnB,CAAE,SAAAnQ,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAEnC2U,EAAU1E,GAA6B,CAC3CmQ,GAAWnQ,EAAM9W,EAAImS,EAAOlL,GAAU,CAChCA,EACFL,EAAS,cAAeK,CAAK,EAE7BN,EAAS,EAAE,eAAe,EAAGK,EAAa,OAAO,CACnD,CACD,CAAA,EAID,OAAAlF,EAACC,GAAA,CACC,KAAM,GACN,aAAcsE,EACd,oBAAoB,SACpB,SAAS,YACT,UAAW,IAAM,CACfE,EAAaiV,CAAM,IACXnV,GACV,EAEA,SAAAvE,EAAC0W,GAAc,CAAA,GAAG1B,EAChB,SAAAhV,EAAC+iB,IAAQ,QAAO,GAAC,OAAM,EAAA,CAAC,CAC1B,CAAA,CAAA,CAAA,CAGN,ECfM6C,GAAO,CAAC,eAAgB,iBAAiB,EAGzCC,GAAmE,CACvE,eAAgB,CACd,KAAM9iB,EAA2B,kCAAkC,EACnE,MAAO,oBACP,IAAK,iBACP,EACA,kBAAmB,CACjB,KAAMA,EAA2B,yBAAyB,EAC1D,MAAO,uBACP,IAAK,mBACP,CACF,EAWM+iB,GAAa,CAAC,CAClB,SAAAtT,EACA,QAAA4P,EACA,KAAA/R,EACA,UAAA0V,EACA,WAAAC,EACA,SAAAC,CACF,IAAuB,CACf,KAAA,CAAE,EAAAznB,GAAMC,IACR,CAAE,QAAAoD,EAAS,MAAAkL,CAAM,EAAIjL,GAA2B,EAChDokB,EAAQL,GAAaxV,CAAI,EAAE,MAC3BjK,EAAMyf,GAAaxV,CAAI,EAAE,IACzBhP,EAAOwkB,GAAaxV,CAAI,EAAE,KAE1B,CAAC8V,EAAkBxH,CAAkB,EAAIzM,GAAU,EAEnDkU,EAAUrZ,EAAM1L,CAAwB,EAC9C,OAEKhB,EAAA2C,EAAA,CAAA,SAAA,CACCmjB,GAAAnmB,EAAC+kB,GAAA,CACC,QAAS1U,EACT,SAAAmC,EACA,MAAOmM,CAAA,CACT,IAED0H,GAAU,CAAA,MAAO7nB,EAAE0nB,CAAK,EAAG,UAAU,uBACpC,SAAA,CAAClmB,EAAAmS,GAAA,CAAY,UAAU,aACrB,SAACnS,EAAAkL,GAAA,CAAM,WAAE,GAAGgb,CAAK,SAAS,CAAE,CAAA,EAC9B,EACClmB,EAAA8C,GAAA,CAAW,KAAK,iBAAiB,aAAY,GAC5C,SAAA9C,EAACQ,EAAA,CACC,UACGR,EAAAS,EAAA,CAAS,SAAUjC,EAAE,GAAG4H,CAAG,MAAM,EAAG,aAAcA,CAAK,CAAA,EAE1D,MAAO5H,EAAE4H,CAAG,EACZ,QAASA,EACT,gBAAe,GAEf,SAAApG,EAACgC,EAAA,CACC,KAAAX,EACA,QAAAQ,EACA,aAAa,QACb,OAAQ,CAAC,CAAE,MAAAI,CAAA,IACTjC,EAACiD,GAAA,CACC,cAAamD,EACb,GAAIA,EACJ,MAAO5H,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,UAAWyD,EAAM,QAAU,OAC3B,SAAWnB,GAAU,CACb,MAAAoC,EAAIpC,EAAM,WACZoC,IAAM,QACR6iB,EAAU1V,CAAI,EACdpO,EAAM,SAASiB,CAAC,GAEhB8iB,EAAW3V,EAAM,EAAK,CAE1B,EACA,aAAY7R,EAAE4H,CAAG,CAAA,CACnB,CAAA,CAEJ,CAAA,CAAA,EAEJ,CAAA,EACF,EACCgc,GAAS,aAAegE,IAAY,UAClCpE,GAAK,CAAA,OAAM,GACV,SAAAhiB,EAACiiB,IAAS,UAAU,sBAClB,SAAC5hB,EAAAD,GAAA,CAAK,aAAY,GAChB,SAAA,CAAAJ,EAACqiB,IAAY,QAAAD,EAAkB,IAC9B/e,GACC,CAAA,SAAA,CAAArD,EAACsD,EAAA,CACC,QAAQ,YACR,QAAS,IAAM0iB,EAAW3V,EAAM,EAAI,EAEnC,WAAE,YAAY,CAAA,CACjB,EACArQ,EAACsD,EAAO,CAAA,QAAQ,YAAY,QAAS,IAAM2iB,EAAS5V,CAAI,EACrD,SAAE7R,EAAA,WAAW,CAChB,CAAA,EACAwB,EAACsD,GAAO,QAAQ,WAAW,QAASqb,EACjC,SAAAngB,EAAE,QAAQ,EACb,CAAA,EACF,CAAA,CACF,CAAA,CACF,CAAA,EACF,CAEJ,CAAA,CAAA,CAEJ,EAEa8nB,GAAW,CAAC,CAAE,SAAA9T,EAAU,KAAAlQ,KAA0B,CACvD,KAAA,CAAE,EAAA9D,GAAMC,IACR,CAAC8nB,EAAWC,CAAY,EAAIxnB,EAAmB,EAC/C,CAACojB,EAAS0B,CAAU,EAAI9kB,EAAsC,EAC9D,CAACynB,EAAcC,CAAe,EAAI1nB,EAAmB,EACrD,CAAC2nB,EAAYC,CAAa,EAAI5nB,EAAmB,EACjD,CAACsH,EAASugB,CAAU,EAAI7nB,EAAS,CAAC,EAElC,CAAE,SAAA2L,GAAa7I,KACf,CAAE,SAAA+C,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAEzCtF,GACE,IACE,QAAQ,IACNmmB,GAAK,IAAKvV,GACRzQ,EAAY,QAAQ,WAAW,CAAE,GAAI4S,EAAU,KAAAnC,EAAM,CACvD,CACF,EACDiU,GAASR,EAAWQ,CAAI,EACzB,CAAChe,CAAO,CAAA,EAGJ,MAAAie,EAAW,MAAOlU,GAAmB,CACnC,MAAAsL,EAAQiK,GAAK,QAAQvV,CAAI,EAC3B,GAAA,CACF,MAAMiU,EAAO,CAAC,GAAIlC,GAAW,CAAG,CAAA,EAChCkC,EAAK3I,CAAK,EAAI,MAAM/b,EAAY,QAAQ,YAAY,CAClD,GAAI4S,EACJ,KAAAnC,CAAA,CACD,EAEDyT,EAAWQ,CAAI,EACfpkB,GAAA,OACE,IAAI,KAAK,CAACokB,EAAK3I,CAAK,EAAE,UAAW,EAAG,CAClC,KAAM,0BAAA,CACP,EACD,aAAA,EAGF9W,EAASrG,EAAE,iBAAiB,EAAG0G,EAAa,OAAO,QAC5CC,EAAO,CACdL,EAAS,gBAAiBK,CAAK,CACjC,CAAA,EAGIiB,EAAMqgB,EAAeZ,GAAaY,CAAY,EAAE,IAAM,GACtD,CAACK,EAAqBC,CAAc,EAAIngB,GAAiB,CAC7D,SAAUpI,EAAE,iBAAkB,CAC5B,IAAKA,EAAE4H,CAAG,CAAA,CACX,EACD,WAAY5H,EAAE,wBAAyB,CACrC,IAAKA,EAAE4H,CAAG,CAAA,CACX,EACD,oBAAqB,MACrB,kBAAmB,KACnB,UAAW,IAAM,CACfuE,EAASkb,GAAaY,CAAa,EAAE,KAAM,OAAO,EAC7CnkB,GACP,CAAA,CACD,EAEK,CAAC0kB,EAAwBC,CAAiB,EAAIrgB,GAAiB,CACnE,SAAU,oBACV,WAAY,2BACZ,oBAAqB,MACrB,kBAAmB,KACnB,UAAW,IAAM,CACf2d,EAASkC,CAAa,CACxB,CAAA,CACD,EAED,OACGpmB,EAAA8L,GAAA,CAAY,QAAQ,QAAQ,UAAU,iBACpC,SAAA,CACCoa,GAAAvmB,EAACqlB,GAAA,CACC,GAAI7S,EACJ,KAAM+T,EACN,QAAS,IAAM,CACbC,EAAa,MAAS,EACjBlkB,IACLukB,EAAWvgB,EAAU,CAAC,CACxB,EACA,SAAU,IAAM,CACdqE,EAASkb,GAAaY,CAAa,EAAE,KAAM,OAAO,EAClDD,EAAa,MAAS,CACxB,CAAA,CACF,IAEDO,EAAe,EAAA,IACfE,EAAkB,EAAA,EAClBrB,GAAK,IAAI,CAACvV,EAAMsL,IACftb,EAAC2C,GAAA,CACE,SAAA,CAAA2jB,IAAetW,GACdrQ,EAAC2lB,GAAA,CACC,GAAInT,EACJ,KAAAnC,EACA,QAAS,IAAMuW,EAAc,MAAS,CAAA,CACxC,EAEF5mB,EAAC8lB,GAAA,CACC,SAAAtT,EACA,QAAS4P,IAAUzG,CAAK,EACxB,KAAAtL,EACA,UAAWmW,EACX,WAAY,CAAC7Z,EAAMua,IAAU,CAC3BR,EAAgB/Z,CAAI,EACfua,EAGoBF,IAFHF,GAIxB,EACA,SAAU,IAAMF,EAAcvW,CAAI,CAAA,CACpC,CAAA,CAAA,EAtBaA,CAuBf,CACD,CACH,CAAA,CAAA,CAEJ,ECvNM8W,GAAgB,YAQhBC,GAAe,CAAC,CACpB,SAAA5U,EACA,QAAAlM,EACA,kBAAA+gB,EACA,GAAG5W,CACL,IAAyB,CACjB,KAAA,CAAE,EAAAjS,GAAMC,IACR,CAAE,SAAAoG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EAEnC,CAAE,UAAAiI,GAAcC,KAEhBqa,EAAkBxmB,GAAeA,EAAM,KAAOqmB,GAC9Cja,EAAYF,EAAU,gBAAgB,GAAKqa,EAG/C,OAAArnB,EAACunB,GAAA,CACC,WAAYD,EAAe7W,CAAK,GAAK,CAACvD,EACtC,YAAauD,EACb,KAAMA,EAAM,KACZ,SAAU,MAAO3P,GAAU,CACrB,GAAA,CACI,MAAA0mB,GACJhV,EACA/B,EACAA,EAAM,KACN3P,CAAA,EAEF+D,EAASrG,EAAE,oBAAoB,EAAG0G,EAAa,OAAO,EAC9CoB,UACDnB,EAAO,CACdL,EAAS,mBAAoBK,CAAK,CACpC,CACF,CAAA,CAAA,CAGN,EAEasiB,GAAe,CAAC,CAC3B,SAAAjV,EACA,SAAAnU,EACA,WAAAqpB,EACA,kBAAAL,CACF,IAAyB,CACjB,KAAA,CAAE,EAAA7oB,GAAMC,IACR,CAAE,SAAAoG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnC,CAAE,MAAAzG,GAAUC,KACZopB,EAAaC,KAEb,CAACC,EAAYC,CAAa,EAAI9oB,EAAqB,MAAM,EAEzD,CAAC+oB,EAAgBC,CAAiB,EAAIhpB,EAC1CipB,GAAgB,IAAA,EAGZ,CAACC,EAAeC,CAAgB,EAAInpB,EAAS,EAAK,EAElD,CAAC4lB,EAAMwD,CAAO,EAAIppB,EAAsC,EACxD,CAACqpB,EAAcC,CAAmB,EAAItpB,EAAgB,CAAE,CAAA,EACxDupB,EAAmB7M,GACvB4M,EAAoB5M,EAAK,OAAO,CAAC,CAAE,GAAAxd,CAAG,IAAMA,IAAOipB,EAAa,CAAC,EAC7D,CAACqB,EAAWC,CAAY,EAAIzpB,EAAS,EAAK,EAE1C,CAACoH,EAAKC,CAAM,EAAIrH,EAAS,CAAC,EAC1BsH,EAAU,IAAMD,EAAOD,EAAM,CAAC,EAC9BkhB,EAAkBxmB,GAAeA,EAAM,KAAOqmB,GAE9C,CAAE,UAAAna,GAAcC,KAChBC,EAAYF,EAAU,gBAAgB,GAAKqa,EAC3CqB,EAAW1b,EAAU,cAAc,GAAKqa,EAExCsB,EAAS,MAAOnc,EAAgBC,EAAc4M,KAAoB,CAChE,MAAAuP,GACJ,MAAMhpB,EAAY,QAAQ,wBAAwB,CAAE,GAAI4S,EAAU,EAC9DqW,GACJ,MAAMjpB,EAAY,QAAQ,yBAAyB,CAAE,GAAI4S,EAAU,EAC/DsW,EAAe,MAAMlpB,EAAY,aAAa,KAAK,EAEnDmpB,GAAQ7qB,IACZ4qB,EAAa,KAAME,GAAgB9qB,KAAO8qB,EAAY,EAAE,EAEpDC,GAAWJ,GAAqB,IAAKpL,IAAM,CACzC,MAAAhN,EAAQsY,GAAKtL,GAAE,EAAG,EAMjB,MALU,CACf,GAAGA,GACH,KAAMyL,GAAY,SAClB,YAAazY,GAAO,WAAA,CAEf,CACR,EAEK0Y,GAAgBP,GAAoB,IAAKnL,IAAM,CAC7C,MAAAhN,EAAQsY,GAAKtL,GAAE,EAAG,EAMjB,MALU,CACf,GAAGA,GACH,KAAMyL,GAAY,QAClB,YAAazY,GAAO,WAAA,CAEf,CACR,EAEKiL,GAAO,CAAC,GAAGuN,GAAU,GAAGE,EAAa,EACrCjd,GAAQwP,GAAK,IAAK3B,IAAQA,GAAI,IAAI,EACxCqO,EACEU,EACG,OAAQrY,IAAU,CAACvE,GAAM,SAASuE,GAAM,IAAI,CAAC,EAC7C,OAAQA,IAAUA,GAAM,WAAapS,CAAQ,CAAA,EAGlD,MAAMiV,GACJuU,IAAe,OAASuB,GAAW/P,EAAM,EAAIgQ,GAAWtB,CAAc,EAClEuB,GAAW,OAAO9c,CAAK,EACvB+c,GAAO5B,EAAWjM,GAAK,OAAOpI,EAAM,EAAGkW,GAAS,MAAM,CAAC,EAE7D,OAAId,GACFa,GAAK,QAAQ,CACX,GAAIpC,GACJ,KAAM3oB,EAAE,qBAAsB,CAAE,WAAAkpB,EAAY,EAC5C,KAAMO,GAAgB,KACtB,YAAazpB,EAAE,2BAA2B,CAAA,CAC3C,EAGI+qB,GAAK,MAAMD,GAAUA,GAAW,OAAO7c,CAAG,CAAC,CAAA,EAG9C,CAACyO,EAAoBC,CAAa,EAAIvU,GAAiB,CAC3D,SAAUpI,EAAE,oBAAqB,CAC/B,MAAO6pB,EAAa,OACpB,KAAMA,EAAa,CAAC,GAAG,IAAA,CACxB,EACD,WAAY,4BACZ,oBAAqB,SACrB,sBAAuBhjB,GAAc,OACrC,UAAW,SAAY,CACjB,GAAA,CACI,MAAAokB,GACJjX,EACA6V,EAAa,CAAC,EACdA,EAAa,CAAC,EAAE,IAAA,EAElBxjB,EAASrG,EAAE,0BAA0B,EAAG0G,EAAa,OAAO,EACpDoB,UACDnB,EAAO,CACdL,EAAS,yBAA0BK,CAAK,CAC1C,CACF,CAAA,CACD,EAED,OAEK9E,EAAA2C,EAAA,CAAA,SAAA,CACC4hB,GAAA5kB,EAAC0pB,GAAA,CACC,aAAc9E,EACd,WAAA8C,EACA,KAAMQ,EACN,aAAc,IAAMC,EAAiB,CAACD,CAAa,EACnD,MAAO,MAAOxS,GAAW,CACnB,GAAA,CACF,MAAM,QAAQ,IACZA,EAAO,IACL,MAAOjF,GACL,MAAMkZ,GAAenX,EAAU/B,EAAM,MAAOA,EAAM,IAAK,CAC3D,CAAA,EAEF5L,EAASrG,EAAE,oBAAoB,EAAG0G,EAAa,OAAO,EAC9CoB,UACDnB,EAAO,CACdL,EAAS,mBAAoBK,CAAK,CACpC,CACF,CAAA,CACF,EAGFnF,EAAC+G,GAAA,CAEC,OAAA4hB,EACA,aAAc,mBAAmBviB,CAAG,GACpC,qBACEyhB,IAAe,OAAS,eAAiB,OAE3C,aAAY,GACZ,YAAW,GACX,YAAaA,IAAe,OAC5B,SAAWnM,GAAS6M,EAAgB,CAAC,GAAG7M,CAAI,CAAC,EAC7C,oBACE1b,EAACmZ,GAAA,CACC,WAAA0O,EACA,SAAWA,GAAeC,EAAcD,CAAU,CAAA,CACpD,EAEF,YAEIxnB,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAAC4pB,GAAA,CACC,WAAA/B,EACA,KAAME,EACN,SAAWF,GAAeC,EAAcD,CAAU,EAClD,OAAS/mB,GAAU,CACjBknB,EAAkBlnB,CAAK,EACfwF,GACV,CAAA,CACF,EACC4G,GAEG7M,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACmb,EAAc,EAAA,EACdnb,EAAAiH,GAAA,CACC,SAACjH,EAAAsD,EAAA,CAAO,QAAS,IAAM6kB,EAAiB,EAAI,EACzC,SAAA3pB,EAAE,gBAAgB,CACrB,CAAA,EACF,IACCyI,GACC,CAAA,SAAAjH,EAAC6pB,GAAA,CACC,SAAArX,EACA,aAAA6V,EACA,QAAA/hB,CAAA,CAAA,EAEJ,IACCW,GACC,CAAA,SAAAjH,EAAC4Z,GAAA,CACC,SACGkQ,GAAY,CAAA,SAAU,IAAMrB,EAAa,CAACD,CAAS,EAAG,EAEzD,OAAQA,EACR,QAAO,GACP,cAAe,CACbxoB,EAACub,GAAA,CAEC,WAAY8M,EAAa,SAAW,EACpC,QAAS,SAAY,CACf,GAAA,CACF,MAAM,QAAQ,IACZA,EAAa,IAAKtO,GAChB0P,GACEjX,EACA,CAAE,GAAGuH,CAAI,EACTA,EAAI,IACN,CACF,CAAA,EAGF0O,EAAa,EAAK,EAClBF,EAAgB,CAAE,CAAA,EACT1jB,EAAArG,EAAE,0BAA0B,CAAC,EAC9B8H,UACDnB,EAAO,CACdL,EAAS,yBAA0BK,CAAK,CAC1C,CACF,EAEC,WAAE,QAAQ,CAAA,EAvBP,WAwBN,CACF,CAAA,CAAA,EAEJ,CAAA,EACF,CAAA,EAEJ,EAEF,QAAS,CACP,CACE,KAAM,OACN,WAAY,sBACZ,aAAe4U,GACTuN,EAAevN,CAAG,EAElB/Z,EAACoL,GAAK,CAAA,GAAI2e,GAAiB,CAAE,MAAAzrB,EAAO,SAAAkU,CAAS,CAAC,EAC3C,SAAAuH,EAAI,IACP,CAAA,EAGGA,EAAI,IAEf,EACA,CACE,KAAM,OACN,WAAY,eACZ,aAAeA,GACb/Z,EAAConB,IAAa,SAAA5U,EAAoB,QAAAlM,EAAmB,GAAGyT,EAAK,CAEjE,EACA,CAAE,KAAM,aAAc,CACxB,EACA,QACE7M,EACI,CACE,CACE,MAAO1O,EAAE,QAAQ,EACjB,WAAY,MAAOub,IACDwO,EAAA,CAACxO,CAAG,CAAC,EACFmB,IACZ,GAEX,CAAA,EAEF,CAAC,EAEP,WACElb,EAACmH,GAAA,CACC,QAAS3I,EAAE,mBAAmB,EAC9B,aAAcA,EAAE,+BAA+B,EAC/C,kBAAmBA,EAAE,gCAAgC,EACrD,gBAAiB,IAAM2pB,EAAiB,EAAI,CAAA,CAC9C,CAAA,EA/HG/hB,CAiIP,CACF,CAAA,CAAA,CAEJ,EClWa4jB,GAAmB,CAAC,CAC/B,KAAAzK,EACA,KAAA/I,EACA,MAAApI,CACF,IAA6B,CACrB,KAAA,CAAE,GAAM3P,IAEd,OAAO+X,EACLxW,EAACjD,GAAA,CACC,GAAIqR,EACJ,UACG5Q,GACC,CAAA,SAAAwC,EAACsf,IAAsB,GAAG,OAAO,KAAAC,EAAY,MAAAnR,CAAA,CAAc,CAC7D,CAAA,EAGF,SAAApO,EAACiB,IAAiB,GAAI,aAAamN,CAAK,GAAI,KAAM,GAAI,MAAOmR,CAAM,CAAA,CAAA,CAAA,EAGpElf,EAAAyY,GAAA,CAAW,QAAQ,QAAQ,GAAI1K,EAC9B,SAAA,CAACpO,EAAA4W,GAAA,CAAM,aAAa,KAAK,KAAK,KAC3B,SAAE,EAAA,GAAGxI,CAAK,IAAI,CACjB,CAAA,IACC4K,GAAgB,CAAA,SAAA,EAAE,GAAG5K,CAAK,YAAY,EAAE,CAC3C,CAAA,CAAA,CAEJ,ECCM6b,GAAkB,CAAC,CACvB,gBAAAC,CACF,IAEM,CACJ,KAAM,CAAC9jB,EAAKC,CAAM,EAAIrH,EAAS,CAAC,EAChC,OAAAe,GAAU,IAAM,CACdsG,EAAOD,EAAM,CAAC,CAAA,EACb,CAAC8jB,CAAe,CAAC,EAElBlqB,EAAC+G,GAAA,CAEC,OAAQ,IAAM,QAAQ,QAAQmjB,CAAe,EAC7C,aAAa,2BACb,qBAAqB,oBACrB,QAAS,CACP,CACE,KAAM,aACN,WAAY,MACd,EACA,CACE,KAAM,gBACN,WAAY,mBACd,EACA,CACE,KAAM,gBACN,WAAY,UACd,EACA,CACE,KAAM,gBACN,WAAY,UACd,CACF,CAAA,EArBK9jB,CAAA,CAwBX,EAEM+jB,GAAiB,CAAC,CACtB,eAAAC,CACF,IAEM,CACJ,KAAM,CAAChkB,EAAKC,CAAM,EAAIrH,EAAS,CAAC,EAChC,OAAAe,GAAU,IAAM,CACdsG,EAAOD,EAAM,CAAC,CAAA,EACb,CAACgkB,CAAc,CAAC,EAGjBpqB,EAAC+G,GAAA,CAEC,OAAQ,IAAM,QAAQ,QAAQqjB,CAAc,EAC5C,aAAa,6BACb,qBAAqB,gBACrB,QAAS,CACP,CACE,KAAM,OACN,WAAY,MACd,EACA,CACE,KAAM,cACN,WAAY,QACd,CACF,CAAA,EAbKhkB,CAAA,CAgBX,EAEaikB,GAAiB,CAAC,CAAE,SAAA7X,EAAU,SAAAnU,KAAoC,CAC7E,MAAMisB,EAAS,SACT,CAAE,GAAM7rB,IACR,CAAE,QAAAC,GAAYC,KACd,CAAE,MAAAL,GAAUC,KACZgsB,EAAc1rB,GAAA,EAAgB,oBAAqBR,CAAQ,EAE3D,CAACmsB,EAAkBC,CAAmB,EAAIzrB,EAE9C,CAAE,CAAA,EACE,CAAC0rB,EAAaC,CAAc,EAAI3rB,EAAS,EAAK,EAC9C,CAACF,EAAUC,CAAW,EAAIC,EAAmB,CAACsrB,CAAM,CAAC,EACrD,CAACM,EAAWC,CAAY,EAAI7rB,EAAS,CAAC,EAEtC,CAACoH,EAAKC,CAAM,EAAIrH,EAAS,EAAE,EAC3BsH,EAAU,IAAMD,EAAO,OAAO,OAAO,SAAS,EAAE,EAChD,CAAC+jB,EAAgBU,CAAiB,EAAI9rB,EAC1C,CAAC,CAAA,EAEG,CAACkrB,EAAiBa,CAAkB,EAAI/rB,EAE5C,CAAE,CAAA,EACE,CAACqiB,EAAaC,CAAc,EAAItiB,EAAS,EAAE,EAC3C,CAACgsB,EAAUC,CAAW,EAAIjsB,EAAS,EAAE,EACrC,CAACksB,EAASC,CAAU,EAAInsB,EAAS,EAAE,EAEnCosB,EAAc3gB,GAAO,IAAI,EACzB4gB,EAAc5gB,GAAO,IAAI,EACzB6gB,EAAc7gB,GAAO,IAAI,EACzB8gB,EAAc9gB,GAAO,IAAI,EACzB+gB,EAAc/gB,GAAO,IAAI,EAEzBuK,EAAOpQ,KAEP,CAAE,UAAAoI,IAAcC,KAChBwe,GAAeze,GAAU,YAAY,EAE3C,OAAAvN,GACE,IAAMG,EAAY,QAAQ,yBAAyB,CAAE,GAAI4S,EAAU,EAClEqW,IAAyB4B,EAAoB5B,EAAoB,EAClE,CAAC,CAAA,EAGHppB,GACE,SAAY,CACJ,MAAAgR,GAAQ3R,EAAS,KAAK,GAAG,EACzBsrB,EAAiB,MAAMxqB,EAAY,QAAQ,mBAAmB,CAClE,GAAI4S,EACJ,cAAelU,EACf,MAAAmS,GACA,KAAM,SAAA,CACP,EASM,MAAA,CACL,WARkB,MAAM7Q,EAAY,QAAQ,2BAA2B,CACvE,GAAI4S,EACJ,MAAA/B,EAAA,CACD,EAMC,eAAA2Z,CAAA,CAEJ,EACA,CAAC,CAAE,WAAAsB,GAAY,eAAAtB,KAAqB,CAClCU,EAAkBV,CAAc,EACrBsB,GAAA,IAAKC,IAAW,CACzBA,GAAO,KAAOpB,EAAY,OACvB5d,IAASA,GAAK,KAAOgf,GAAO,gBAC7B,CAAC,CAAA,CACJ,EAEDZ,EAAmBW,EAAU,EACrBplB,GACV,EACA,CAACxH,CAAQ,CAAA,EAGXW,GACE,SAAY,CACJ,MAAAgR,GAAQ3R,EAAS,KAAK,GAAG,EACzB0X,EAAOxB,EAAK,UAAU,MAAM,EAClC,OAAKwB,EAEE,MAAM,QAAQ,IAAI,CACvB5W,EAAY,QAAQ,4BAA4B,CAC9C,GAAI4S,EACJ,OAAQgE,EAAK,CAAC,EACd,MAAA/F,EAAA,CACD,EACD7Q,EAAY,QAAQ,yBAAyB,CAC3C,GAAI4S,EACJ,OAAQgE,EAAK,CAAC,EACd,MAAA/F,EAAA,CACD,EACD7Q,EAAY,QAAQ,wBAAwB,CAC1C,GAAI4S,EACJ,OAAQgE,EAAK,CAAC,EACd,MAAA/F,EAAA,CACD,CAAA,CACF,EAlBiB,EAmBpB,EACA,CAAC,CAAC4Q,GAAa2J,EAAUE,EAAO,IAAM,CACrB5J,EAAAxhB,GAAgBuhB,EAAW,CAAC,EAC/B4J,EAAAnrB,GAAgBkrB,CAAQ,CAAC,EAC1BG,EAAArrB,GAAgBorB,EAAO,CAAC,CACrC,EACA,CAAClW,EAAK,UAAU,MAAM,EAAGlW,CAAQ,CAAA,EAK/BuB,EAAA2C,EAAA,CAAA,SAAA,CAAC3C,EAAA8L,GAAA,CAAY,QAAQ,QAClB,SAAA,CAAAzN,GACEsB,EAAAmS,GAAA,CAAY,UAAU,gCACrB,WAACjH,GACC,CAAA,SAAA,CAAAlL,EAAC4rB,GAAmB,EAAA,EAAE,IAAE,EAAE,iBAAiB,CAAA,CAAA,CAC7C,CACF,CAAA,EAEFvrB,EAACD,GAAK,CAAA,aAAY,GAChB,SAAA,CAAAJ,EAACQ,EAAA,CACC,MAAO,EAAE,gBAAgB,EACzB,QAAQ,iBACR,UACER,EAACS,EAAA,CACC,SAAU,EAAE,oBAAoB,EAChC,aAAa,gBAAA,CACf,EAGF,SAAAJ,EAAC6B,GAAM,CAAA,UAAS,GACd,SAAA,CAAClC,EAAAmC,GAAA,CAAU,SAAQ,GACjB,SAAAnC,EAACU,EAAA,CACC,SAAS,iBACT,QAASE,EAAc,eACvB,mBAAoB,EAAE,gBAAgB,EACtC,SAAU,IAAM+pB,EAAe,CAACD,CAAW,EAC3C,OAAQA,EACR,WAAY5rB,EACZ,SAAU,CAAC+B,GAAGC,IAAU,CACtB,MAAMkW,GAASlW,EACXhC,EAAS,SAASkY,EAAM,EACtBA,KAAWsT,GACbvrB,EAAYD,EAAS,OAAQiU,IAASA,KAASiE,EAAM,CAAC,EAGxDjY,EAAY,CAAC,GAAGD,EAAUkY,EAAM,CAAC,CAErC,EACA,kBAAiB,EAAE,gBAAgB,EACnC,gBAAiB,EAAE,2BAA2B,EAE7C,SAAAwT,EAAiB,IAAI,CAACxT,GAAQ2E,IAC5B3b,EAAAgB,EAAA,CAAyB,MAAOgW,GAAO,IAArB,EAAA2E,CAA2B,CAC/C,CAAA,CAAA,EAEL,EACA3b,EAACmC,GACC,CAAA,SAAAnC,EAACkiB,GAAc,CAAA,UAAU,4CACtB,SAASpjB,EAAA,KAAK,GAAG,CAAA,CACpB,CACF,CAAA,CAAA,EACF,CAAA,CACF,EACC2sB,IACCzrB,EAAC0W,GAAc,CAAA,GAAG1B,EAChB,SAAAhV,EAAC+W,GAAA,CACC,KAAK,OACL,MAAM,QACN,SAAU,EAAE,UAAU,EACtB,aAAa,GACb,QAASnW,EAAc,UACvB,WAAU,EAAA,CAAA,EAEd,CAAA,EAEJ,CAAA,EACF,EAECP,EAAAwrB,GAAA,CAAK,UAAS,GAAC,UAAU,kCACxB,SAAA,CAACxrB,EAAAyrB,GAAA,CAAS,KAAM,EACd,SAAA,CAAA9rB,EAAC+rB,GAAA,CACC,kBAAgB,oCAChB,SAAU,EACV,GAAG,2BACH,IAAKX,EAEL,SAAAprB,EAACiqB,IAAgB,gBAAAC,CAAkC,CAAA,CAAA,CACrD,EACAlqB,EAAC+rB,GAAA,CACC,kBAAgB,sCAChB,SAAU,EACV,GAAG,6BACH,IAAKV,EACL,OAAM,GAEN,SAAArrB,EAACmqB,IAAe,eAAAC,CAAgC,CAAA,CAAA,CAClD,EACApqB,EAAC+rB,GAAA,CACC,kBAAiB,EAAE,sBAAsB,EACzC,SAAU,EACV,GAAG,6BACH,IAAKT,EACL,OAAM,GAEN,SAAAtrB,EAACgqB,GAAA,CACC,KAAM3I,EACN,KAAMrM,EAAK,UAAU,MAAM,EAC3B,MAAM,sBAAA,CACR,CAAA,CACF,EACAhV,EAAC+rB,GAAA,CACC,kBAAiB,EAAE,kBAAkB,EACrC,SAAU,EACV,GAAG,yBACH,IAAKR,EACL,OAAM,GAEN,SAAAvrB,EAACgqB,GAAA,CACC,KAAMkB,EACN,KAAMlW,EAAK,UAAU,MAAM,EAC3B,MAAM,kBAAA,CACR,CAAA,CACF,EACAhV,EAAC+rB,GAAA,CACC,kBAAiB,EAAE,mBAAmB,EACtC,SAAU,EACV,GAAG,0BACH,IAAKP,EACL,OAAM,GAEN,SAAAxrB,EAACgqB,GAAA,CACC,KAAMgB,EACN,KAAMhW,EAAK,UAAU,MAAM,EAC3B,MAAM,mBAAA,CACR,CAAA,CACF,CAAA,EACF,EACAhV,EAAC8rB,GAAS,CAAA,KAAM,EACd,SAAAzrB,EAAC2rB,GAAA,CACC,GAAG,OAEH,WAAU,GACV,UAAWpB,EACX,SAAU,CAAC/pB,GAAGuF,IAAQykB,EAAazkB,CAAa,EAEhD,SAAA,CAAApG,EAACisB,GAAA,CACC,GAAG,2BACH,gBAAc,2BACd,SAAU,EACV,QACGC,GACE,CAAA,SAAA,CAAA,EAAE,0BAA0B,EAAG,IAChClsB,EAACS,EAAA,CACC,aAAa,2BACb,SAAU,EAAE,8BAA8B,EAC1C,gBAAiB,GACjB,OAAM,EAAA,CACR,CAAA,EACF,EAEF,cAAe2qB,CAAA,CACjB,EACAprB,EAACisB,GAAA,CACC,GAAG,6BACH,gBAAc,6BACd,SAAU,EACV,QACGC,GACE,CAAA,SAAA,CAAA,EAAE,4BAA4B,EAAG,IAClClsB,EAACS,EAAA,CACC,aAAa,6BACb,SAAU,EAAE,gCAAgC,EAC5C,gBAAiB,GACjB,OAAM,EAAA,CACR,CAAA,EACF,EAEF,cAAe4qB,CAAA,CAChB,EACDrrB,EAACisB,GAAA,CACC,GAAG,uBACH,gBAAc,uBACd,SAAU,EACV,QACGC,GACE,CAAA,SAAA,CAAA,EAAE,sBAAsB,EAAG,IAC5BlsB,EAACS,EAAA,CACC,aAAa,uBACb,SAAU,EAAE,0BAA0B,EACtC,gBAAiB,GACjB,OAAM,EAAA,CACR,CAAA,EACF,EAEF,cAAe6qB,CAAA,CACjB,EACAtrB,EAACisB,GAAA,CACC,GAAG,mBACH,gBAAc,mBACd,SAAU,EACV,QACGC,GACE,CAAA,SAAA,CAAA,EAAE,kBAAkB,EAAG,IACxBlsB,EAACS,EAAA,CACC,aAAa,mBACb,SAAU,EAAE,sBAAsB,EAClC,gBAAiB,GACjB,OAAM,EAAA,CACR,CAAA,EACF,EAEF,cAAe8qB,CAAA,CACjB,EACAvrB,EAACisB,GAAA,CACC,GAAG,oBACH,gBAAc,oBACd,SAAU,EACV,QACGC,GACE,CAAA,SAAA,CAAA,EAAE,mBAAmB,EAAG,IACzBlsB,EAACS,EAAA,CACC,aAAa,oBACb,SAAU,EAAE,uBAAuB,EACnC,gBAAiB,GACjB,OAAM,EAAA,CACR,CAAA,EACF,EAEF,cAAe+qB,CAAA,CACjB,CAAA,CAAA,EAzFKplB,CAAA,EA2FT,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,EC3aa+lB,GAAiB,CAAC,CAAE,OAAAvgB,KAAkC,CAC3D,KAAA,CAAE,EAAApN,GAAMC,IACR,CAAE,SAAAoG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnC,CAAE,MAAAzG,GAAUC,KAEZ,CAAC6tB,EAAgBC,CAAiB,EAAIrtB,EAA6B,EAEnE,CAAE,UAAAgO,GAAcC,KAChBqf,EAAmBtf,EAAU,gBAAgB,EAEnDvN,GACE,IACEG,EAAY,QAAQ,sBAAsB,CACxC,GAAIgM,EAAO,EAAA,CACZ,EACFwgB,GAAmBC,EAAkBD,CAAc,EACpD,CAAC,CAAA,EAGG,MAAAG,EAAc,MAAO7Q,GAAgB,CACrC,GAAA,CACF,MAAM8Q,EAAa9Q,EAChB,OAAQ3B,GAAQA,EAAI,SAAW,MAAS,EACxC,IAAKA,GAAQA,EAAI,IAA0B,EAC3C,OACG,MAAAna,EAAY,MAAM,qBAAqB,CAC3C,GAAIwsB,GAAgB,GACpB,MAAOI,CAAA,CACR,EACD,MAAM,QAAQ,IACZ9Q,EACG,OAAQ3B,GAAQA,EAAI,SAAW,MAAS,EACxC,IAAKA,GACJna,EAAY,MAAM,sBAAsB,CACtC,GAAIwsB,GAAgB,GACpB,eAAgBrS,EAAI,OAAQ,GAC5B,MAAO,CAACA,EAAI,IAA0B,CAAA,CACvC,CACH,CAAA,EAEJlV,EAASrG,EAAE,2BAA2B,EAAG0G,EAAa,OAAO,QACtDC,EAAO,CACdL,EAAS,0BAA2BK,CAAK,CAC3C,CAAA,EAEF,OAAOinB,EAEH/rB,EAAA2C,EAAA,CAAA,SAAA,CAAC3C,EAAA8L,GAAA,CAAY,UAAU,YACrB,SAAA,CAACnM,EAAAysB,GAAA,CAAe,UAAU,uDAAwD,CAAA,IACjF,OAAK,CAAA,UAAU,aACd,SAACpsB,EAAA8K,GAAA,CAAM,QAAQ,2BACZ,SAAA,CAAA,GACDnL,EAACoL,GAAA,CACC,GAAIshB,GAAO,CAAE,MAAApuB,EAAO,GAAI8tB,EAAe,GAAK,IAAK,WAAY,EAE5D,SAAA,CAAE,KAAMA,EAAe,QAAS,CAAA,CACnC,CAAA,CAAA,CACF,CACF,CAAA,CAAA,EACF,EACApsB,EAAC2sB,GAAA,CACC,KAAM/gB,EAAO,SACb,GAAIwgB,EAAe,GACnB,KAAK,QACL,UAAWE,GAAoB1gB,EAAO,QAAQ,UAC9C,KAAM2gB,CAAA,CACR,CACF,CAAA,CAAA,IAEC7U,GAAgB,CAAA,CAAA,CAErB,ECTMkV,GAAqB,CAAC,CAC1B,SAAAC,EACA,MAAA/rB,EACA,KAAAwB,EACA,OAAAsJ,EACA,qBAAAkhB,EACA,mBAAA5R,CACF,IAA+B,CACvB,KAAA,CAAE,EAAA1c,GAAMC,IACR,CAACqoB,EAAqBC,CAAc,EAAIngB,GAAiB,CAC7D,SAAU,sBACV,WAAY,iBACZ,oBAAqB,UACrB,UAAW,IAAM,CACfimB,EAAS,CAAC/rB,CAAK,EACVwB,GACP,CAAA,CACD,EAEKyqB,EAASztB,GAA2B,IAAM,CAC9C,MAAM0tB,EAAeC,GACnBzuB,EACAoN,EAAO,UAAY,gBAAA,EAmBd,MAAA,CAAC,CAAE,KAhBGA,EAAO,WAClB5L,EAACuL,GAAA,CACC,cAAY,gCACZ,QAAS/M,EAAE,mBAAmB,EAE9B,SAAAwB,EAACkZ,GAAA,CACC,cAAY,8BACZ,OAAOuT,GAAe,EAAA,EAErB,SAAAO,CAAA,CACH,CAAA,CACF,EAEChtB,EAAAkZ,GAAA,CAAO,SAAa8T,CAAA,CAAA,CAGb,CAAM,CAAA,EACf,CAACphB,EAAQpN,CAAC,CAAC,EAER,CAAE,UAAAwO,GAAcC,KAChBC,EAAYF,EAAU,gBAAgB,GAAKpB,EAAO,QAAQ,UAE1DshB,EAAgB,GACnB3R,GAA4B,CAAA,QAASuR,EACnC,SAAEtuB,EAAA,uBAAuB,GADV,UAElB,EACAwB,EAACub,GAA0B,CAAA,QAAS,IAAM4R,GAAavhB,CAAM,EAC1D,SAAApN,EAAE,QAAQ,CAAA,EADK,QAElB,EACA,GAAI,CAAC4uB,GAAcxhB,CAAM,GAAKsB,EAC1B,CACElN,EAAC4U,MAAY,SAAU,EACvB5U,EAACub,GAAA,CACC,cAAY,gBAEZ,QAASL,EAER,WAAE,QAAQ,CAAA,EAHP,QAIN,CAAA,EAEF,CAAC,CAAA,EAGP,OAEI7a,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAAC+mB,EAAe,EAAA,EAChB/mB,EAACqtB,GAAA,CACC,SAAUzhB,EAAO,SACjB,OAAO,iBACP,OAAAmhB,EACA,QAAS,GACT,WAAY,CAAC7f,EACb,YAAY,gBACZ,cAAAggB,EACA,UAAWpsB,EACX,SAAWA,GAAU,CACdA,GAGH+rB,EAAS/rB,CAAK,EACTwB,KAHewkB,GAKxB,CAAA,CACF,CACF,CAAA,CAAA,CAEJ,EAYA,SAAwBwG,IAAgB,CAChC,KAAA,CAAE,EAAA9uB,GAAMC,IACR,CAAE,SAAAoG,EAAU,SAAAC,CAAS,EAAIC,GAAU,EACnC,CAAE,MAAAzG,GAAUC,KACZ,CAAE,UAAAyO,GAAcC,KAChBsgB,EAAmB3qB,KAEnB4qB,EAAyBxgB,EAAU,sBAAsB,EACzDsf,EAAmBtf,EAAU,gBAAgB,EAC7CygB,EAAiBzgB,EAAU,cAAc,EACzCye,EAAeze,EAAU,YAAY,EACrC0gB,EACJH,EAAiB1qB,GAAQ,qBAAqB,GAAK2qB,EAE/CjV,EAAWC,KAEX,CAACmV,EAAoBC,CAAwB,EAAI1b,GAAU,EAC3D,CAAC2b,EAAyBC,CAA6B,EAAI5b,GAAU,EAErE8C,EAAOpQ,KACP,CAAE,SAAA4N,GAAaC,KACf,CAACrM,EAAKC,CAAM,EAAIrH,EAAS,CAAC,EAE1B+hB,EAA0BtK,GAAS,CACvC,QAASzB,EAAK,QACd,KAAM,0BACN,aAAc,eAAA,CACf,EAEK,CAACpJ,EAAQmiB,CAAS,EAAI/uB,EAA+B,EAErD2pB,EAAS,SAAY,CACnB,MAAA5S,GAAQ,MAAMnW,EAAY,QAAQ,UAAU,CAAE,GAAI4S,EAAU,EAClE,OAAOxO,GAAO+R,GAAQmB,IAASA,GAAK,MAAM,aAAa,CAAA,EAGnD8W,EAAUC,IACdC,GACE7iB,GAAS,CACP,MAAA/M,EACA,SAAAkU,EACA,IAAAyb,EAAA,CACD,CAAA,EAGCE,EAAcH,EAAO,UAAU,EAC/BI,EAAUJ,EAAO,MAAM,EACvBK,EAAiBL,EAAO,aAAa,EACrCM,EAAWN,EAAO,OAAO,EACzBO,EAAkBP,EAAO,cAAc,EACvCQ,EAAmBR,EAAO,eAAe,EACzCS,EAAoBT,EAAO,gBAAgB,EAC3CU,EAAcV,EAAO,UAAU,EAC/BW,EAAiBX,EAAO,aAAa,EACrCY,GAAcZ,EAAO,UAAU,EAE/Ba,GAAsBZ,IAC1BC,GACEY,GAAkB,CAChB,MAAAxwB,EACA,SAAAkU,EACA,IAAAyb,EAAA,CACD,CAAA,EAGCc,GAAuBF,GAAmB,OAAO,EACjDG,EAA0BH,GAAmB,UAAU,EAEvDI,GAAuBhB,IAC3BC,GACEgB,GAAmB,CACjB,MAAA5wB,EACA,SAAAkU,EACA,IAAAyb,EAAA,CACD,CAAA,EAGCkB,GAA2BF,GAAoB,UAAU,EACzDG,GAA4BH,GAAoB,WAAW,EAC3DI,GAAyBJ,GAAoB,QAAQ,EACrDK,GAA2BL,GAAoB,UAAU,EACzDM,GAA8BN,GAAoB,aAAa,EAC/DO,GAA2BP,GAAoB,UAAU,EACzDQ,GAAyBR,GAAoB,QAAQ,EAErD,CAAC/T,GAAoBC,CAAa,EAAIvU,GAAiB,CAC3D,SAAU,2BACV,WAAY,sBACZ,oBAAqB,SACrB,sBAAuBvB,GAAc,OACrC,UAAW,SAAY,CACjB,GAAA,CACF,MAAMzF,EAAY,QAAQ,IAAI,CAAE,GAAI4S,EAAU,EAC9C3N,EAASrG,EAAE,sBAAsB,EAAG0G,EAAa,OAAO,EACxDqT,EAASmX,GAAU,CAAE,MAAApxB,CAAM,CAAC,CAAC,QACtB6G,GAAO,CACdL,EAAS,oBAAqBK,EAAK,CACrC,CACF,CAAA,CACD,EAEKwqB,GAAa/jB,IAAiC,CAClDoJ,EAAK,MAAM,CAAE,GAAGpJ,EAAQ,CAAA,EACJA,GAAAA,GAAQoJ,EAAK,QAAQ,EACrCpJ,GAAO,aAAa,aAAa,GAC9BoJ,EAAA,SACHjS,EAA2B,wBAAwB,EAEnD,OAAO,QAAQ,KAAK,MAAM6I,GAAO,WAAW,aAAa,CAAC,CAAC,EAAE,QAC3D,CAAC,CAACxF,GAAKtF,EAAK,KAAO,CAAE,IAAAsF,GAAK,MAAAtF,IAC5B,CAAA,CAEJ,EAGFrB,GACE,IAAMG,EAAY,QAAQ,QAAQ,CAAE,GAAI4S,EAAU,EACjDod,IAAkB,CACjB,GAAI,CAACA,GACH,MAAM,IAAI,MAAMpxB,EAAE,UAAU,CAAC,EAErBuvB,EAAA8B,GAAUD,EAAa,CAAC,EAClCD,GAAUC,EAAa,CACzB,EACA,CAACpd,EAAUpM,CAAG,CAAA,EAGhB,MAAM9D,EAAO,MACX,CAAE,UAAAwtB,GAAY,GAAO,WAAAhlB,GAAa,qBAAqC,CACrE,UAAW,GACX,WAAY,mBAAA,IAEX,CACH,GAAI,CAAE,MAAMkK,EAAK,UACf,OAGF,GACE,CAACpJ,GAAQ,cACTA,GAAQ,0BAA4BmV,GACpC,CAAC+O,GACD,CAC8BhC,IAC9B,MACF,CAEA,MAAM3d,GAAS4f,GAA0B/a,EAAK,UAAW,CAAA,EAEnDgb,GACJD,GAAgD5f,EAAM,EAEpD6f,GAAgB,aAAa,aAAa,IAC5BA,GAAA,WAAW,aAAa,EAAI,KAAK,UAC/C,OAAO,YACJA,GAAgB,WAAW,aAAa,EACtC,OAAO,CAAC,CAAE,IAAA5pB,EAAAA,IAAUA,KAAQ,EAAE,EAC9B,IAAI,CAAC,CAAE,IAAAA,GAAK,MAAAtF,MAAY,CAACsF,GAAKtF,EAAK,CAAC,CACzC,CAAA,GAIA,GAAA,CACF,MAAMmvB,GAAkC,CACtC,GAAGrkB,EACH,GAAGokB,EAAA,EAGKC,GAAA,SAAWA,GAAU,UAAU,KAAK,EAE9C,MAAMrwB,EAAY,QAAQ,OAAO,CAAE,GAAI4S,CAAA,EAAYyd,EAAS,EAC5DN,GAAUM,EAAS,EACnBlC,EAAUkC,EAAS,EACnBprB,EAASrG,EAAEsM,EAAU,EAAG5F,EAAa,OAAO,QACrCC,GAAO,CACdL,EAAS,kBAAmBK,EAAK,CACnC,CAAA,EAGF,OAAKyG,EAMDvL,EAAA2C,EAAA,CAAA,SAAA,CAAAhD,EAACC,GAAA,CACC,oBAAoB,MACpB,kBAAkB,KAClB,SAAUzB,EAAE,kCAAmC,CAC7C,wBAAAuiB,CAAA,CACD,EACD,KAAM8M,EACN,aAAcC,EACd,UAAW,IAAMxrB,EAAK,CAAE,UAAW,GAAM,EAEzC,SAAAtC,EAAAgD,EAAA,CACG,WAAE,6BAA8B,CAC/B,wBAAA+d,CACD,CAAA,EACH,CAAA,CACF,IACC5F,EAAc,EAAA,EACdwS,GACC3tB,EAAC/B,GAAA,CACC,GAAI2N,EAAO,GACX,SAAUA,EAAO,SACjB,KAAI,GACJ,aAAcgiB,CAAA,CAChB,EAEF5tB,EAACgC,EAAA,CACC,KAAK,UACL,QAASgT,EAAK,QACd,aAAc,GACd,OAAQ,CAAC,CAAE,MAAA/S,EAAA,IACTjC,EAAC4sB,GAAA,CACC,MAAO3qB,GAAM,MACb,SAAUA,GAAM,SAChB,OAAA2J,EACA,KAAAtJ,EACA,mBAAA4Y,GACA,qBAAsB0S,CAAA,CACxB,CAAA,CAEJ,EACA5tB,EAACmM,IAAY,QAAQ,QAAQ,UAAU,WACrC,SAAAnM,EAAC0W,GAAc,CAAA,GAAG1B,EAChB,SAAA3U,EAAC6vB,GAAA,CACC,cAAY,cACZ,aAAW,cACX,MAAK,GACL,aAAY,GAEZ,SAAA,CAAAlwB,EAACisB,GAAA,CACC,GAAG,WACH,cAAY,oBACZ,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,UAAU,EAAE,EACnC,GAAG2vB,EAEJ,SAAAnuB,EAACsP,GAAA,CACC,OAAA1D,EACA,KAAM,IAAMtJ,EAAK,EACjB,MAAO,IAAMqtB,GAAU/jB,CAAM,CAAA,CAC/B,CAAA,CACF,GACG,CAACA,EAAO,cAAgB,CAACwhB,GAAcxhB,CAAM,GAC9CA,EAAO,WAAa,SACpBvL,EAAC4rB,GAAA,CACC,GAAG,OACH,cAAY,UACZ,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,MAAM,EAAE,EAC/B,GAAG4vB,EAEH,SAAA,CAAAxiB,EAAO,WAAa,kBACnB5L,EAAC6jB,GAAA,CACC,SAAArR,EACA,KAAAlQ,EACA,mBAAoBsJ,EAAO,QAAQ,SAAA,CACrC,EAEDA,EAAO,WAAa,QAClB5L,EAAAsmB,GAAA,CAAS,SAAA9T,EAAoB,KAAAlQ,EAAY,CAAA,CAAA,CAE9C,EAED,CAACsJ,EAAO,cACP,CAACwhB,GAAcxhB,CAAM,IACpB6hB,GACC7hB,EAAO,QAAQ,WACfA,EAAO,QAAQ,OACf5L,EAACisB,GAAA,CACC,GAAG,cACH,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,aAAa,EAAE,EACtC,GAAG6vB,EAEJ,SAAAruB,EAACkhB,GAAA,CAEC,OAAAtV,EACA,KAAAtJ,EACA,QAAS,IAAM+D,EAAOD,EAAM,CAAC,CAAA,EAHxBA,CAIP,CAAA,CACF,EAEJpG,EAACisB,GAAA,CACC,GAAG,QACH,cAAY,WACZ,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,OAAO,EAAE,EAChC,GAAG8vB,EAEJ,SAAAtuB,EAACmwB,GAAA,CACC,OAAAxH,EACA,UAAW,GACX,cAAc,SACd,SAAUyH,GAAa,CAAE,MAAA9xB,EAAO,SAAUsN,EAAO,GAAK,EACtD,SAAWykB,IACTC,GAAa,CACX,MAAAhyB,EACA,SAAUsN,EAAO,GACjB,GAAIykB,GACJ,IAAK,SAAA,CACN,EAEH,WAAY,EAAE/D,GAAoB1gB,EAAO,QAAQ,UAAA,CACnD,CAAA,CACF,EACC,CAACwhB,GAAcxhB,CAAM,GAAK,CAACA,EAAO,YACjC5L,EAACisB,GAAA,CACC,GAAG,eACH,cAAY,kBACZ,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,cAAc,EAAE,EACvC,GAAG+vB,EAEJ,SAAAluB,EAAC6vB,GAAA,CACC,gBAAiBpB,GAAkB,CACjC,MAAAxwB,EACA,SAAAkU,EACA,IAAK,OAAA,CACN,EAED,SAAA,CAAAxS,EAACisB,GAAA,CACC,GAAG,QACH,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,OAAO,EAAE,EAChC,GAAGuwB,GAEJ,SAAA/uB,EAACynB,GAAA,CACC,WAAY7b,EAAO,SACnB,SAAA4G,EACA,SAAU5G,EAAQ,SAClB,kBAAmBA,EAAQ,QAAQ,MAAA,CACrC,CAAA,CACF,EACA5L,EAACisB,GAAA,CACC,GAAG,WACH,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,UAAU,EAAE,EACnC,GAAGwwB,EAEJ,SAAAhvB,EAACqqB,GAAA,CACC,SAAA7X,EACA,SAAU5G,EAAQ,QAAA,CACpB,CAAA,CACF,CAAA,CAAA,CACF,CAAA,CACF,EAEDA,EAAQ,8BAAgC4hB,GACvCxtB,EAACisB,GAAA,CACC,GAAG,gBACH,cAAY,mBACZ,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,eAAe,EAAE,EACxC,GAAGgwB,EAEJ,SAAAnuB,EAAC6vB,GAAA,CACC,aAAY,GACZ,cAAa,GACb,gBAAiBhB,GAAmB,CAClC,MAAA5wB,EACA,SAAAkU,EACA,IAAK,UAAA,CACN,EAED,SAAA,CAAAxS,EAACisB,GAAA,CACC,GAAG,WACH,cAAY,wBACZ,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,UAAU,EAAE,EACnC,GAAG2wB,GAEJ,SAAAnvB,EAACwe,IAAsB,SAAAhM,CAAoB,CAAA,CAAA,CAC7C,EACAxS,EAACisB,GAAA,CACC,GAAG,YACH,cAAY,yBACZ,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,WAAW,EAAE,EACpC,GAAG4wB,GAEJ,SAAApvB,EAAC2c,IAAuB,SAAAnK,CAAoB,CAAA,CAAA,CAC9C,EACAxS,EAACisB,GAAA,CACC,GAAG,SACH,cAAY,sBACZ,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,QAAQ,EAAE,EACjC,GAAG6wB,GAEJ,SAAArvB,EAACkd,IAAoB,SAAA1K,CAAoB,CAAA,CAAA,CAC3C,EACAxS,EAACisB,GAAA,CACC,GAAG,WACH,cAAY,wBACZ,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,UAAU,EAAE,EACnC,GAAG8wB,GAEJ,SAAAtvB,EAAC6b,IAAsB,SAAArJ,CAAoB,CAAA,CAAA,CAC7C,EACAxS,EAACisB,GAAA,CACC,GAAG,cACH,cAAY,2BACZ,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,aAAa,EAAE,EACtC,GAAG+wB,GAEJ,SAAAvvB,EAACga,IAAyB,SAAAxH,CAAoB,CAAA,CAAA,CAChD,EACCiZ,GACCzrB,EAACisB,GAAA,CACC,GAAG,WACH,cAAY,wBACZ,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,UAAU,EAAE,EACnC,GAAGgxB,GAEJ,SAAAxvB,EAAC6U,GAAsB,CAAA,OAAAjJ,EAAgB,KAAAtJ,CAAY,CAAA,CAAA,CACrD,EAEFtC,EAACisB,GAAA,CACC,GAAG,SACH,cAAY,sBACZ,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,QAAQ,EAAE,EACjC,GAAGixB,GAEJ,WAACtY,GAAoB,EAAA,CAAA,CACvB,CAAA,CAAA,CACF,CAAA,CACF,EAEDvL,EAAQ,wBAA0B6f,GACjCzrB,EAACisB,GAAA,CACC,GAAG,iBACH,cAAY,oBACZ,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,gBAAgB,EAAE,EACzC,GAAGiwB,EAEJ,SAAAzuB,EAACmsB,IAAe,OAAAvgB,CAAgB,CAAA,CAAA,CAClC,EAEF5L,EAACisB,GAAA,CACC,GAAG,WACH,cAAY,cACZ,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,UAAU,EAAE,EACnC,GAAGkwB,EAEJ,SAAA1uB,EAACsM,IAAe,OAAAV,CAAgB,CAAA,CAAA,CAClC,EACC8hB,IACEpB,GAAoB1gB,EAAO,QAAQ,SAClC5L,EAACisB,GAAA,CACC,GAAG,cACH,cAAY,iBACZ,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,aAAa,EAAE,EACtC,GAAGmwB,EAEJ,WAAC4B,GAAe,CAAA,GAAI3kB,EAAO,GAAK,KAAK,UAAU,CAAA,CACjD,EAEJ5L,EAACisB,GAAA,CACC,GAAG,WACH,cAAY,cACZ,MAAOjsB,EAACksB,GAAc,CAAA,SAAA1tB,EAAE,UAAU,EAAE,EACnC,GAAGowB,GAEJ,SAAA5uB,EAAC2L,GAAY,CAAA,KAAArJ,EAAY,OAAAsJ,CAAgB,CAAA,CAAA,CAC3C,CAAA,CAAA,GAEJ,CACF,CAAA,CACF,CAAA,CAAA,IAzRQ8L,GAAgB,CAAA,CAAA,CA2R5B","x_google_ignoreList":[0,1,2,3,4,5]}