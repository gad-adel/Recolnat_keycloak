{"version":3,"file":"ScopeForm-5ax7VntI.js","sources":["../../src/client-scopes/details/ScopeForm.tsx"],"sourcesContent":["import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n  ValidatedOptions,\n} from \"@patternfly/react-core\";\nimport { useEffect, useState } from \"react\";\nimport { Controller, FormProvider, useForm, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { HelpItem, TextControl } from \"ui-shared\";\n\nimport { getProtocolName } from \"../../clients/utils\";\nimport { DefaultSwitchControl } from \"../../components/SwitchControl\";\nimport {\n  ClientScopeDefaultOptionalType,\n  allClientScopeTypes,\n  clientScopeTypesSelectOptions,\n} from \"../../components/client-scope/ClientScopeTypes\";\nimport { FormAccess } from \"../../components/form/FormAccess\";\nimport { KeycloakTextArea } from \"../../components/keycloak-text-area/KeycloakTextArea\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useRealm } from \"../../context/realm-context/RealmContext\";\nimport { useLoginProviders } from \"../../context/server-info/ServerInfoProvider\";\nimport { convertAttributeNameToForm, convertToFormValues } from \"../../util\";\nimport useIsFeatureEnabled, { Feature } from \"../../utils/useIsFeatureEnabled\";\nimport { toClientScopes } from \"../routes/ClientScopes\";\n\ntype ScopeFormProps = {\n  clientScope?: ClientScopeRepresentation;\n  save: (clientScope: ClientScopeDefaultOptionalType) => void;\n};\n\nexport const ScopeForm = ({ clientScope, save }: ScopeFormProps) => {\n  const { t } = useTranslation();\n  const form = useForm<ClientScopeDefaultOptionalType>({ mode: \"onChange\" });\n  const {\n    register,\n    control,\n    handleSubmit,\n    setValue,\n    formState: { errors, isDirty, isValid },\n  } = form;\n  const { realm } = useRealm();\n\n  const providers = useLoginProviders();\n  const isFeatureEnabled = useIsFeatureEnabled();\n  const isDynamicScopesEnabled = isFeatureEnabled(Feature.DynamicScopes);\n  const [open, isOpen] = useState(false);\n  const [openType, setOpenType] = useState(false);\n\n  const displayOnConsentScreen: string = useWatch({\n    control,\n    name: convertAttributeNameToForm(\"attributes.display.on.consent.screen\"),\n    defaultValue:\n      clientScope?.attributes?.[\"display.on.consent.screen\"] ?? \"true\",\n  });\n\n  const dynamicScope = useWatch({\n    control,\n    name: convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n      \"attributes.is.dynamic.scope\",\n    ),\n    defaultValue: \"false\",\n  });\n\n  const setDynamicRegex = (value: string, append: boolean) =>\n    setValue(\n      convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n        \"attributes.dynamic.scope.regexp\",\n      ),\n      append ? `${value}:*` : value,\n    );\n\n  useEffect(() => {\n    convertToFormValues(clientScope ?? {}, setValue);\n  }, [clientScope]);\n\n  return (\n    <FormAccess\n      role=\"manage-clients\"\n      onSubmit={handleSubmit(save)}\n      isHorizontal\n    >\n      <FormGroup\n        label={t(\"name\")}\n        labelIcon={\n          <HelpItem helpText={t(\"scopeNameHelp\")} fieldLabelId=\"name\" />\n        }\n        fieldId=\"kc-name\"\n        validated={\n          errors.name ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"required\")}\n        isRequired\n      >\n        <KeycloakTextInput\n          id=\"kc-name\"\n          validated={\n            errors.name ? ValidatedOptions.error : ValidatedOptions.default\n          }\n          isRequired\n          {...register(\"name\", {\n            required: true,\n            onChange: (e) => {\n              if (isDynamicScopesEnabled) {\n                setDynamicRegex(e.target.value, true);\n              }\n            },\n          })}\n        />\n      </FormGroup>\n      {isDynamicScopesEnabled && (\n        <FormProvider {...form}>\n          <DefaultSwitchControl\n            name={convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n              \"attributes.is.dynamic.scope\",\n            )}\n            label={t(\"dynamicScope\")}\n            labelIcon={t(\"dynamicScopeHelp\")}\n            onChange={(value) => {\n              setDynamicRegex(value ? form.getValues(\"name\") || \"\" : \"\", value);\n            }}\n            stringify\n          />\n          {dynamicScope === \"true\" && (\n            <TextControl\n              name={convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n                \"attributes.dynamic.scope.regexp\",\n              )}\n              label={t(\"dynamicScopeFormat\")}\n              labelIcon={t(\"dynamicScopeFormatHelp\")}\n              isDisabled\n            />\n          )}\n        </FormProvider>\n      )}\n      <FormGroup\n        label={t(\"description\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"scopeDescriptionHelp\")}\n            fieldLabelId=\"description\"\n          />\n        }\n        fieldId=\"kc-description\"\n        validated={\n          errors.description ? ValidatedOptions.error : ValidatedOptions.default\n        }\n        helperTextInvalid={t(\"maxLength\", { length: 255 })}\n      >\n        <KeycloakTextInput\n          id=\"kc-description\"\n          validated={\n            errors.description\n              ? ValidatedOptions.error\n              : ValidatedOptions.default\n          }\n          {...register(\"description\", {\n            maxLength: 255,\n          })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"type\")}\n        labelIcon={\n          <HelpItem helpText={t(\"scopeTypeHelp\")} fieldLabelId=\"type\" />\n        }\n        fieldId=\"kc-type\"\n      >\n        <Controller\n          name=\"type\"\n          defaultValue={allClientScopeTypes[0]}\n          control={control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"kc-type\"\n              variant={SelectVariant.single}\n              isOpen={openType}\n              selections={field.value}\n              onToggle={setOpenType}\n              onSelect={(_, value) => {\n                field.onChange(value);\n                setOpenType(false);\n              }}\n            >\n              {clientScopeTypesSelectOptions(t, allClientScopeTypes)}\n            </Select>\n          )}\n        />\n      </FormGroup>\n      {!clientScope && (\n        <FormGroup\n          label={t(\"protocol\")}\n          labelIcon={\n            <HelpItem helpText={t(\"protocolHelp\")} fieldLabelId=\"protocol\" />\n          }\n          fieldId=\"kc-protocol\"\n        >\n          <Controller\n            name=\"protocol\"\n            defaultValue={providers[0]}\n            control={control}\n            render={({ field }) => (\n              <Select\n                toggleId=\"kc-protocol\"\n                onToggle={isOpen}\n                onSelect={(_, value) => {\n                  field.onChange(value);\n                  isOpen(false);\n                }}\n                selections={field.value}\n                variant={SelectVariant.single}\n                isOpen={open}\n              >\n                {providers.map((option) => (\n                  <SelectOption\n                    selected={option === field.value}\n                    key={option}\n                    value={option}\n                    data-testid={`option-${option}`}\n                  >\n                    {getProtocolName(t, option)}\n                  </SelectOption>\n                ))}\n              </Select>\n            )}\n          />\n        </FormGroup>\n      )}\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"displayOnConsentScreen\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"displayOnConsentScreenHelp\")}\n            fieldLabelId=\"displayOnConsentScreen\"\n          />\n        }\n        fieldId=\"kc-display-on-consent-screen\"\n      >\n        <Controller\n          name={convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n            \"attributes.display.on.consent.screen\",\n          )}\n          control={control}\n          defaultValue={displayOnConsentScreen}\n          render={({ field }) => (\n            <Switch\n              id=\"kc-display-on-consent-screen\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n            />\n          )}\n        />\n      </FormGroup>\n      {displayOnConsentScreen === \"true\" && (\n        <FormGroup\n          label={t(\"consentScreenText\")}\n          labelIcon={\n            <HelpItem\n              helpText={t(\"consentScreenTextHelp\")}\n              fieldLabelId=\"consentScreenText\"\n            />\n          }\n          fieldId=\"kc-consent-screen-text\"\n        >\n          <KeycloakTextArea\n            id=\"kc-consent-screen-text\"\n            {...register(\n              convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n                \"attributes.consent.screen.text\",\n              ),\n            )}\n          />\n        </FormGroup>\n      )}\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"includeInTokenScope\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"includeInTokenScopeHelp\")}\n            fieldLabelId=\"includeInTokenScope\"\n          />\n        }\n        fieldId=\"kc-include-in-token-scope\"\n      >\n        <Controller\n          name={convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n            \"attributes.include.in.token.scope\",\n          )}\n          control={control}\n          defaultValue=\"true\"\n          render={({ field }) => (\n            <Switch\n              id=\"kc-include-in-token-scope\"\n              label={t(\"on\")}\n              labelOff={t(\"off\")}\n              isChecked={field.value === \"true\"}\n              onChange={(value) => field.onChange(value.toString())}\n            />\n          )}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"guiOrder\")}\n        labelIcon={\n          <HelpItem helpText={t(\"guiOrderHelp\")} fieldLabelId=\"guiOrder\" />\n        }\n        fieldId=\"kc-gui-order\"\n      >\n        <Controller\n          name={convertAttributeNameToForm<ClientScopeDefaultOptionalType>(\n            \"attributes.gui.order\",\n          )}\n          defaultValue=\"\"\n          control={control}\n          render={({ field }) => (\n            <KeycloakTextInput\n              id=\"kc-gui-order\"\n              type=\"number\"\n              value={field.value}\n              min={0}\n              onChange={field.onChange}\n            />\n          )}\n        />\n      </FormGroup>\n      <ActionGroup>\n        <Button\n          variant=\"primary\"\n          type=\"submit\"\n          isDisabled={!isDirty || !isValid}\n        >\n          {t(\"save\")}\n        </Button>\n        <Button\n          variant=\"link\"\n          component={(props) => (\n            <Link {...props} to={toClientScopes({ realm })}></Link>\n          )}\n        >\n          {t(\"cancel\")}\n        </Button>\n      </ActionGroup>\n    </FormAccess>\n  );\n};\n"],"names":["ScopeForm","clientScope","save","t","useTranslation","form","useForm","register","control","handleSubmit","setValue","errors","isDirty","isValid","realm","useRealm","providers","useLoginProviders","isDynamicScopesEnabled","useIsFeatureEnabled","Feature","open","isOpen","useState","openType","setOpenType","displayOnConsentScreen","useWatch","convertAttributeNameToForm","dynamicScope","setDynamicRegex","value","append","useEffect","convertToFormValues","jsxs","FormAccess","jsx","FormGroup","HelpItem","ValidatedOptions","KeycloakTextInput","e","FormProvider","DefaultSwitchControl","TextControl","Controller","allClientScopeTypes","field","Select","SelectVariant","_","clientScopeTypesSelectOptions","option","SelectOption","getProtocolName","Switch","KeycloakTextArea","ActionGroup","Button","props","Link","toClientScopes"],"mappings":"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"}