{"version":3,"file":"DynamicComponents-f6aNOnzT.js","sources":["../../src/components/dynamic/BooleanComponent.tsx","../../src/components/dynamic/ClientSelectComponent.tsx","../../src/components/dynamic/FileComponent.tsx","../../src/components/dynamic/GroupComponent.tsx","../../src/components/dynamic/ListComponent.tsx","../../src/components/dynamic/MapComponent.tsx","../../src/components/dynamic/MultivaluedListComponent.tsx","../../src/components/dynamic/MultivaluedStringComponent.tsx","../../src/components/dynamic/PasswordComponent.tsx","../../src/components/dynamic/RoleComponent.tsx","../../src/components/dynamic/ScriptComponent.tsx","../../src/components/dynamic/StringComponent.tsx","../../src/components/dynamic/TextComponent.tsx","../../src/components/dynamic/components.ts","../../src/components/dynamic/DynamicComponents.tsx"],"sourcesContent":["import { FormGroup, Switch } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const BooleanComponent = ({\n  name,\n  label,\n  helpText,\n  isDisabled = false,\n  defaultValue,\n  isNew = true,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      hasNoPaddingTop\n      label={t(label!)}\n      fieldId={name!}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n    >\n      <Controller\n        name={convertToName(name!)}\n        data-testid={name}\n        defaultValue={isNew ? defaultValue : false}\n        control={control}\n        render={({ field }) => (\n          <Switch\n            id={name!}\n            isDisabled={isDisabled}\n            label={t(\"on\")}\n            labelOff={t(\"off\")}\n            isChecked={\n              field.value === \"true\" ||\n              field.value === true ||\n              field.value?.[0] === \"true\"\n            }\n            onChange={(value) => field.onChange(\"\" + value)}\n            data-testid={name}\n            aria-label={t(label!)}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import type { ComponentProps } from \"./components\";\nimport { ClientSelect } from \"../client/ClientSelect\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const ClientSelectComponent = (props: ComponentProps) => {\n  return <ClientSelect {...props} name={convertToName(props.name!)} />;\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { FileUpload } from \"../json-file-upload/patternfly/FileUpload\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const FileComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n  const [filename, setFilename] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n      fieldId={name!}\n    >\n      <Controller\n        name={convertToName(name!)}\n        control={control}\n        defaultValue={defaultValue || \"\"}\n        render={({ field }) => (\n          <FileUpload\n            id={name!}\n            value={field.value}\n            type=\"text\"\n            filename={filename}\n            isDisabled={isDisabled}\n            onFileInputChange={(_, file) => setFilename(file.name)}\n            onReadStarted={() => setIsLoading(true)}\n            onReadFinished={() => setIsLoading(false)}\n            onClearClick={() => {\n              field.onChange(\"\");\n              setFilename(\"\");\n            }}\n            isLoading={isLoading}\n            allowEditingUploadedText={false}\n            onChange={(value, filename) => {\n              field.onChange(value);\n              setFilename(filename);\n            }}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import GroupRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/groupRepresentation\";\nimport {\n  Button,\n  Chip,\n  ChipGroup,\n  FormGroup,\n  InputGroup,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { GroupPickerDialog } from \"../group/GroupPickerDialog\";\nimport { HelpItem } from \"ui-shared\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const GroupComponent = ({\n  name,\n  label,\n  helpText,\n  required,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n  const [groups, setGroups] = useState<GroupRepresentation[]>();\n  const { control } = useFormContext();\n\n  return (\n    <Controller\n      name={convertToName(name!)}\n      defaultValue=\"\"\n      control={control}\n      render={({ field }) => (\n        <>\n          {open && (\n            <GroupPickerDialog\n              type=\"selectOne\"\n              text={{\n                title: \"selectGroup\",\n                ok: \"select\",\n              }}\n              onConfirm={(groups) => {\n                field.onChange(groups?.[0].path);\n                setGroups(groups);\n                setOpen(false);\n              }}\n              onClose={() => setOpen(false)}\n              filterGroups={groups}\n            />\n          )}\n\n          <FormGroup\n            label={t(label!)}\n            labelIcon={\n              <HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />\n            }\n            fieldId={name!}\n            isRequired={required}\n          >\n            <InputGroup>\n              <ChipGroup>\n                {field.value && (\n                  <Chip onClick={() => field.onChange(undefined)}>\n                    {field.value}\n                  </Chip>\n                )}\n              </ChipGroup>\n              <Button\n                id=\"kc-join-groups-button\"\n                onClick={() => setOpen(!open)}\n                variant=\"secondary\"\n                data-testid=\"join-groups-button\"\n              >\n                {t(\"selectGroup\")}\n              </Button>\n            </InputGroup>\n          </FormGroup>\n        </>\n      )}\n    />\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const ListComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  options,\n  required,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n  const [open, setOpen] = useState(false);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n      fieldId={name!}\n      isRequired={required}\n    >\n      <Controller\n        name={convertToName(name!)}\n        data-testid={name}\n        defaultValue={defaultValue || options?.[0] || \"\"}\n        control={control}\n        render={({ field }) => (\n          <Select\n            toggleId={name}\n            isDisabled={isDisabled}\n            onToggle={(toggle) => setOpen(toggle)}\n            onSelect={(_, value) => {\n              field.onChange(value as string);\n              setOpen(false);\n            }}\n            selections={field.value}\n            variant={SelectVariant.single}\n            aria-label={t(label!)}\n            isOpen={open}\n          >\n            {options?.map((option) => (\n              <SelectOption\n                selected={option === field.value}\n                key={option}\n                value={option}\n              />\n            ))}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import {\n  ActionList,\n  ActionListItem,\n  Button,\n  Flex,\n  FlexItem,\n  FormGroup,\n  TextInput,\n} from \"@patternfly/react-core\";\nimport { MinusCircleIcon, PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { useEffect, useState } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { generateId } from \"../../util\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeyValueType } from \"../key-value-form/key-value-convert\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\ntype IdKeyValueType = KeyValueType & {\n  id: number;\n};\n\nexport const MapComponent = ({\n  name,\n  label,\n  helpText,\n  required,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n\n  const { getValues, setValue, register } = useFormContext();\n  const [map, setMap] = useState<IdKeyValueType[]>([]);\n  const fieldName = convertToName(name!);\n\n  useEffect(() => {\n    register(fieldName);\n    const values: KeyValueType[] = JSON.parse(getValues(fieldName) || \"[]\");\n    if (!values.length) {\n      values.push({ key: \"\", value: \"\" });\n    }\n    setMap(values.map((value) => ({ ...value, id: generateId() })));\n  }, [register, getValues]);\n\n  const update = (val = map) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setValue(fieldName, JSON.stringify(val.map(({ id, ...entry }) => entry)));\n  };\n\n  const updateKey = (index: number, key: string) => {\n    updateEntry(index, { ...map[index], key });\n  };\n\n  const updateValue = (index: number, value: string) => {\n    updateEntry(index, { ...map[index], value });\n  };\n\n  const updateEntry = (index: number, entry: IdKeyValueType) =>\n    setMap([...map.slice(0, index), entry, ...map.slice(index + 1)]);\n\n  const remove = (index: number) => {\n    const value = [...map.slice(0, index), ...map.slice(index + 1)];\n    setMap(value);\n    update(value);\n  };\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n      fieldId={name!}\n      isRequired={required}\n    >\n      <Flex direction={{ default: \"column\" }}>\n        <Flex>\n          <FlexItem\n            grow={{ default: \"grow\" }}\n            spacer={{ default: \"spacerNone\" }}\n          >\n            <strong>{t(\"key\")}</strong>\n          </FlexItem>\n          <FlexItem grow={{ default: \"grow\" }}>\n            <strong>{t(\"value\")}</strong>\n          </FlexItem>\n        </Flex>\n        {map.map((attribute, index) => (\n          <Flex key={attribute.id} data-testid=\"row\">\n            <FlexItem grow={{ default: \"grow\" }}>\n              <TextInput\n                name={`${fieldName}.${index}.key`}\n                placeholder={t(\"keyPlaceholder\")}\n                aria-label={t(\"key\")}\n                defaultValue={attribute.key}\n                data-testid={`${fieldName}.${index}.key`}\n                onChange={(value) => updateKey(index, value)}\n                onBlur={() => update()}\n              />\n            </FlexItem>\n            <FlexItem\n              grow={{ default: \"grow\" }}\n              spacer={{ default: \"spacerNone\" }}\n            >\n              <TextInput\n                name={`${fieldName}.${index}.value`}\n                placeholder={t(\"valuePlaceholder\")}\n                aria-label={t(\"value\")}\n                defaultValue={attribute.value}\n                data-testid={`${fieldName}.${index}.value`}\n                onChange={(value) => updateValue(index, value)}\n                onBlur={() => update()}\n              />\n            </FlexItem>\n            <FlexItem>\n              <Button\n                variant=\"link\"\n                title={t(\"removeAttribute\")}\n                isDisabled={map.length === 1}\n                onClick={() => remove(index)}\n                data-testid={`${fieldName}.${index}.remove`}\n              >\n                <MinusCircleIcon />\n              </Button>\n            </FlexItem>\n          </Flex>\n        ))}\n      </Flex>\n      <ActionList>\n        <ActionListItem>\n          <Button\n            data-testid={`${fieldName}-add-row`}\n            className=\"pf-u-px-0 pf-u-mt-sm\"\n            variant=\"link\"\n            icon={<PlusCircleIcon />}\n            onClick={() =>\n              setMap([...map, { key: \"\", value: \"\", id: generateId() }])\n            }\n          >\n            {t(\"addAttribute\")}\n          </Button>\n        </ActionListItem>\n      </ActionList>\n    </FormGroup>\n  );\n};\n","import {\n  FormGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n} from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nfunction stringToMultiline(value?: string): string[] {\n  return typeof value === \"string\" && value.length > 0 ? value.split(\"##\") : [];\n}\n\nfunction toStringValue(formValue: string[]): string {\n  return formValue.join(\"##\");\n}\n\nexport const MultiValuedListComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  options,\n  isDisabled = false,\n  stringify,\n  required,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n  const [open, setOpen] = useState(false);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n      fieldId={name!}\n      isRequired={required}\n    >\n      <Controller\n        name={convertToName(name!)}\n        control={control}\n        defaultValue={defaultValue ? [defaultValue] : []}\n        render={({ field }) => (\n          <Select\n            toggleId={name}\n            data-testid={name}\n            isDisabled={isDisabled}\n            chipGroupProps={{\n              numChips: 3,\n              expandedText: t(\"hide\"),\n              collapsedText: t(\"showRemaining\"),\n            }}\n            variant={SelectVariant.typeaheadMulti}\n            typeAheadAriaLabel=\"Select\"\n            onToggle={(isOpen) => setOpen(isOpen)}\n            selections={\n              stringify ? stringToMultiline(field.value) : field.value\n            }\n            onSelect={(_, v) => {\n              const option = v.toString();\n              const values = stringify\n                ? stringToMultiline(field.value)\n                : field.value;\n              let newValue;\n              if (values.includes(option)) {\n                newValue = values.filter((item: string) => item !== option);\n              } else {\n                newValue = [...values, option];\n              }\n              field.onChange(stringify ? toStringValue(newValue) : newValue);\n            }}\n            onClear={(event) => {\n              event.stopPropagation();\n              field.onChange(stringify ? \"\" : []);\n            }}\n            isOpen={open}\n            aria-label={t(label!)}\n          >\n            {options?.map((option) => (\n              <SelectOption key={option} value={option} />\n            ))}\n          </Select>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { useTranslation } from \"react-i18next\";\nimport { FormGroup } from \"@patternfly/react-core\";\n\nimport type { ComponentProps } from \"./components\";\nimport { HelpItem } from \"ui-shared\";\nimport { MultiLineInput } from \"../multi-line-input/MultiLineInput\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const MultiValuedStringComponent = ({\n  name,\n  label,\n  defaultValue,\n  helpText,\n  stringify,\n  required,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const fieldName = convertToName(name!);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n      fieldId={name!}\n      isRequired={required}\n    >\n      <MultiLineInput\n        aria-label={t(label!)}\n        name={fieldName}\n        isDisabled={isDisabled}\n        defaultValue={[defaultValue]}\n        addButtonLabel={t(\"addMultivaluedLabel\", {\n          fieldLabel: t(label!).toLowerCase(),\n        })}\n        stringify={stringify}\n      />\n    </FormGroup>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { PasswordInput } from \"../password-input/PasswordInput\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const PasswordComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  required,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const { register } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n      fieldId={name!}\n      isRequired={required}\n    >\n      <PasswordInput\n        id={name!}\n        data-testid={name}\n        isDisabled={isDisabled}\n        defaultValue={defaultValue?.toString()}\n        {...register(convertToName(name!))}\n      />\n    </FormGroup>\n  );\n};\n","import {\n  Button,\n  Chip,\n  FormGroup,\n  Split,\n  SplitItem,\n} from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport useToggle from \"../../utils/useToggle\";\nimport { HelpItem } from \"ui-shared\";\nimport { AddRoleMappingModal } from \"../role-mapping/AddRoleMappingModal\";\nimport { Row, ServiceRole } from \"../role-mapping/RoleMapping\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nconst parseValue = (value: any) =>\n  value?.includes(\".\") ? value.split(\".\") : [\"\", value || \"\"];\n\nconst parseRow = (value: Row) =>\n  value.client?.clientId\n    ? `${value.client.clientId}.${value.role.name}`\n    : value.role.name;\n\nexport const RoleComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  required,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n\n  const [openModal, toggleModal] = useToggle();\n  const {\n    control,\n    formState: { errors },\n  } = useFormContext();\n\n  const fieldName = convertToName(name!);\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n      validated={errors[fieldName] ? \"error\" : \"default\"}\n      helperTextInvalid={t(\"required\")}\n      fieldId={name!}\n      isRequired={required}\n    >\n      <Controller\n        name={fieldName}\n        defaultValue={defaultValue || \"\"}\n        control={control}\n        render={({ field }) => (\n          <Split>\n            {openModal && (\n              <AddRoleMappingModal\n                id=\"id\"\n                type=\"roles\"\n                name={name}\n                onAssign={(rows) => field.onChange(parseRow(rows[0]))}\n                onClose={toggleModal}\n                isRadio\n              />\n            )}\n\n            {field.value !== \"\" && (\n              <SplitItem>\n                <Chip textMaxWidth=\"500px\" onClick={() => field.onChange(\"\")}>\n                  <ServiceRole\n                    role={{ name: parseValue(field.value)[1] }}\n                    client={{ clientId: parseValue(field.value)[0] }}\n                  />\n                </Chip>\n              </SplitItem>\n            )}\n            <SplitItem>\n              <Button\n                onClick={toggleModal}\n                variant=\"secondary\"\n                data-testid=\"add-roles\"\n                disabled={isDisabled}\n              >\n                {t(\"selectRole.label\")}\n              </Button>\n            </SplitItem>\n          </Split>\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { CodeEditor, Language } from \"@patternfly/react-code-editor\";\nimport { FormGroup } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const ScriptComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  required,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={\n        <HelpItem\n          helpText={<span style={{ whiteSpace: \"pre-wrap\" }}>{helpText}</span>}\n          fieldLabelId={`${label}`}\n        />\n      }\n      fieldId={name!}\n      isRequired={required}\n    >\n      <Controller\n        name={convertToName(name!)}\n        defaultValue={defaultValue}\n        control={control}\n        render={({ field }) => (\n          <CodeEditor\n            id={name!}\n            data-testid={name}\n            isReadOnly={isDisabled}\n            type=\"text\"\n            onChange={field.onChange}\n            code={field.value}\n            height=\"600px\"\n            language={Language.javascript}\n          />\n        )}\n      />\n    </FormGroup>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextInput } from \"../keycloak-text-input/KeycloakTextInput\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const StringComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  isDisabled = false,\n  required,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const { register } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n      fieldId={name!}\n      isRequired={required}\n    >\n      <KeycloakTextInput\n        id={name!}\n        data-testid={name}\n        isDisabled={isDisabled}\n        defaultValue={defaultValue?.toString()}\n        {...register(convertToName(name!))}\n      />\n    </FormGroup>\n  );\n};\n","import { FormGroup } from \"@patternfly/react-core\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\nimport { KeycloakTextArea } from \"../keycloak-text-area/KeycloakTextArea\";\nimport type { ComponentProps } from \"./components\";\nimport { convertToName } from \"./DynamicComponents\";\n\nexport const TextComponent = ({\n  name,\n  label,\n  helpText,\n  defaultValue,\n  required,\n  isDisabled = false,\n}: ComponentProps) => {\n  const { t } = useTranslation();\n  const { register } = useFormContext();\n\n  return (\n    <FormGroup\n      label={t(label!)}\n      labelIcon={<HelpItem helpText={t(helpText!)} fieldLabelId={`${label}`} />}\n      fieldId={name!}\n      required={required}\n    >\n      <KeycloakTextArea\n        id={name!}\n        data-testid={name}\n        isDisabled={isDisabled}\n        defaultValue={defaultValue?.toString()}\n        {...register(convertToName(name!))}\n      />\n    </FormGroup>\n  );\n};\n","import type { ConfigPropertyRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigInfoRepresentation\";\n\nimport { BooleanComponent } from \"./BooleanComponent\";\nimport { ClientSelectComponent } from \"./ClientSelectComponent\";\nimport { FileComponent } from \"./FileComponent\";\nimport { GroupComponent } from \"./GroupComponent\";\nimport { ListComponent } from \"./ListComponent\";\nimport { MapComponent } from \"./MapComponent\";\nimport { MultiValuedListComponent } from \"./MultivaluedListComponent\";\nimport { MultiValuedStringComponent } from \"./MultivaluedStringComponent\";\nimport { PasswordComponent } from \"./PasswordComponent\";\nimport { RoleComponent } from \"./RoleComponent\";\nimport { ScriptComponent } from \"./ScriptComponent\";\nimport { StringComponent } from \"./StringComponent\";\nimport { TextComponent } from \"./TextComponent\";\n\nexport type ComponentProps = Omit<ConfigPropertyRepresentation, \"type\"> & {\n  isDisabled?: boolean;\n  isNew?: boolean;\n  stringify?: boolean;\n};\n\nconst ComponentTypes = [\n  \"String\",\n  \"Text\",\n  \"boolean\",\n  \"List\",\n  \"Role\",\n  \"Script\",\n  \"Map\",\n  \"Group\",\n  \"MultivaluedList\",\n  \"ClientList\",\n  \"MultivaluedString\",\n  \"File\",\n  \"Password\",\n] as const;\n\nexport type Components = (typeof ComponentTypes)[number];\n\nexport const COMPONENTS: {\n  [index in Components]: (props: ComponentProps) => JSX.Element;\n} = {\n  String: StringComponent,\n  Text: TextComponent,\n  boolean: BooleanComponent,\n  List: ListComponent,\n  Role: RoleComponent,\n  Script: ScriptComponent,\n  Map: MapComponent,\n  Group: GroupComponent,\n  ClientList: ClientSelectComponent,\n  MultivaluedList: MultiValuedListComponent,\n  MultivaluedString: MultiValuedStringComponent,\n  File: FileComponent,\n  Password: PasswordComponent,\n} as const;\n\nexport const isValidComponentType = (value: string): value is Components =>\n  value in COMPONENTS;\n","import type { ConfigPropertyRepresentation } from \"@keycloak/keycloak-admin-client/lib/defs/authenticatorConfigInfoRepresentation\";\n\nimport { COMPONENTS, isValidComponentType } from \"./components\";\nimport { convertAttributeNameToForm } from \"../../util\";\n\ntype DynamicComponentProps = {\n  properties: ConfigPropertyRepresentation[];\n  stringify?: boolean;\n  isNew?: boolean;\n};\n\nexport const DynamicComponents = ({\n  properties,\n  ...rest\n}: DynamicComponentProps) => (\n  <>\n    {properties.map((property) => {\n      const componentType = property.type!;\n      if (isValidComponentType(componentType)) {\n        const Component = COMPONENTS[componentType];\n        return <Component key={property.name} {...property} {...rest} />;\n      } else {\n        console.warn(`There is no editor registered for ${componentType}`);\n      }\n    })}\n  </>\n);\n\nexport const convertToName = (name: string): string =>\n  convertAttributeNameToForm(`config.${name}`);\n"],"names":["BooleanComponent","name","label","helpText","isDisabled","defaultValue","isNew","t","useTranslation","control","useFormContext","jsx","FormGroup","HelpItem","Controller","convertToName","field","Switch","value","ClientSelectComponent","props","ClientSelect","FileComponent","filename","setFilename","useState","isLoading","setIsLoading","FileUpload","_","file","GroupComponent","required","open","setOpen","groups","setGroups","jsxs","Fragment","GroupPickerDialog","InputGroup","ChipGroup","Chip","Button","ListComponent","options","Select","toggle","SelectVariant","option","SelectOption","MapComponent","getValues","setValue","register","map","setMap","fieldName","useEffect","values","generateId","update","val","id","entry","updateKey","index","key","updateEntry","updateValue","remove","Flex","FlexItem","attribute","TextInput","MinusCircleIcon","ActionList","ActionListItem","PlusCircleIcon","stringToMultiline","toStringValue","formValue","MultiValuedListComponent","stringify","isOpen","v","newValue","item","event","MultiValuedStringComponent","MultiLineInput","PasswordComponent","PasswordInput","parseValue","parseRow","RoleComponent","openModal","toggleModal","useToggle","errors","Split","AddRoleMappingModal","rows","SplitItem","ServiceRole","ScriptComponent","CodeEditor","Language","StringComponent","KeycloakTextInput","TextComponent","KeycloakTextArea","COMPONENTS","isValidComponentType","DynamicComponents","properties","rest","property","componentType","Component","convertAttributeNameToForm"],"mappings":"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"}