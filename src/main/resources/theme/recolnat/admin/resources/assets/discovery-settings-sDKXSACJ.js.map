{"version":3,"file":"discovery-settings-sDKXSACJ.js","sources":["../../src/identity-providers/component/FormGroupField.tsx","../../src/identity-providers/component/SwitchField.tsx","../../src/identity-providers/component/TextField.tsx"],"sourcesContent":["import { FormGroup } from \"@patternfly/react-core\";\nimport { PropsWithChildren } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { HelpItem } from \"ui-shared\";\n\nexport type FieldProps = { label: string; field: string; isReadOnly?: boolean };\nexport type FormGroupFieldProps = { label: string };\n\nexport const FormGroupField = ({\n  label,\n  children,\n}: PropsWithChildren<FormGroupFieldProps>) => {\n  const { t } = useTranslation();\n  return (\n    <FormGroup\n      label={t(label)}\n      fieldId={label}\n      labelIcon={<HelpItem helpText={t(`${label}Help`)} fieldLabelId={label} />}\n    >\n      {children}\n    </FormGroup>\n  );\n};\n","import { Switch } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FieldProps, FormGroupField } from \"./FormGroupField\";\n\ntype FieldType = \"boolean\" | \"string\";\n\ntype SwitchFieldProps = FieldProps & {\n  fieldType?: FieldType;\n};\n\nexport const SwitchField = ({\n  label,\n  field,\n  fieldType = \"string\",\n  isReadOnly = false,\n}: SwitchFieldProps) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n  return (\n    <FormGroupField label={label}>\n      <Controller\n        name={field}\n        defaultValue={fieldType === \"string\" ? \"false\" : false}\n        control={control}\n        render={({ field }) => (\n          <Switch\n            id={label}\n            label={t(\"on\")}\n            labelOff={t(\"off\")}\n            isChecked={\n              fieldType === \"string\"\n                ? field.value === \"true\"\n                : (field.value as boolean)\n            }\n            onChange={(value) =>\n              field.onChange(fieldType === \"string\" ? \"\" + value : value)\n            }\n            isDisabled={isReadOnly}\n            aria-label={label}\n          />\n        )}\n      />\n    </FormGroupField>\n  );\n};\n","import { useFormContext } from \"react-hook-form\";\n\nimport { FieldProps, FormGroupField } from \"./FormGroupField\";\nimport { KeycloakTextInput } from \"../../components/keycloak-text-input/KeycloakTextInput\";\n\nexport const TextField = ({ label, field, isReadOnly = false }: FieldProps) => {\n  const { register } = useFormContext();\n  return (\n    <FormGroupField label={label}>\n      <KeycloakTextInput\n        id={label}\n        data-testid={label}\n        isReadOnly={isReadOnly}\n        {...register(field)}\n      />\n    </FormGroupField>\n  );\n};\n"],"names":["FormGroupField","label","children","t","useTranslation","jsx","FormGroup","HelpItem","SwitchField","field","fieldType","isReadOnly","control","useFormContext","Controller","Switch","value","TextField","register","KeycloakTextInput"],"mappings":"uKASO,MAAMA,EAAiB,CAAC,CAC7B,MAAAC,EACA,SAAAC,CACF,IAA8C,CACtC,KAAA,CAAE,EAAAC,GAAMC,IAEZ,OAAAC,EAACC,EAAA,CACC,MAAOH,EAAEF,CAAK,EACd,QAASA,EACT,UAAYI,EAAAE,EAAA,CAAS,SAAUJ,EAAE,GAAGF,CAAK,MAAM,EAAG,aAAcA,CAAO,CAAA,EAEtE,SAAAC,CAAA,CAAA,CAGP,ECXaM,EAAc,CAAC,CAC1B,MAAAP,EACA,MAAAQ,EACA,UAAAC,EAAY,SACZ,WAAAC,EAAa,EACf,IAAwB,CAChB,KAAA,CAAE,EAAAR,GAAMC,IACR,CAAE,QAAAQ,GAAYC,IAElB,OAAAR,EAACL,GAAe,MAAAC,EACd,SAAAI,EAACS,EAAA,CACC,KAAML,EACN,aAAcC,IAAc,SAAW,QAAU,GACjD,QAAAE,EACA,OAAQ,CAAC,CAAE,MAAAH,CACT,IAAAJ,EAACU,EAAA,CACC,GAAId,EACJ,MAAOE,EAAE,IAAI,EACb,SAAUA,EAAE,KAAK,EACjB,UACEO,IAAc,SACVD,EAAM,QAAU,OACfA,EAAM,MAEb,SAAWO,GACTP,EAAM,SAASC,IAAc,SAAW,GAAKM,EAAQA,CAAK,EAE5D,WAAYL,EACZ,aAAYV,CAAA,CACd,CAAA,CAGN,CAAA,CAAA,CAEJ,ECzCagB,EAAY,CAAC,CAAE,MAAAhB,EAAO,MAAAQ,EAAO,WAAAE,EAAa,MAAwB,CACvE,KAAA,CAAE,SAAAO,GAAaL,IAEnB,OAAAR,EAACL,GAAe,MAAAC,EACd,SAAAI,EAACc,EAAA,CACC,GAAIlB,EACJ,cAAaA,EACb,WAAAU,EACC,GAAGO,EAAST,CAAK,CAAA,CAEtB,CAAA,CAAA,CAEJ"}