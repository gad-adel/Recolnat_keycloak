{"version":3,"file":"SearchFilter-geHnFeJ7.js","sources":["../../src/client-scopes/ChangeTypeDropdown.tsx","../../src/client-scopes/details/SearchFilter.tsx"],"sourcesContent":["import { AlertVariant, Select } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport type { Row } from \"../clients/scopes/ClientScopes\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport {\n  ClientScope,\n  allClientScopeTypes,\n  changeClientScope,\n  changeScope,\n  clientScopeTypesSelectOptions,\n} from \"../components/client-scope/ClientScopeTypes\";\n\ntype ChangeTypeDropdownProps = {\n  clientId?: string;\n  selectedRows: Row[];\n  refresh: () => void;\n};\n\nexport const ChangeTypeDropdown = ({\n  clientId,\n  selectedRows,\n  refresh,\n}: ChangeTypeDropdownProps) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n\n  const { addAlert, addError } = useAlerts();\n\n  return (\n    <Select\n      toggleId=\"change-type-dropdown\"\n      aria-label=\"change-type-to\"\n      isOpen={open}\n      selections={[]}\n      isDisabled={selectedRows.length === 0}\n      placeholderText={t(\"changeTypeTo\")}\n      onToggle={setOpen}\n      onSelect={async (_, value) => {\n        try {\n          await Promise.all(\n            selectedRows.map((row) => {\n              return clientId\n                ? changeClientScope(\n                    clientId,\n                    row,\n                    row.type,\n                    value as ClientScope,\n                  )\n                : changeScope(row, value as ClientScope);\n            }),\n          );\n          setOpen(false);\n          refresh();\n          addAlert(t(\"clientScopeSuccess\"), AlertVariant.success);\n        } catch (error) {\n          addError(\"clientScopeError\", error);\n        }\n      }}\n    >\n      {clientScopeTypesSelectOptions(\n        t,\n        !clientId ? allClientScopeTypes : undefined,\n      )}\n    </Select>\n  );\n};\n","import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Dropdown,\n  DropdownItem,\n  DropdownToggle,\n  Select,\n  SelectOption,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport { FilterIcon } from \"@patternfly/react-icons\";\n\nimport {\n  AllClientScopes,\n  AllClientScopeType,\n  clientScopeTypesSelectOptions,\n} from \"../../components/client-scope/ClientScopeTypes\";\nimport type { Row } from \"../../clients/scopes/ClientScopes\";\n\nexport type SearchType = \"name\" | \"type\" | \"protocol\";\nexport const PROTOCOLS = [\"all\", \"saml\", \"openid-connect\"] as const;\nexport type ProtocolType = (typeof PROTOCOLS)[number];\n\nexport const nameFilter =\n  (search = \"\") =>\n  (scope: Row) =>\n    scope.name?.includes(search);\nexport const typeFilter = (type: AllClientScopeType) => (scope: Row) =>\n  type === AllClientScopes.none || scope.type === type;\n\nexport const protocolFilter = (protocol: ProtocolType) => (scope: Row) =>\n  protocol === \"all\" || scope.protocol === protocol;\n\ntype SearchToolbarProps = Omit<SearchDropdownProps, \"withProtocol\"> & {\n  type: AllClientScopeType;\n  onType: (value: AllClientScopes) => void;\n  protocol?: ProtocolType;\n  onProtocol?: (value: ProtocolType) => void;\n};\n\ntype SearchDropdownProps = {\n  searchType: SearchType;\n  onSelect: (value: SearchType) => void;\n  withProtocol?: boolean;\n};\n\nexport const SearchDropdown = ({\n  searchType,\n  withProtocol = false,\n  onSelect,\n}: SearchDropdownProps) => {\n  const { t } = useTranslation();\n  const [searchToggle, setSearchToggle] = useState(false);\n\n  const createDropdown = (searchType: SearchType) => (\n    <DropdownItem\n      key={searchType}\n      onClick={() => {\n        onSelect(searchType);\n        setSearchToggle(false);\n      }}\n    >\n      {t(`clientScopeSearch.${searchType}`)}\n    </DropdownItem>\n  );\n  const options = [createDropdown(\"name\"), createDropdown(\"type\")];\n  if (withProtocol) {\n    options.push(createDropdown(\"protocol\"));\n  }\n\n  return (\n    <Dropdown\n      className=\"keycloak__client-scopes__searchtype\"\n      toggle={\n        <DropdownToggle id=\"toggle-id\" onToggle={setSearchToggle}>\n          <FilterIcon /> {t(`clientScopeSearch.${searchType}`)}\n        </DropdownToggle>\n      }\n      isOpen={searchToggle}\n      dropdownItems={options}\n    />\n  );\n};\n\nexport const SearchToolbar = ({\n  searchType,\n  onSelect,\n  type,\n  onType,\n  protocol,\n  onProtocol,\n}: SearchToolbarProps) => {\n  const { t } = useTranslation();\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      {searchType === \"type\" && (\n        <>\n          <ToolbarItem>\n            <SearchDropdown\n              searchType={searchType}\n              onSelect={onSelect}\n              withProtocol={!!protocol}\n            />\n          </ToolbarItem>\n          <ToolbarItem>\n            <Select\n              className=\"keycloak__client-scopes__searchtype\"\n              onToggle={setOpen}\n              isOpen={open}\n              selections={[\n                type === AllClientScopes.none\n                  ? t(\"allTypes\")\n                  : t(`clientScopeTypes.${type}`),\n              ]}\n              onSelect={(_, value) => {\n                onType(value as AllClientScopes);\n                setOpen(false);\n              }}\n            >\n              <SelectOption value={AllClientScopes.none}>\n                {t(\"allTypes\")}\n              </SelectOption>\n              <>{clientScopeTypesSelectOptions(t)}</>\n            </Select>\n          </ToolbarItem>\n        </>\n      )}\n      {searchType === \"protocol\" && !!protocol && (\n        <>\n          <ToolbarItem>\n            <SearchDropdown\n              searchType={searchType}\n              onSelect={onSelect}\n              withProtocol\n            />\n          </ToolbarItem>\n          <ToolbarItem>\n            <Select\n              className=\"keycloak__client-scopes__searchtype\"\n              onToggle={setOpen}\n              isOpen={open}\n              selections={[t(`protocolTypes.${protocol}`)]}\n              onSelect={(_, value) => {\n                onProtocol?.(value as ProtocolType);\n                setOpen(false);\n              }}\n            >\n              {PROTOCOLS.map((type) => (\n                <SelectOption key={type} value={type}>\n                  {t(`protocolTypes.${type}`)}\n                </SelectOption>\n              ))}\n            </Select>\n          </ToolbarItem>\n        </>\n      )}\n    </>\n  );\n};\n"],"names":["ChangeTypeDropdown","clientId","selectedRows","refresh","useTranslation","open","setOpen","useState","addAlert","addError","useAlerts","jsx","Select","_","value","row","changeClientScope","changeScope","AlertVariant","error","clientScopeTypesSelectOptions","allClientScopeTypes","PROTOCOLS","nameFilter","search","scope","typeFilter","type","AllClientScopes","protocolFilter","protocol","SearchDropdown","searchType","withProtocol","onSelect","searchToggle","setSearchToggle","createDropdown","DropdownItem","options","Dropdown","jsxs","DropdownToggle","FilterIcon","SearchToolbar","onType","onProtocol","t","Fragment","ToolbarItem","SelectOption"],"mappings":"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"}