{"version":3,"file":"NewAttributeSettings-gihrjnQR.js","sources":["../../src/realm-settings/user-profile/attribute/AttributeAnnotations.tsx","../../src/realm-settings/user-profile/attribute/AttributeGeneralSettings.tsx","../../src/realm-settings/user-profile/attribute/AttributePermission.tsx","../../src/realm-settings/user-profile/attribute/ValidatorSelect.tsx","../../src/realm-settings/user-profile/attribute/AddValidatorDialog.tsx","../../src/realm-settings/user-profile/attribute/AttributeValidations.tsx","../../src/realm-settings/NewAttributeSettings.tsx"],"sourcesContent":["import { useTranslation } from \"react-i18next\";\nimport { FormGroup, Grid, GridItem } from \"@patternfly/react-core\";\n\nimport { FormAccess } from \"../../../components/form/FormAccess\";\nimport { KeyValueInput } from \"../../../components/key-value-form/KeyValueInput\";\n\nimport \"../../realm-settings-section.css\";\n\nexport const AttributeAnnotations = () => {\n  const { t } = useTranslation();\n\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"annotations\")}\n        fieldId=\"kc-annotations\"\n        className=\"kc-annotations-label\"\n      >\n        <Grid className=\"kc-annotations\">\n          <GridItem>\n            <KeyValueInput\n              name=\"annotations\"\n              defaultKeyValue={[\n                {\n                  key: \"inputType\",\n                  label: t(\"inputType\"),\n                  values: [\n                    \"text\",\n                    \"textarea\",\n                    \"select\",\n                    \"select-radiobuttons\",\n                    \"multiselect\",\n                    \"multiselect-checkboxes\",\n                    \"html5-email\",\n                    \"html5-tel\",\n                    \"html5-url\",\n                    \"html5-number\",\n                    \"html5-range\",\n                    \"html5-datetime-local\",\n                    \"html5-date\",\n                    \"html5-month\",\n                    \"html5-week\",\n                    \"html5-time\",\n                  ],\n                },\n                {\n                  key: \"inputHelperTextBefore\",\n                  label: t(\"inputHelperTextBefore\"),\n                },\n                {\n                  key: \"inputHelperTextAfter\",\n                  label: t(\"inputHelperTextAfter\"),\n                },\n                {\n                  key: \"inputOptionLabelsI18nPrefix\",\n                  label: t(\"inputOptionLabelsI18nPrefix\"),\n                },\n                {\n                  key: \"inputTypePlaceholder\",\n                  label: t(\"inputTypePlaceholder\"),\n                },\n                {\n                  key: \"inputTypeSize\",\n                  label: t(\"inputTypeSize\"),\n                },\n                {\n                  key: \"inputTypeCols\",\n                  label: t(\"inputTypeCols\"),\n                },\n                {\n                  key: \"inputTypeRows\",\n                  label: t(\"inputTypeRows\"),\n                },\n                {\n                  key: \"inputTypeStep\",\n                  label: t(\"inputTypeStep\"),\n                },\n              ]}\n            />\n          </GridItem>\n        </Grid>\n      </FormGroup>\n    </FormAccess>\n  );\n};\n","import type ClientScopeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/clientScopeRepresentation\";\nimport type UserProfileConfig from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport {\n  Divider,\n  FormGroup,\n  Radio,\n  Select,\n  SelectOption,\n  SelectVariant,\n  Switch,\n} from \"@patternfly/react-core\";\nimport { isEqual } from \"lodash-es\";\nimport { useState } from \"react\";\nimport { Controller, useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { HelpItem } from \"ui-shared\";\n\nimport { adminClient } from \"../../../admin-client\";\nimport { FormAccess } from \"../../../components/form/FormAccess\";\nimport { KeycloakSpinner } from \"../../../components/keycloak-spinner/KeycloakSpinner\";\nimport { KeycloakTextInput } from \"../../../components/keycloak-text-input/KeycloakTextInput\";\nimport { useFetch } from \"../../../utils/useFetch\";\nimport { useParams } from \"../../../utils/useParams\";\nimport { USERNAME_EMAIL } from \"../../NewAttributeSettings\";\nimport type { AttributeParams } from \"../../routes/Attribute\";\n\nimport \"../../realm-settings-section.css\";\n\nconst REQUIRED_FOR = [\n  { label: \"requiredForLabel.both\", value: [\"admin\", \"user\"] },\n  { label: \"requiredForLabel.users\", value: [\"user\"] },\n  { label: \"requiredForLabel.admins\", value: [\"admin\"] },\n] as const;\n\nexport const AttributeGeneralSettings = () => {\n  const { t } = useTranslation();\n  const form = useFormContext();\n  const [clientScopes, setClientScopes] =\n    useState<ClientScopeRepresentation[]>();\n  const [config, setConfig] = useState<UserProfileConfig>();\n  const [selectEnabledWhenOpen, setSelectEnabledWhenOpen] = useState(false);\n  const [selectRequiredForOpen, setSelectRequiredForOpen] = useState(false);\n  const [isAttributeGroupDropdownOpen, setIsAttributeGroupDropdownOpen] =\n    useState(false);\n  const { attributeName } = useParams<AttributeParams>();\n  const editMode = attributeName ? true : false;\n\n  const hasSelector = useWatch({\n    control: form.control,\n    name: \"hasSelector\",\n  });\n\n  const hasRequiredScopes = useWatch({\n    control: form.control,\n    name: \"hasRequiredScopes\",\n  });\n\n  const required = useWatch({\n    control: form.control,\n    name: \"isRequired\",\n    defaultValue: false,\n  });\n\n  useFetch(() => adminClient.clientScopes.find(), setClientScopes, []);\n  useFetch(() => adminClient.users.getProfile(), setConfig, []);\n\n  if (!clientScopes) {\n    return <KeycloakSpinner />;\n  }\n\n  function setHasSelector(hasSelector: boolean) {\n    form.setValue(\"hasSelector\", hasSelector);\n  }\n\n  function setHasRequiredScopes(hasRequiredScopes: boolean) {\n    form.setValue(\"hasRequiredScopes\", hasRequiredScopes);\n  }\n\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <FormGroup\n        label={t(\"attributeName\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"attributeNameHelp\")}\n            fieldLabelId=\"attributeName\"\n          />\n        }\n        fieldId=\"kc-attribute-name\"\n        isRequired\n        validated={form.formState.errors.name ? \"error\" : \"default\"}\n        helperTextInvalid={t(\"validateAttributeName\")}\n      >\n        <KeycloakTextInput\n          isRequired\n          id=\"kc-attribute-name\"\n          defaultValue=\"\"\n          data-testid=\"attribute-name\"\n          isDisabled={editMode}\n          validated={form.formState.errors.name ? \"error\" : \"default\"}\n          {...form.register(\"name\", { required: true })}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"attributeDisplayName\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"attributeDisplayNameHelp\")}\n            fieldLabelId=\"attributeDisplayName\"\n          />\n        }\n        fieldId=\"kc-attribute-display-name\"\n      >\n        <KeycloakTextInput\n          id=\"kc-attribute-display-name\"\n          defaultValue=\"\"\n          data-testid=\"attribute-display-name\"\n          {...form.register(\"displayName\")}\n        />\n      </FormGroup>\n      <FormGroup\n        label={t(\"attributeGroup\")}\n        labelIcon={\n          <HelpItem\n            helpText={t(\"attributeGroupHelp\")}\n            fieldLabelId=\"realm-setting:attributeGroup\"\n          />\n        }\n        fieldId=\"kc-attribute-group\"\n      >\n        <Controller\n          name=\"group\"\n          defaultValue=\"\"\n          control={form.control}\n          render={({ field }) => (\n            <Select\n              toggleId=\"kc-attributeGroup\"\n              onToggle={() =>\n                setIsAttributeGroupDropdownOpen(!isAttributeGroupDropdownOpen)\n              }\n              isOpen={isAttributeGroupDropdownOpen}\n              onSelect={(_, value) => {\n                field.onChange(value.toString());\n                setIsAttributeGroupDropdownOpen(false);\n              }}\n              selections={[field.value || t(\"none\")]}\n              variant={SelectVariant.single}\n            >\n              {[\n                <SelectOption key=\"empty\" value=\"\">\n                  {t(\"none\")}\n                </SelectOption>,\n                ...(config?.groups?.map((group) => (\n                  <SelectOption key={group.name} value={group.name}>\n                    {group.name}\n                  </SelectOption>\n                )) || []),\n              ]}\n            </Select>\n          )}\n        ></Controller>\n      </FormGroup>\n      {!USERNAME_EMAIL.includes(attributeName) && (\n        <>\n          <Divider />\n          <FormGroup\n            label={t(\"enabledWhen\")}\n            fieldId=\"enabledWhen\"\n            hasNoPaddingTop\n          >\n            <Radio\n              id=\"always\"\n              data-testid=\"always\"\n              isChecked={!hasSelector}\n              name=\"enabledWhen\"\n              label={t(\"always\")}\n              onChange={() => setHasSelector(false)}\n              className=\"pf-u-mb-md\"\n            />\n            <Radio\n              id=\"scopesAsRequested\"\n              data-testid=\"scopesAsRequested\"\n              isChecked={hasSelector}\n              name=\"enabledWhen\"\n              label={t(\"scopesAsRequested\")}\n              onChange={() => setHasSelector(true)}\n              className=\"pf-u-mb-md\"\n            />\n          </FormGroup>\n          {hasSelector && (\n            <FormGroup fieldId=\"kc-scope-enabled-when\">\n              <Controller\n                name=\"selector.scopes\"\n                control={form.control}\n                defaultValue={[]}\n                render={({ field }) => (\n                  <Select\n                    name=\"scopes\"\n                    data-testid=\"enabled-when-scope-field\"\n                    variant={SelectVariant.typeaheadMulti}\n                    typeAheadAriaLabel=\"Select\"\n                    chipGroupProps={{\n                      numChips: 3,\n                      expandedText: t(\"hide\"),\n                      collapsedText: t(\"showRemaining\"),\n                    }}\n                    onToggle={(isOpen) => setSelectEnabledWhenOpen(isOpen)}\n                    selections={field.value}\n                    onSelect={(_, selectedValue) => {\n                      const option = selectedValue.toString();\n                      let changedValue = [\"\"];\n                      if (field.value) {\n                        changedValue = field.value.includes(option)\n                          ? field.value.filter(\n                              (item: string) => item !== option,\n                            )\n                          : [...field.value, option];\n                      } else {\n                        changedValue = [option];\n                      }\n\n                      field.onChange(changedValue);\n                    }}\n                    onClear={(selectedValues) => {\n                      selectedValues.stopPropagation();\n                      field.onChange([]);\n                    }}\n                    isOpen={selectEnabledWhenOpen}\n                    aria-labelledby={\"scope\"}\n                  >\n                    {clientScopes.map((option) => (\n                      <SelectOption key={option.name} value={option.name} />\n                    ))}\n                  </Select>\n                )}\n              />\n            </FormGroup>\n          )}\n          <Divider />\n          <FormGroup\n            label={t(\"required\")}\n            labelIcon={\n              <HelpItem helpText={t(\"requiredHelp\")} fieldLabelId=\"required\" />\n            }\n            fieldId=\"kc-required\"\n            hasNoPaddingTop\n          >\n            <Controller\n              name=\"isRequired\"\n              data-testid=\"required\"\n              defaultValue={false}\n              control={form.control}\n              render={({ field }) => (\n                <Switch\n                  id={\"kc-required\"}\n                  onChange={field.onChange}\n                  isChecked={field.value}\n                  label={t(\"on\")}\n                  labelOff={t(\"off\")}\n                  aria-label={t(\"required\")}\n                />\n              )}\n            />\n          </FormGroup>\n          {required && (\n            <>\n              <FormGroup\n                label={t(\"requiredFor\")}\n                fieldId=\"requiredFor\"\n                hasNoPaddingTop\n              >\n                <Controller\n                  name=\"required.roles\"\n                  data-testid=\"requiredFor\"\n                  defaultValue={REQUIRED_FOR[0].value}\n                  control={form.control}\n                  render={({ field }) => (\n                    <div className=\"kc-requiredFor\">\n                      {REQUIRED_FOR.map((option) => (\n                        <Radio\n                          id={option.label}\n                          key={option.label}\n                          data-testid={option.label}\n                          isChecked={isEqual(field.value, option.value)}\n                          name=\"roles\"\n                          onChange={() => {\n                            field.onChange(option.value);\n                          }}\n                          label={t(option.label)}\n                          className=\"kc-requiredFor-option\"\n                        />\n                      ))}\n                    </div>\n                  )}\n                />\n              </FormGroup>\n              <FormGroup\n                label={t(\"requiredWhen\")}\n                fieldId=\"requiredWhen\"\n                hasNoPaddingTop\n              >\n                <Radio\n                  id=\"requiredAlways\"\n                  data-testid=\"requiredAlways\"\n                  isChecked={!hasRequiredScopes}\n                  name=\"requiredWhen\"\n                  label={t(\"always\")}\n                  onChange={() => setHasRequiredScopes(false)}\n                  className=\"pf-u-mb-md\"\n                />\n                <Radio\n                  id=\"requiredScopesAsRequested\"\n                  data-testid=\"requiredScopesAsRequested\"\n                  isChecked={hasRequiredScopes}\n                  name=\"requiredWhen\"\n                  label={t(\"scopesAsRequested\")}\n                  onChange={() => setHasRequiredScopes(true)}\n                  className=\"pf-u-mb-md\"\n                />\n              </FormGroup>\n              {hasRequiredScopes && (\n                <FormGroup fieldId=\"kc-scope-required-when\">\n                  <Controller\n                    name=\"required.scopes\"\n                    control={form.control}\n                    defaultValue={[]}\n                    render={({ field }) => (\n                      <Select\n                        name=\"scopeRequired\"\n                        data-testid=\"required-when-scope-field\"\n                        variant={SelectVariant.typeaheadMulti}\n                        typeAheadAriaLabel=\"Select\"\n                        chipGroupProps={{\n                          numChips: 3,\n                          expandedText: t(\"hide\"),\n                          collapsedText: t(\"showRemaining\"),\n                        }}\n                        onToggle={(isOpen) => setSelectRequiredForOpen(isOpen)}\n                        selections={field.value}\n                        onSelect={(_, selectedValue) => {\n                          const option = selectedValue.toString();\n                          let changedValue = [\"\"];\n                          if (field.value) {\n                            changedValue = field.value.includes(option)\n                              ? field.value.filter(\n                                  (item: string) => item !== option,\n                                )\n                              : [...field.value, option];\n                          } else {\n                            changedValue = [option];\n                          }\n                          field.onChange(changedValue);\n                        }}\n                        onClear={(selectedValues) => {\n                          selectedValues.stopPropagation();\n                          field.onChange([]);\n                        }}\n                        isOpen={selectRequiredForOpen}\n                        aria-labelledby={\"scope\"}\n                      >\n                        {clientScopes.map((option) => (\n                          <SelectOption key={option.name} value={option.name} />\n                        ))}\n                      </Select>\n                    )}\n                  />\n                </FormGroup>\n              )}\n            </>\n          )}\n        </>\n      )}\n    </FormAccess>\n  );\n};\n","import { Checkbox, FormGroup, Grid, GridItem } from \"@patternfly/react-core\";\nimport { Controller, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { FormAccess } from \"../../../components/form/FormAccess\";\nimport { HelpItem } from \"ui-shared\";\n\nimport \"../../realm-settings-section.css\";\n\nconst Permissions = ({ name }: { name: string }) => {\n  const { t } = useTranslation();\n  const { control } = useFormContext();\n\n  return (\n    <Grid>\n      <Controller\n        name={`permissions.${name}`}\n        control={control}\n        defaultValue={[]}\n        render={({ field }) => (\n          <>\n            <GridItem lg={4} sm={6}>\n              <Checkbox\n                id={`user-${name}`}\n                label={t(\"user\")}\n                value=\"user\"\n                data-testid={`user-${name}`}\n                isChecked={field.value.includes(\"user\")}\n                onChange={() => {\n                  const option = \"user\";\n                  const changedValue = field.value.includes(option)\n                    ? field.value.filter((item: string) => item !== option)\n                    : [...field.value, option];\n\n                  field.onChange(changedValue);\n                }}\n              />\n            </GridItem>\n            <GridItem lg={8} sm={6}>\n              <Checkbox\n                id={`admin-${name}`}\n                label={t(\"admin\")}\n                value=\"admin\"\n                data-testid={`admin-${name}`}\n                isChecked={field.value.includes(\"admin\")}\n                onChange={() => {\n                  const option = \"admin\";\n                  const changedValue = field.value.includes(option)\n                    ? field.value.filter((item: string) => item !== option)\n                    : [...field.value, option];\n\n                  field.onChange(changedValue);\n                }}\n              />\n            </GridItem>\n          </>\n        )}\n      />\n    </Grid>\n  );\n};\n\nexport const AttributePermission = () => {\n  const { t } = useTranslation();\n\n  return (\n    <FormAccess role=\"manage-realm\" isHorizontal>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"whoCanEdit\")}\n        labelIcon={\n          <HelpItem helpText={t(\"whoCanEditHelp\")} fieldLabelId=\"whoCanEdit\" />\n        }\n        fieldId=\"kc-who-can-edit\"\n      >\n        <Permissions name=\"edit\" />\n      </FormGroup>\n      <FormGroup\n        hasNoPaddingTop\n        label={t(\"whoCanView\")}\n        labelIcon={\n          <HelpItem helpText={t(\"whoCanViewHelp\")} fieldLabelId=\"whoCanView\" />\n        }\n        fieldId=\"kc-who-can-view\"\n      >\n        <Permissions name=\"view\" />\n      </FormGroup>\n    </FormAccess>\n  );\n};\n","import ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport { FormGroup, Select, SelectOption } from \"@patternfly/react-core\";\nimport { useMemo, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useServerInfo } from \"../../../context/server-info/ServerInfoProvider\";\nimport useToggle from \"../../../utils/useToggle\";\n\ntype ValidatorSelectProps = {\n  selectedValidators: string[];\n  onChange: (validator: ComponentTypeRepresentation) => void;\n};\n\nexport const ValidatorSelect = ({\n  selectedValidators,\n  onChange,\n}: ValidatorSelectProps) => {\n  const { t } = useTranslation();\n  const allValidator: ComponentTypeRepresentation[] =\n    useServerInfo().componentTypes?.[\"org.keycloak.validate.Validator\"] || [];\n  const validators = useMemo(\n    () => allValidator.filter(({ id }) => !selectedValidators.includes(id)),\n    [selectedValidators],\n  );\n  const [open, toggle] = useToggle();\n  const [value, setValue] = useState<ComponentTypeRepresentation>();\n\n  return (\n    <FormGroup label={t(\"validatorType\")} fieldId=\"validator\">\n      <Select\n        toggleId=\"validator\"\n        onToggle={toggle}\n        onSelect={(_, value) => {\n          const option = value as ComponentTypeRepresentation;\n          onChange(option);\n          setValue(option);\n          toggle();\n        }}\n        selections={value?.id}\n        variant=\"single\"\n        aria-label={t(\"selectOne\")}\n        isOpen={open}\n        placeholderText={t(\"choose\")}\n        menuAppendTo=\"parent\"\n        maxHeight={300}\n      >\n        {validators.map((option) => (\n          <SelectOption\n            selected={value?.id === option.id}\n            key={option.id}\n            value={option}\n            description={option.helpText}\n          >\n            {option.id}\n          </SelectOption>\n        ))}\n      </Select>\n    </FormGroup>\n  );\n};\n","import ComponentRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentRepresentation\";\nimport ComponentTypeRepresentation from \"@keycloak/keycloak-admin-client/lib/defs/componentTypeRepresentation\";\nimport { Button, Form, Modal, ModalVariant } from \"@patternfly/react-core\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { DynamicComponents } from \"../../../components/dynamic/DynamicComponents\";\nimport { useServerInfo } from \"../../../context/server-info/ServerInfoProvider\";\nimport type { IndexedValidations } from \"../../NewAttributeSettings\";\nimport { ValidatorSelect } from \"./ValidatorSelect\";\n\nexport type AddValidatorDialogProps = {\n  selectedValidators: IndexedValidations[];\n  toggleDialog: () => void;\n  onConfirm: (newValidator: ComponentRepresentation) => void;\n};\n\nexport const AddValidatorDialog = ({\n  selectedValidators,\n  toggleDialog,\n  onConfirm,\n}: AddValidatorDialogProps) => {\n  const { t } = useTranslation();\n  const [selectedValidator, setSelectedValidator] =\n    useState<ComponentTypeRepresentation>();\n\n  const allSelected =\n    useServerInfo().componentTypes?.[\"org.keycloak.validate.Validator\"]\n      .length === selectedValidators.length;\n  const form = useForm<ComponentTypeRepresentation>();\n  const { handleSubmit } = form;\n\n  const save = (newValidator: ComponentTypeRepresentation) => {\n    onConfirm({ ...newValidator, id: selectedValidator?.id });\n    toggleDialog();\n  };\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title={t(\"addValidator\")}\n      isOpen\n      onClose={toggleDialog}\n      actions={[\n        <Button\n          key=\"save\"\n          data-testid=\"save-validator-role-button\"\n          variant=\"primary\"\n          type=\"submit\"\n          form=\"add-validator\"\n        >\n          {t(\"save\")}\n        </Button>,\n        <Button\n          key=\"cancel\"\n          data-testid=\"cancel-validator-role-button\"\n          variant=\"link\"\n          onClick={toggleDialog}\n        >\n          {t(\"cancel\")}\n        </Button>,\n      ]}\n    >\n      {allSelected ? (\n        t(\"emptyValidators\")\n      ) : (\n        <Form id=\"add-validator\" onSubmit={handleSubmit(save)}>\n          <ValidatorSelect\n            selectedValidators={selectedValidators.map(\n              (validator) => validator.key,\n            )}\n            onChange={setSelectedValidator}\n          />\n          {selectedValidator && (\n            <FormProvider {...form}>\n              <DynamicComponents properties={selectedValidator.properties} />\n            </FormProvider>\n          )}\n        </Form>\n      )}\n    </Modal>\n  );\n};\n","import {\n  Button,\n  ButtonVariant,\n  Divider,\n  Text,\n  TextVariants,\n} from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport {\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\nimport { useEffect, useState } from \"react\";\nimport { useFormContext, useWatch } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useConfirmDialog } from \"../../../components/confirm-dialog/ConfirmDialog\";\nimport { DefaultValue } from \"../../../components/key-value-form/KeyValueInput\";\nimport useToggle from \"../../../utils/useToggle\";\nimport type { IndexedValidations } from \"../../NewAttributeSettings\";\nimport { AddValidatorDialog } from \"../attribute/AddValidatorDialog\";\n\nimport \"../../realm-settings-section.css\";\n\nexport const AttributeValidations = () => {\n  const { t } = useTranslation();\n  const [addValidatorModalOpen, toggleModal] = useToggle();\n  const [validatorToDelete, setValidatorToDelete] = useState<string>();\n  const { setValue, control, register, getValues } = useFormContext();\n\n  const validators: IndexedValidations[] = useWatch({\n    name: \"validations\",\n    control,\n    defaultValue: [],\n  });\n\n  useEffect(() => {\n    register(\"validations\");\n  }, [register]);\n\n  const [toggleDeleteDialog, DeleteConfirm] = useConfirmDialog({\n    titleKey: t(\"deleteValidatorConfirmTitle\"),\n    messageKey: t(\"deleteValidatorConfirmMsg\", {\n      validatorName: validatorToDelete,\n    }),\n    continueButtonLabel: \"delete\",\n    continueButtonVariant: ButtonVariant.danger,\n    onConfirm: async () => {\n      const updatedValidators = validators.filter(\n        (validator) => validator.key !== validatorToDelete,\n      );\n\n      setValue(\"validations\", [...updatedValidators]);\n    },\n  });\n\n  return (\n    <>\n      {addValidatorModalOpen && (\n        <AddValidatorDialog\n          selectedValidators={validators}\n          onConfirm={(newValidator) => {\n            const annotations: DefaultValue[] = getValues(\"annotations\");\n            if (\n              newValidator.id === \"options\" &&\n              !annotations.find((a) => a.key === \"inputType\")\n            ) {\n              setValue(\"annotations\", [\n                ...annotations,\n                { key: \"inputType\", value: \"select\" },\n              ]);\n            }\n            setValue(\"validations\", [\n              ...validators,\n              { key: newValidator.id, value: newValidator.config },\n            ]);\n          }}\n          toggleDialog={toggleModal}\n        />\n      )}\n      <DeleteConfirm />\n      <div className=\"kc-attributes-validations\">\n        <Button\n          id=\"addValidator\"\n          onClick={() => toggleModal()}\n          variant=\"link\"\n          data-testid=\"addValidator\"\n          className=\"kc--attributes-validations--add-validation-button\"\n          icon={<PlusCircleIcon />}\n        >\n          {t(\"addValidator\")}\n        </Button>\n        <Divider />\n        {validators.length !== 0 ? (\n          <TableComposable>\n            <Thead>\n              <Tr>\n                <Th>{t(\"validatorColNames.colName\")}</Th>\n                <Th>{t(\"validatorColNames.colConfig\")}</Th>\n                <Th aria-hidden=\"true\" />\n              </Tr>\n            </Thead>\n            <Tbody>\n              {validators.map((validator) => (\n                <Tr key={validator.key}>\n                  <Td dataLabel={t(\"validatorColNames.colName\")}>\n                    {validator.key}\n                  </Td>\n                  <Td dataLabel={t(\"validatorColNames.colConfig\")}>\n                    {JSON.stringify(validator.value)}\n                  </Td>\n                  <Td className=\"kc--attributes-validations--action-cell\">\n                    <Button\n                      key=\"validator\"\n                      variant=\"link\"\n                      data-testid=\"deleteValidator\"\n                      onClick={() => {\n                        toggleDeleteDialog();\n                        setValidatorToDelete(validator.key);\n                      }}\n                    >\n                      {t(\"delete\")}\n                    </Button>\n                  </Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </TableComposable>\n        ) : (\n          <Text className=\"kc-emptyValidators\" component={TextVariants.h6}>\n            {t(\"emptyValidators\")}\n          </Text>\n        )}\n      </div>\n    </>\n  );\n};\n","import type { UserProfileAttribute } from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport type UserProfileConfig from \"@keycloak/keycloak-admin-client/lib/defs/userProfileMetadata\";\nimport {\n  AlertVariant,\n  Button,\n  Form,\n  PageSection,\n} from \"@patternfly/react-core\";\nimport { flatten } from \"flat\";\nimport { useState } from \"react\";\nimport { FormProvider, useForm, useFormContext } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { ScrollForm } from \"ui-shared\";\nimport { adminClient } from \"../admin-client\";\nimport { useAlerts } from \"../components/alert/Alerts\";\nimport { FixedButtonsGroup } from \"../components/form/FixedButtonGroup\";\nimport { ViewHeader } from \"../components/view-header/ViewHeader\";\nimport { convertToFormValues } from \"../util\";\nimport { useFetch } from \"../utils/useFetch\";\nimport { useParams } from \"../utils/useParams\";\nimport type { AttributeParams } from \"./routes/Attribute\";\nimport { toUserProfile } from \"./routes/UserProfile\";\nimport { UserProfileProvider } from \"./user-profile/UserProfileContext\";\nimport { AttributeAnnotations } from \"./user-profile/attribute/AttributeAnnotations\";\nimport { AttributeGeneralSettings } from \"./user-profile/attribute/AttributeGeneralSettings\";\nimport { AttributePermission } from \"./user-profile/attribute/AttributePermission\";\nimport { AttributeValidations } from \"./user-profile/attribute/AttributeValidations\";\n\nimport \"./realm-settings-section.css\";\n\ntype IndexedAnnotations = {\n  key: string;\n  value?: Record<string, unknown>;\n};\n\nexport type IndexedValidations = {\n  key: string;\n  value?: Record<string, unknown>;\n};\n\ntype UserProfileAttributeFormFields = Omit<\n  UserProfileAttribute,\n  \"validations\" | \"annotations\"\n> &\n  Attribute &\n  Permission & {\n    validations: IndexedValidations[];\n    annotations: IndexedAnnotations[];\n    hasSelector: boolean;\n    hasRequiredScopes: boolean;\n  };\n\ntype Attribute = {\n  roles: string[];\n  scopes: string[];\n  isRequired: boolean;\n};\n\ntype Permission = {\n  view: PermissionView[];\n  edit: PermissionEdit[];\n};\n\ntype PermissionView = [\n  {\n    adminView: boolean;\n    userView: boolean;\n  },\n];\n\ntype PermissionEdit = [\n  {\n    adminEdit: boolean;\n    userEdit: boolean;\n  },\n];\n\nexport const USERNAME_EMAIL = [\"username\", \"email\"];\n\nconst CreateAttributeFormContent = ({\n  save,\n}: {\n  save: (profileConfig: UserProfileConfig) => void;\n}) => {\n  const { t } = useTranslation();\n  const form = useFormContext();\n  const { realm, attributeName } = useParams<AttributeParams>();\n  const editMode = attributeName ? true : false;\n\n  return (\n    <UserProfileProvider>\n      <ScrollForm\n        label={t(\"jumpToSection\")}\n        sections={[\n          { title: t(\"generalSettings\"), panel: <AttributeGeneralSettings /> },\n          { title: t(\"permission\"), panel: <AttributePermission /> },\n          { title: t(\"validations\"), panel: <AttributeValidations /> },\n          { title: t(\"annotations\"), panel: <AttributeAnnotations /> },\n        ]}\n      />\n      <Form onSubmit={form.handleSubmit(save)}>\n        <FixedButtonsGroup name=\"attribute-settings\">\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            data-testid=\"attribute-create\"\n          >\n            {editMode ? t(\"save\") : t(\"create\")}\n          </Button>\n          <Link\n            to={toUserProfile({ realm, tab: \"attributes\" })}\n            data-testid=\"attribute-cancel\"\n            className=\"kc-attributeCancel\"\n          >\n            {t(\"cancel\")}\n          </Link>\n        </FixedButtonsGroup>\n      </Form>\n    </UserProfileProvider>\n  );\n};\n\nexport default function NewAttributeSettings() {\n  const { realm, attributeName } = useParams<AttributeParams>();\n  const form = useForm<UserProfileAttributeFormFields>();\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { addAlert, addError } = useAlerts();\n  const [config, setConfig] = useState<UserProfileConfig | null>(null);\n  const editMode = attributeName ? true : false;\n\n  useFetch(\n    () => adminClient.users.getProfile(),\n    (config) => {\n      setConfig(config);\n      const {\n        annotations,\n        validations,\n        permissions,\n        selector,\n        required,\n        ...values\n      } = config.attributes!.find(\n        (attribute) => attribute.name === attributeName,\n      ) || { permissions: { edit: [\"admin\"] } };\n      convertToFormValues(\n        {\n          ...values,\n          hasSelector: typeof selector !== \"undefined\",\n          hasRequiredScopes: typeof required?.scopes !== \"undefined\",\n        },\n        form.setValue,\n      );\n      Object.entries(\n        flatten<any, any>({ permissions, selector, required }, { safe: true }),\n      ).map(([key, value]) => form.setValue(key as any, value));\n      form.setValue(\n        \"annotations\",\n        Object.entries(annotations || {}).map(([key, value]) => ({\n          key,\n          value: value as Record<string, unknown>,\n        })),\n      );\n      form.setValue(\n        \"validations\",\n        Object.entries(validations || {}).map(([key, value]) => ({\n          key,\n          value: value as Record<string, unknown>,\n        })),\n      );\n      form.setValue(\"isRequired\", required !== undefined);\n    },\n    [],\n  );\n\n  const save = async ({\n    hasSelector,\n    hasRequiredScopes,\n    ...formFields\n  }: UserProfileAttributeFormFields) => {\n    if (!hasSelector) {\n      delete formFields.selector;\n    }\n\n    if (!hasRequiredScopes) {\n      delete formFields.required?.scopes;\n    }\n\n    const validations = formFields.validations.reduce(\n      (prevValidations, currentValidations) => {\n        prevValidations[currentValidations.key] =\n          currentValidations.value || {};\n        return prevValidations;\n      },\n      {} as Record<string, unknown>,\n    );\n\n    const annotations = formFields.annotations.reduce(\n      (obj, item) => Object.assign(obj, { [item.key]: item.value }),\n      {},\n    );\n\n    const patchAttributes = () =>\n      config?.attributes!.map((attribute) => {\n        if (attribute.name !== attributeName) {\n          return attribute;\n        }\n\n        delete attribute.required;\n        return Object.assign(\n          {\n            ...attribute,\n            name: attributeName,\n            displayName: formFields.displayName!,\n            selector: formFields.selector,\n            permissions: formFields.permissions!,\n            annotations,\n            validations,\n          },\n          formFields.isRequired ? { required: formFields.required } : undefined,\n          formFields.group ? { group: formFields.group } : { group: null },\n        );\n      });\n\n    const addAttribute = () =>\n      config?.attributes!.concat([\n        Object.assign(\n          {\n            name: formFields.name,\n            displayName: formFields.displayName!,\n            required: formFields.isRequired ? formFields.required : undefined,\n            selector: formFields.selector,\n            permissions: formFields.permissions!,\n            annotations,\n            validations,\n          },\n          formFields.isRequired ? { required: formFields.required } : undefined,\n          formFields.group ? { group: formFields.group } : undefined,\n        ),\n      ] as UserProfileAttribute);\n\n    const updatedAttributes = editMode ? patchAttributes() : addAttribute();\n\n    try {\n      await adminClient.users.updateProfile({\n        ...config,\n        attributes: updatedAttributes as UserProfileAttribute[],\n        realm,\n      });\n\n      navigate(toUserProfile({ realm, tab: \"attributes\" }));\n\n      addAlert(t(\"createAttributeSuccess\"), AlertVariant.success);\n    } catch (error) {\n      addError(\"createAttributeError\", error);\n    }\n  };\n\n  return (\n    <FormProvider {...form}>\n      <ViewHeader\n        titleKey={editMode ? attributeName : t(\"createAttribute\")}\n        subKey={editMode ? \"\" : t(\"createAttributeSubTitle\")}\n      />\n      <PageSection variant=\"light\">\n        <CreateAttributeFormContent save={() => form.handleSubmit(save)()} />\n      </PageSection>\n    </FormProvider>\n  );\n}\n"],"names":["AttributeAnnotations","useTranslation","jsx","FormAccess","FormGroup","Grid","GridItem","KeyValueInput","REQUIRED_FOR","AttributeGeneralSettings","form","useFormContext","clientScopes","setClientScopes","useState","config","setConfig","selectEnabledWhenOpen","setSelectEnabledWhenOpen","selectRequiredForOpen","setSelectRequiredForOpen","isAttributeGroupDropdownOpen","setIsAttributeGroupDropdownOpen","attributeName","useParams","editMode","hasSelector","useWatch","hasRequiredScopes","required","useFetch","adminClient","KeycloakSpinner","setHasSelector","setHasRequiredScopes","jsxs","HelpItem","KeycloakTextInput","Controller","field","Select","_","value","SelectVariant","SelectOption","group","USERNAME_EMAIL","Fragment","Divider","Radio","isOpen","selectedValue","option","changedValue","item","selectedValues","Switch","isEqual","Permissions","name","t","control","Checkbox","AttributePermission","ValidatorSelect","selectedValidators","onChange","allValidator","useServerInfo","validators","useMemo","id","open","toggle","useToggle","setValue","AddValidatorDialog","toggleDialog","onConfirm","selectedValidator","setSelectedValidator","allSelected","useForm","handleSubmit","save","newValidator","Modal","ModalVariant","Button","Form","validator","FormProvider","DynamicComponents","AttributeValidations","addValidatorModalOpen","toggleModal","validatorToDelete","setValidatorToDelete","register","getValues","useEffect","toggleDeleteDialog","DeleteConfirm","useConfirmDialog","ButtonVariant","updatedValidators","annotations","a","PlusCircleIcon","TableComposable","Thead","Tr","Th","Tbody","Td","Text","TextVariants","CreateAttributeFormContent","realm","UserProfileProvider","ScrollForm","FixedButtonsGroup","Link","toUserProfile","NewAttributeSettings","navigate","useNavigate","addAlert","addError","useAlerts","validations","permissions","selector","values","attribute","convertToFormValues","flatten","key","formFields","prevValidations","currentValidations","obj","updatedAttributes","AlertVariant","error","ViewHeader","PageSection"],"mappings":"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"}